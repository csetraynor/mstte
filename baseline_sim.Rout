
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Microsoft R Open 3.5.1
The enhanced R distribution from Microsoft
Microsoft packages Copyright (C) 2018 Microsoft Corporation

Using the Intel MKL for parallel mathematical computing (using 8 cores).

Default CRAN mirror snapshot taken on 2018-08-01.
See: https://mran.microsoft.com/.

[Previously saved workspace restored]

> roxygen2::roxygenise(clean = TRUE)
Warning: Version of roxygen2 last used with this package is 6.1.1.  You only have version 6.1.0
Writing NAMESPACE
Loading mstte
Loading required package: Rcpp
Writing NAMESPACE
Writing reexports.Rd
Writing loo.stanmstte.Rd
Writing log_lik.stanmstte.Rd
Writing get_y.Rd
Writing msjm_stan.Rd
Writing mstte-package.Rd
Writing mstte_stan.Rd
Writing posterior_msttefit.Rd
Writing stanmstte-methods.Rd
Writing print.stanmstte.Rd
Writing summary.stanmstte.Rd
Writing summary.stanmsjm.Rd
Writing trans_mat.Rd
> source("~/aeim/R/simulation.R")
> 
> betas01_t = c(trt = -0.2)
> betas02_t = c(trt =-0.22)
> betas12_t = c(trt =-0.24)
> lambdas01_t = 0.32
> lambdas02_t = 0.36
> lambdas12_t = 0.39
> gammas01_t = 1.9
> gammas02_t = 2.2
> gammas12_t = 2.5
> cens = c(4.5, 5.5)
> 
> true_pars = nlist(betas01_t, betas02_t, betas12_t, lambdas01_t, lambdas02_t, lambdas12_t, gammas01_t, gammas02_t, gammas12_t)
> 
> set.seed(9911)
> covs <- data.frame(id = 1:20000, trt = stats::rbinom(20000, 1L, 0.5))
> 
> sim_wei <- rsimid(
+   dist01 = "weibull",
+   dist02 = "weibull",
+   dist12 = "weibull",
+   betas01 = betas01_t,
+   betas02 = betas02_t,
+   betas12 = betas12_t,
+   lambdas01 = lambdas01_t,
+   lambdas02 = lambdas02_t,
+   lambdas12 = lambdas12_t,
+   gammas01 = gammas01_t,
+   gammas02 = gammas02_t,
+   gammas12 = gammas12_t,
+   x = covs,
+   cens = cens
+ )
> 
> #sim_wei$time_diff = sim_wei$os_time - sim_wei$df_time
> tmat_mst <- mstate::trans.illdeath(names=c("diagnosis","relapse","death"))
> sim_wei_mstate <- mstate::msprep(time=c(NA,"df_time","os_time"),
+                                  status=c(NA,"df_event","os_event"),
+                                  data = sim_wei,
+                                  trans=tmat_mst)
> sim_wei_mstate <- dplyr::left_join(sim_wei_mstate,
+                                    sim_wei[ , c("id", "trt")])
Joining, by = "id"
> 
> 
> formula = lapply(1:3, function (x)
+   as.formula(Surv(time=time,event=status) ~ trt) )
> 
> basehaz = lapply(1:3, function(x)
+   "weibull")
> 
> prior_intercept = lapply(1:3, function(x)
+   rstanarm::normal() )
> 
> prior_aux = lapply(1:3, function(x)
+   rstanarm::cauchy() )
> 
> options(mc.cores = 8)
> stanfit <- mstte_stan(formula = formula,
+                       data = sim_wei_mstate,
+                       transition_labels = c("DP", "DX", "DPDX"),
+                       basehaz = basehaz,
+                       prior           = lapply(1:3, function(x)
+                         rstanarm::normal() ),
+                       prior_intercept = prior_intercept,
+                       prior_aux       = prior_aux,
+                       iter = 3000,
+                       seed = 5674,
+                       chains = 8,
+                       control = list(adapt_delta = 0.99)
+ )

SAMPLING FOR MODEL 'mstte' NOW (CHAIN 1).

SAMPLING FOR MODEL 'mstte' NOW (CHAIN 2).

SAMPLING FOR MODEL 'mstte' NOW (CHAIN 3).

SAMPLING FOR MODEL 'mstte' NOW (CHAIN 4).

SAMPLING FOR MODEL 'mstte' NOW (CHAIN 5).
Chain 1: 
Chain 1: Gradient evaluation took 0.04 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 400 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 

SAMPLING FOR MODEL 'mstte' NOW (CHAIN 6).
Chain 2: 
Chain 2: Gradient evaluation took 0.04 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 400 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 

SAMPLING FOR MODEL 'mstte' NOW (CHAIN 7).
Chain 3: 
Chain 3: Gradient evaluation took 0.04 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 400 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 

SAMPLING FOR MODEL 'mstte' NOW (CHAIN 8).
Chain 4: 
Chain 4: Gradient evaluation took 0.04 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 400 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 5: 
Chain 5: Gradient evaluation took 0.04 seconds
Chain 5: 1000 transitions using 10 leapfrog steps per transition would take 400 seconds.
Chain 5: Adjust your expectations accordingly!
Chain 5: 
Chain 5: 
Chain 6: 
Chain 6: Gradient evaluation took 0.04 seconds
Chain 6: 1000 transitions using 10 leapfrog steps per transition would take 400 seconds.
Chain 6: Adjust your expectations accordingly!
Chain 6: 
Chain 6: 
Chain 7: 
Chain 7: Gradient evaluation took 0.04 seconds
Chain 7: 1000 transitions using 10 leapfrog steps per transition would take 400 seconds.
Chain 7: Adjust your expectations accordingly!
Chain 7: 
Chain 7: 
Chain 8: 
Chain 8: Gradient evaluation took 0.03 seconds
Chain 8: 1000 transitions using 10 leapfrog steps per transition would take 300 seconds.
Chain 8: Adjust your expectations accordingly!
Chain 8: 
Chain 8: 
Chain 4: Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 8: Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 3: Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 6: Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 7: Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 5: Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 1: Iteration:    1 / 3000 [  0%]  (Warmup)
Chain 4: Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 6: Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 7: Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 5: Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 3: Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 2: Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 8: Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 4: Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 3: Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 5: Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 6: Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 7: Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 2: Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 1: Iteration:  300 / 3000 [ 10%]  (Warmup)
Chain 8: Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 4: Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 5: Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 6: Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 3: Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 7: Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 2: Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 8: Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 1: Iteration:  600 / 3000 [ 20%]  (Warmup)
Chain 4: Iteration: 1200 / 3000 [ 40%]  (Warmup)
Chain 6: Iteration: 1200 / 3000 [ 40%]  (Warmup)
Chain 5: Iteration: 1200 / 3000 [ 40%]  (Warmup)
Chain 7: Iteration: 1200 / 3000 [ 40%]  (Warmup)
Chain 3: Iteration: 1200 / 3000 [ 40%]  (Warmup)
Chain 2: Iteration: 1200 / 3000 [ 40%]  (Warmup)
Chain 8: Iteration: 1200 / 3000 [ 40%]  (Warmup)
Chain 1: Iteration:  900 / 3000 [ 30%]  (Warmup)
Chain 6: Iteration: 1500 / 3000 [ 50%]  (Warmup)
Chain 6: Iteration: 1501 / 3000 [ 50%]  (Sampling)
Chain 4: Iteration: 1500 / 3000 [ 50%]  (Warmup)
Chain 4: Iteration: 1501 / 3000 [ 50%]  (Sampling)
Chain 5: Iteration: 1500 / 3000 [ 50%]  (Warmup)
Chain 5: Iteration: 1501 / 3000 [ 50%]  (Sampling)
Chain 7: Iteration: 1500 / 3000 [ 50%]  (Warmup)
Chain 7: Iteration: 1501 / 3000 [ 50%]  (Sampling)
Chain 3: Iteration: 1500 / 3000 [ 50%]  (Warmup)
Chain 3: Iteration: 1501 / 3000 [ 50%]  (Sampling)
Chain 2: Iteration: 1500 / 3000 [ 50%]  (Warmup)
Chain 2: Iteration: 1501 / 3000 [ 50%]  (Sampling)
Chain 8: Iteration: 1500 / 3000 [ 50%]  (Warmup)
Chain 8: Iteration: 1501 / 3000 [ 50%]  (Sampling)
Chain 1: Iteration: 1200 / 3000 [ 40%]  (Warmup)
Chain 6: Iteration: 1800 / 3000 [ 60%]  (Sampling)
Chain 3: Iteration: 1800 / 3000 [ 60%]  (Sampling)
Chain 5: Iteration: 1800 / 3000 [ 60%]  (Sampling)
Chain 4: Iteration: 1800 / 3000 [ 60%]  (Sampling)
Chain 7: Iteration: 1800 / 3000 [ 60%]  (Sampling)
Chain 2: Iteration: 1800 / 3000 [ 60%]  (Sampling)
Chain 8: Iteration: 1800 / 3000 [ 60%]  (Sampling)
Chain 6: Iteration: 2100 / 3000 [ 70%]  (Sampling)
Chain 3: Iteration: 2100 / 3000 [ 70%]  (Sampling)
Chain 4: Iteration: 2100 / 3000 [ 70%]  (Sampling)
Chain 5: Iteration: 2100 / 3000 [ 70%]  (Sampling)
Chain 1: Iteration: 1500 / 3000 [ 50%]  (Warmup)
Chain 1: Iteration: 1501 / 3000 [ 50%]  (Sampling)
Chain 7: Iteration: 2100 / 3000 [ 70%]  (Sampling)
Chain 8: Iteration: 2100 / 3000 [ 70%]  (Sampling)
Chain 2: Iteration: 2100 / 3000 [ 70%]  (Sampling)
Chain 3: Iteration: 2400 / 3000 [ 80%]  (Sampling)
Chain 6: Iteration: 2400 / 3000 [ 80%]  (Sampling)
Chain 8: Iteration: 2400 / 3000 [ 80%]  (Sampling)
Chain 4: Iteration: 2400 / 3000 [ 80%]  (Sampling)
Chain 5: Iteration: 2400 / 3000 [ 80%]  (Sampling)
Chain 7: Iteration: 2400 / 3000 [ 80%]  (Sampling)
Chain 3: Iteration: 2700 / 3000 [ 90%]  (Sampling)
Chain 2: Iteration: 2400 / 3000 [ 80%]  (Sampling)
Chain 1: Iteration: 1800 / 3000 [ 60%]  (Sampling)
Chain 6: Iteration: 2700 / 3000 [ 90%]  (Sampling)
Chain 8: Iteration: 2700 / 3000 [ 90%]  (Sampling)
Chain 4: Iteration: 2700 / 3000 [ 90%]  (Sampling)
Chain 5: Iteration: 2700 / 3000 [ 90%]  (Sampling)
Chain 7: Iteration: 2700 / 3000 [ 90%]  (Sampling)
Chain 3: Iteration: 3000 / 3000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 863.12 seconds (Warm-up)
Chain 3:                662.3 seconds (Sampling)
Chain 3:                1525.42 seconds (Total)
Chain 3: 
Chain 2: Iteration: 2700 / 3000 [ 90%]  (Sampling)
Chain 6: Iteration: 3000 / 3000 [100%]  (Sampling)
Chain 6: 
Chain 6:  Elapsed Time: 832.03 seconds (Warm-up)
Chain 6:                736.64 seconds (Sampling)
Chain 6:                1568.67 seconds (Total)
Chain 6: 
Chain 8: Iteration: 3000 / 3000 [100%]  (Sampling)
Chain 8: 
Chain 8:  Elapsed Time: 934.54 seconds (Warm-up)
Chain 8:                652.95 seconds (Sampling)
Chain 8:                1587.49 seconds (Total)
Chain 8: 
Chain 1: Iteration: 2100 / 3000 [ 70%]  (Sampling)
Chain 4: Iteration: 3000 / 3000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 841.23 seconds (Warm-up)
Chain 4:                804.3 seconds (Sampling)
Chain 4:                1645.53 seconds (Total)
Chain 4: 
Chain 5: Iteration: 3000 / 3000 [100%]  (Sampling)
Chain 5: 
Chain 5:  Elapsed Time: 842.14 seconds (Warm-up)
Chain 5:                819.61 seconds (Sampling)
Chain 5:                1661.75 seconds (Total)
Chain 5: 
Chain 7: Iteration: 3000 / 3000 [100%]  (Sampling)
Chain 7: 
Chain 7:  Elapsed Time: 862.02 seconds (Warm-up)
Chain 7:                805.83 seconds (Sampling)
Chain 7:                1667.85 seconds (Total)
Chain 7: 
Chain 2: Iteration: 3000 / 3000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 885.61 seconds (Warm-up)
Chain 2:                827.27 seconds (Sampling)
Chain 2:                1712.88 seconds (Total)
Chain 2: 
Chain 1: Iteration: 2400 / 3000 [ 80%]  (Sampling)
Chain 1: Iteration: 2700 / 3000 [ 90%]  (Sampling)
Chain 1: Iteration: 3000 / 3000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 1176.26 seconds (Warm-up)
Chain 1:                1014.37 seconds (Sampling)
Chain 1:                2190.63 seconds (Total)
Chain 1: 
> 
> saveRDS(nlist(stanfit,true_pars ), "~/rfactory/mstte-data/baseline_sim.RDS")
> ##########################################
> # simfit = readRDS("~/rfactory/mstte-data/baseline_sim.RDS")
> # simfit$stanfit
> 
> proc.time()
     user    system   elapsed 
13591.800     7.802  2225.407 
