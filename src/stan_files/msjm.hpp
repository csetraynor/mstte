/*
    mstte is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mstte is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mstte.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_msjm_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_msjm");
    reader.add_event(1, 1, "include", "/functions/common_functions.stan");
    reader.add_event(1, 0, "start", "/functions/common_functions.stan");
    reader.add_event(300, 299, "end", "/functions/common_functions.stan");
    reader.add_event(300, 2, "restart", "model_msjm");
    reader.add_event(300, 2, "include", "/functions/bernoulli_likelihoods.stan");
    reader.add_event(300, 0, "start", "/functions/bernoulli_likelihoods.stan");
    reader.add_event(427, 127, "end", "/functions/bernoulli_likelihoods.stan");
    reader.add_event(427, 3, "restart", "model_msjm");
    reader.add_event(427, 3, "include", "/functions/binomial_likelihoods.stan");
    reader.add_event(427, 0, "start", "/functions/binomial_likelihoods.stan");
    reader.add_event(495, 68, "end", "/functions/binomial_likelihoods.stan");
    reader.add_event(495, 4, "restart", "model_msjm");
    reader.add_event(495, 4, "include", "/functions/continuous_likelihoods.stan");
    reader.add_event(495, 0, "start", "/functions/continuous_likelihoods.stan");
    reader.add_event(731, 236, "end", "/functions/continuous_likelihoods.stan");
    reader.add_event(731, 5, "restart", "model_msjm");
    reader.add_event(731, 5, "include", "/functions/count_likelihoods.stan");
    reader.add_event(731, 0, "start", "/functions/count_likelihoods.stan");
    reader.add_event(784, 53, "end", "/functions/count_likelihoods.stan");
    reader.add_event(784, 6, "restart", "model_msjm");
    reader.add_event(784, 6, "include", "/functions/mvmer_functions.stan");
    reader.add_event(784, 0, "start", "/functions/mvmer_functions.stan");
    reader.add_event(1213, 429, "end", "/functions/mvmer_functions.stan");
    reader.add_event(1213, 7, "restart", "model_msjm");
    reader.add_event(1213, 7, "include", "/functions/hazard_functions.stan");
    reader.add_event(1213, 0, "start", "/functions/hazard_functions.stan");
    reader.add_event(1368, 155, "end", "/functions/hazard_functions.stan");
    reader.add_event(1368, 8, "restart", "model_msjm");
    reader.add_event(1368, 8, "include", "/functions/jm_functions.stan");
    reader.add_event(1368, 0, "start", "/functions/jm_functions.stan");
    reader.add_event(1657, 289, "end", "/functions/jm_functions.stan");
    reader.add_event(1657, 9, "restart", "model_msjm");
    reader.add_event(1671, 23, "include", "/data/dimensions_mvmer.stan");
    reader.add_event(1671, 0, "start", "/data/dimensions_mvmer.stan");
    reader.add_event(1701, 30, "end", "/data/dimensions_mvmer.stan");
    reader.add_event(1701, 24, "restart", "model_msjm");
    reader.add_event(1713, 36, "include", "/data/data_mvmer.stan");
    reader.add_event(1713, 0, "start", "/data/data_mvmer.stan");
    reader.add_event(1767, 54, "end", "/data/data_mvmer.stan");
    reader.add_event(1767, 37, "restart", "model_msjm");
    reader.add_event(1779, 49, "include", "/data/data_event01.stan");
    reader.add_event(1779, 0, "start", "/data/data_event01.stan");
    reader.add_event(1837, 58, "end", "/data/data_event01.stan");
    reader.add_event(1837, 50, "restart", "model_msjm");
    reader.add_event(1837, 50, "include", "/data/data_event02.stan");
    reader.add_event(1837, 0, "start", "/data/data_event02.stan");
    reader.add_event(1895, 58, "end", "/data/data_event02.stan");
    reader.add_event(1895, 51, "restart", "model_msjm");
    reader.add_event(1895, 51, "include", "/data/data_event12.stan");
    reader.add_event(1895, 0, "start", "/data/data_event12.stan");
    reader.add_event(1953, 58, "end", "/data/data_event12.stan");
    reader.add_event(1953, 52, "restart", "model_msjm");
    reader.add_event(1970, 69, "include", "/data/data_assoc01.stan");
    reader.add_event(1970, 0, "start", "/data/data_assoc01.stan");
    reader.add_event(2148, 178, "end", "/data/data_assoc01.stan");
    reader.add_event(2148, 70, "restart", "model_msjm");
    reader.add_event(2148, 70, "include", "/data/data_assoc02.stan");
    reader.add_event(2148, 0, "start", "/data/data_assoc02.stan");
    reader.add_event(2326, 178, "end", "/data/data_assoc02.stan");
    reader.add_event(2326, 71, "restart", "model_msjm");
    reader.add_event(2326, 71, "include", "/data/data_assoc12.stan");
    reader.add_event(2326, 0, "start", "/data/data_assoc12.stan");
    reader.add_event(2504, 178, "end", "/data/data_assoc12.stan");
    reader.add_event(2504, 72, "restart", "model_msjm");
    reader.add_event(2508, 76, "include", "/data/hyperparameters_mvmer.stan");
    reader.add_event(2508, 0, "start", "/data/hyperparameters_mvmer.stan");
    reader.add_event(2550, 42, "end", "/data/hyperparameters_mvmer.stan");
    reader.add_event(2550, 77, "restart", "model_msjm");
    reader.add_event(2550, 77, "include", "/data/hyperparameters_idm.stan");
    reader.add_event(2550, 0, "start", "/data/hyperparameters_idm.stan");
    reader.add_event(2594, 44, "end", "/data/hyperparameters_idm.stan");
    reader.add_event(2594, 78, "restart", "model_msjm");
    reader.add_event(2598, 82, "include", "/data/hyperparameters_assoc_idm.stan");
    reader.add_event(2598, 0, "start", "/data/hyperparameters_assoc_idm.stan");
    reader.add_event(2625, 27, "end", "/data/hyperparameters_assoc_idm.stan");
    reader.add_event(2625, 83, "restart", "model_msjm");
    reader.add_event(2633, 91, "include", "/tdata/tdata_idm.stan");
    reader.add_event(2633, 0, "start", "/tdata/tdata_idm.stan");
    reader.add_event(2659, 26, "end", "/tdata/tdata_idm.stan");
    reader.add_event(2659, 92, "restart", "model_msjm");
    reader.add_event(2667, 100, "include", "/tdata/tdata_mvmer.stan");
    reader.add_event(2667, 0, "start", "/tdata/tdata_mvmer.stan");
    reader.add_event(2729, 62, "end", "/tdata/tdata_mvmer.stan");
    reader.add_event(2729, 101, "restart", "model_msjm");
    reader.add_event(2749, 121, "include", "/parameters/parameters_mvmer.stan");
    reader.add_event(2749, 0, "start", "/parameters/parameters_mvmer.stan");
    reader.add_event(2806, 57, "end", "/parameters/parameters_mvmer.stan");
    reader.add_event(2806, 122, "restart", "model_msjm");
    reader.add_event(2809, 125, "include", "/parameters/parameters_idm.stan");
    reader.add_event(2809, 0, "start", "/parameters/parameters_idm.stan");
    reader.add_event(2872, 63, "end", "/parameters/parameters_idm.stan");
    reader.add_event(2872, 126, "restart", "model_msjm");
    reader.add_event(2874, 128, "include", "/parameters/parameters_assoc_idm.stan");
    reader.add_event(2874, 0, "start", "/parameters/parameters_assoc_idm.stan");
    reader.add_event(2904, 30, "end", "/parameters/parameters_assoc_idm.stan");
    reader.add_event(2904, 129, "restart", "model_msjm");
    reader.add_event(2924, 149, "include", "/tparameters/tparameters_mvmer.stan");
    reader.add_event(2924, 0, "start", "/tparameters/tparameters_mvmer.stan");
    reader.add_event(3004, 80, "end", "/tparameters/tparameters_mvmer.stan");
    reader.add_event(3004, 150, "restart", "model_msjm");
    reader.add_event(3009, 155, "include", "/tparameters/tparameters_idm.stan");
    reader.add_event(3009, 0, "start", "/tparameters/tparameters_idm.stan");
    reader.add_event(3047, 38, "end", "/tparameters/tparameters_idm.stan");
    reader.add_event(3047, 156, "restart", "model_msjm");
    reader.add_event(3052, 161, "include", "/model/mvmer_lp.stan");
    reader.add_event(3052, 0, "start", "/model/mvmer_lp.stan");
    reader.add_event(3088, 36, "end", "/model/mvmer_lp.stan");
    reader.add_event(3088, 162, "restart", "model_msjm");
    reader.add_event(3117, 191, "include", "/model/assoc_evaluate01.stan");
    reader.add_event(3117, 0, "start", "/model/assoc_evaluate01.stan");
    reader.add_event(3142, 25, "include", "/model/make_eta_tmp01.stan");
    reader.add_event(3142, 0, "start", "/model/make_eta_tmp01.stan");
    reader.add_event(3191, 49, "end", "/model/make_eta_tmp01.stan");
    reader.add_event(3191, 26, "restart", "/model/assoc_evaluate01.stan");
    reader.add_event(3234, 69, "include", "/model/make_eta_tmp2.stan");
    reader.add_event(3234, 0, "start", "/model/make_eta_tmp2.stan");
    reader.add_event(3283, 49, "end", "/model/make_eta_tmp2.stan");
    reader.add_event(3283, 70, "restart", "/model/assoc_evaluate01.stan");
    reader.add_event(3295, 82, "include", "/model/make_eta_tmp2.stan");
    reader.add_event(3295, 0, "start", "/model/make_eta_tmp2.stan");
    reader.add_event(3344, 49, "end", "/model/make_eta_tmp2.stan");
    reader.add_event(3344, 83, "restart", "/model/assoc_evaluate01.stan");
    reader.add_event(3518, 257, "include", "/model/make_eta_tmp.stan");
    reader.add_event(3518, 0, "start", "/model/make_eta_tmp.stan");
    reader.add_event(3567, 49, "end", "/model/make_eta_tmp.stan");
    reader.add_event(3567, 258, "restart", "/model/assoc_evaluate01.stan");
    reader.add_event(3605, 296, "include", "/model/make_eta_tmp2.stan");
    reader.add_event(3605, 0, "start", "/model/make_eta_tmp2.stan");
    reader.add_event(3654, 49, "end", "/model/make_eta_tmp2.stan");
    reader.add_event(3654, 297, "restart", "/model/assoc_evaluate01.stan");
    reader.add_event(3666, 309, "include", "/model/make_eta_tmp2.stan");
    reader.add_event(3666, 0, "start", "/model/make_eta_tmp2.stan");
    reader.add_event(3715, 49, "end", "/model/make_eta_tmp2.stan");
    reader.add_event(3715, 310, "restart", "/model/assoc_evaluate01.stan");
    reader.add_event(3812, 407, "end", "/model/assoc_evaluate01.stan");
    reader.add_event(3812, 192, "restart", "model_msjm");
    reader.add_event(3820, 200, "include", "/model/assoc_evaluate02.stan");
    reader.add_event(3820, 0, "start", "/model/assoc_evaluate02.stan");
    reader.add_event(3845, 25, "include", "/model/make_eta_tmp02.stan");
    reader.add_event(3845, 0, "start", "/model/make_eta_tmp02.stan");
    reader.add_event(3894, 49, "end", "/model/make_eta_tmp02.stan");
    reader.add_event(3894, 26, "restart", "/model/assoc_evaluate02.stan");
    reader.add_event(4274, 406, "end", "/model/assoc_evaluate02.stan");
    reader.add_event(4274, 201, "restart", "model_msjm");
    reader.add_event(4282, 209, "include", "/model/assoc_evaluate12.stan");
    reader.add_event(4282, 0, "start", "/model/assoc_evaluate12.stan");
    reader.add_event(4307, 25, "include", "/model/make_eta_tmp12.stan");
    reader.add_event(4307, 0, "start", "/model/make_eta_tmp12.stan");
    reader.add_event(4356, 49, "end", "/model/make_eta_tmp12.stan");
    reader.add_event(4356, 26, "restart", "/model/assoc_evaluate12.stan");
    reader.add_event(4736, 406, "end", "/model/assoc_evaluate12.stan");
    reader.add_event(4736, 210, "restart", "model_msjm");
    reader.add_event(4743, 217, "include", "/model/event_lp01.stan");
    reader.add_event(4743, 0, "start", "/model/event_lp01.stan");
    reader.add_event(4840, 97, "end", "/model/event_lp01.stan");
    reader.add_event(4840, 218, "restart", "model_msjm");
    reader.add_event(4842, 220, "include", "/model/event_lp02.stan");
    reader.add_event(4842, 0, "start", "/model/event_lp02.stan");
    reader.add_event(4939, 97, "end", "/model/event_lp02.stan");
    reader.add_event(4939, 221, "restart", "model_msjm");
    reader.add_event(4941, 223, "include", "/model/event_lp12.stan");
    reader.add_event(4941, 0, "start", "/model/event_lp12.stan");
    reader.add_event(5038, 97, "end", "/model/event_lp12.stan");
    reader.add_event(5038, 224, "restart", "model_msjm");
    reader.add_event(5046, 232, "include", "/model/priors_mvmer.stan");
    reader.add_event(5046, 0, "start", "/model/priors_mvmer.stan");
    reader.add_event(5107, 61, "end", "/model/priors_mvmer.stan");
    reader.add_event(5107, 233, "restart", "model_msjm");
    reader.add_event(5108, 234, "include", "/model/priors_idm.stan");
    reader.add_event(5108, 0, "start", "/model/priors_idm.stan");
    reader.add_event(5215, 107, "end", "/model/priors_idm.stan");
    reader.add_event(5215, 235, "restart", "model_msjm");
    reader.add_event(5226, 246, "include", "/gqs/gen_quantities_mvmer.stan");
    reader.add_event(5226, 0, "start", "/gqs/gen_quantities_mvmer.stan");
    reader.add_event(5299, 73, "end", "/gqs/gen_quantities_mvmer.stan");
    reader.add_event(5299, 247, "restart", "model_msjm");
    reader.add_event(5304, 252, "include", "/gqs/gen_quantities_idm.stan");
    reader.add_event(5304, 0, "start", "/gqs/gen_quantities_idm.stan");
    reader.add_event(5327, 23, "end", "/gqs/gen_quantities_idm.stan");
    reader.add_event(5327, 253, "restart", "model_msjm");
    reader.add_event(5330, 254, "end", "model_msjm");
    return reader;
}

template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
make_theta_L(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 23;
        validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
        (void) theta_L;  // dummy to suppress unused var warning

        stan::math::initialize(theta_L, DUMMY_VAR__);
        stan::math::fill(theta_L,DUMMY_VAR__);
        current_statement_begin__ = 24;
        int zeta_mark(0);
        (void) zeta_mark;  // dummy to suppress unused var warning

        stan::math::fill(zeta_mark, std::numeric_limits<int>::min());
        stan::math::assign(zeta_mark,1);
        current_statement_begin__ = 25;
        int rho_mark(0);
        (void) rho_mark;  // dummy to suppress unused var warning

        stan::math::fill(rho_mark, std::numeric_limits<int>::min());
        stan::math::assign(rho_mark,1);
        current_statement_begin__ = 26;
        int z_T_mark(0);
        (void) z_T_mark;  // dummy to suppress unused var warning

        stan::math::fill(z_T_mark, std::numeric_limits<int>::min());
        stan::math::assign(z_T_mark,1);
        current_statement_begin__ = 27;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning

        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);


        current_statement_begin__ = 30;
        for (int i = 1; i <= size(p); ++i) {
            {
            current_statement_begin__ = 31;
            int nc(0);
            (void) nc;  // dummy to suppress unused var warning

            stan::math::fill(nc, std::numeric_limits<int>::min());
            stan::math::assign(nc,get_base1(p,i,"p",1));


            current_statement_begin__ = 32;
            if (as_bool(logical_eq(nc,1))) {

                current_statement_begin__ = 33;
                stan::model::assign(theta_L, 
                            stan::model::cons_list(stan::model::index_uni(theta_L_mark), stan::model::nil_index_list()), 
                            ((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion), 
                            "assigning variable theta_L");
                current_statement_begin__ = 35;
                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
            } else {
                {
                current_statement_begin__ = 38;
                validate_non_negative_index("T_i", "nc", nc);
                validate_non_negative_index("T_i", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
                (void) T_i;  // dummy to suppress unused var warning

                stan::math::initialize(T_i, DUMMY_VAR__);
                stan::math::fill(T_i,DUMMY_VAR__);
                current_statement_begin__ = 39;
                local_scalar_t__ std_dev;
                (void) std_dev;  // dummy to suppress unused var warning

                stan::math::initialize(std_dev, DUMMY_VAR__);
                stan::math::fill(std_dev,DUMMY_VAR__);
                current_statement_begin__ = 40;
                local_scalar_t__ T21;
                (void) T21;  // dummy to suppress unused var warning

                stan::math::initialize(T21, DUMMY_VAR__);
                stan::math::fill(T21,DUMMY_VAR__);
                current_statement_begin__ = 41;
                local_scalar_t__ trace_T_i;
                (void) trace_T_i;  // dummy to suppress unused var warning

                stan::math::initialize(trace_T_i, DUMMY_VAR__);
                stan::math::fill(trace_T_i,DUMMY_VAR__);
                stan::math::assign(trace_T_i,(square(((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion)) * nc));
                current_statement_begin__ = 42;
                validate_non_negative_index("pi", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(nc));
                (void) pi;  // dummy to suppress unused var warning

                stan::math::initialize(pi, DUMMY_VAR__);
                stan::math::fill(pi,DUMMY_VAR__);
                stan::math::assign(pi,segment(zeta,zeta_mark,nc));


                current_statement_begin__ = 43;
                stan::math::assign(pi, divide(pi, sum(pi)));
                current_statement_begin__ = 46;
                stan::math::assign(zeta_mark, (zeta_mark + nc));
                current_statement_begin__ = 47;
                stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,1,"pi",1) * trace_T_i)));
                current_statement_begin__ = 48;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            std_dev, 
                            "assigning variable T_i");
                current_statement_begin__ = 51;
                stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,2,"pi",1) * trace_T_i)));
                current_statement_begin__ = 52;
                stan::math::assign(T21, ((2.0 * get_base1(rho,rho_mark,"rho",1)) - 1.0));
                current_statement_begin__ = 53;
                stan::math::assign(rho_mark, (rho_mark + 1));
                current_statement_begin__ = 54;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (std_dev * stan::math::sqrt((1.0 - square(T21)))), 
                            "assigning variable T_i");
                current_statement_begin__ = 55;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (std_dev * T21), 
                            "assigning variable T_i");
                current_statement_begin__ = 57;
                for (int r = 2; r <= (nc - 1); ++r) {
                    {
                    current_statement_begin__ = 58;
                    int rp1(0);
                    (void) rp1;  // dummy to suppress unused var warning

                    stan::math::fill(rp1, std::numeric_limits<int>::min());
                    stan::math::assign(rp1,(r + 1));
                    current_statement_begin__ = 59;
                    validate_non_negative_index("T_row", "r", r);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  T_row(static_cast<Eigen::VectorXd::Index>(r));
                    (void) T_row;  // dummy to suppress unused var warning

                    stan::math::initialize(T_row, DUMMY_VAR__);
                    stan::math::fill(T_row,DUMMY_VAR__);
                    stan::math::assign(T_row,segment(z_T,z_T_mark,r));
                    current_statement_begin__ = 60;
                    local_scalar_t__ scale_factor;
                    (void) scale_factor;  // dummy to suppress unused var warning

                    stan::math::initialize(scale_factor, DUMMY_VAR__);
                    stan::math::fill(scale_factor,DUMMY_VAR__);
                    stan::math::assign(scale_factor,(stan::math::sqrt((get_base1(rho,rho_mark,"rho",1) / dot_self(T_row))) * std_dev));


                    current_statement_begin__ = 61;
                    stan::math::assign(z_T_mark, (z_T_mark + r));
                    current_statement_begin__ = 62;
                    stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,rp1,"pi",1) * trace_T_i)));
                    current_statement_begin__ = 63;
                    for (int c = 1; c <= r; ++c) {
                        current_statement_begin__ = 63;
                        stan::model::assign(T_i, 
                                    stan::model::cons_list(stan::model::index_uni(rp1), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(T_row,c,"T_row",1) * scale_factor), 
                                    "assigning variable T_i");
                    }
                    current_statement_begin__ = 64;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(rp1), stan::model::cons_list(stan::model::index_uni(rp1), stan::model::nil_index_list())), 
                                (stan::math::sqrt((1.0 - get_base1(rho,rho_mark,"rho",1))) * std_dev), 
                                "assigning variable T_i");
                    current_statement_begin__ = 65;
                    stan::math::assign(rho_mark, (rho_mark + 1));
                    }
                }
                current_statement_begin__ = 69;
                for (int c = 1; c <= nc; ++c) {
                    current_statement_begin__ = 69;
                    for (int r = c; r <= nc; ++r) {

                        current_statement_begin__ = 70;
                        stan::model::assign(theta_L, 
                                    stan::model::cons_list(stan::model::index_uni(theta_L_mark), stan::model::nil_index_list()), 
                                    get_base1(T_i,r,c,"T_i",1), 
                                    "assigning variable theta_L");
                        current_statement_begin__ = 71;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 75;
        return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 90;
        validate_non_negative_index("b", "rows(z_b)", rows(z_b));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>(rows(z_b)));
        (void) b;  // dummy to suppress unused var warning

        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        current_statement_begin__ = 91;
        int b_mark(0);
        (void) b_mark;  // dummy to suppress unused var warning

        stan::math::fill(b_mark, std::numeric_limits<int>::min());
        stan::math::assign(b_mark,1);
        current_statement_begin__ = 92;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning

        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);


        current_statement_begin__ = 93;
        for (int i = 1; i <= size(p); ++i) {
            {
            current_statement_begin__ = 94;
            int nc(0);
            (void) nc;  // dummy to suppress unused var warning

            stan::math::fill(nc, std::numeric_limits<int>::min());
            stan::math::assign(nc,get_base1(p,i,"p",1));


            current_statement_begin__ = 95;
            if (as_bool(logical_eq(nc,1))) {
                {
                current_statement_begin__ = 96;
                local_scalar_t__ theta_L_start;
                (void) theta_L_start;  // dummy to suppress unused var warning

                stan::math::initialize(theta_L_start, DUMMY_VAR__);
                stan::math::fill(theta_L_start,DUMMY_VAR__);
                stan::math::assign(theta_L_start,get_base1(theta_L,theta_L_mark,"theta_L",1));


                current_statement_begin__ = 97;
                for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                    current_statement_begin__ = 98;
                    stan::model::assign(b, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (theta_L_start * get_base1(z_b,s,"z_b",1)), 
                                "assigning variable b");
                }
                current_statement_begin__ = 99;
                stan::math::assign(b_mark, (b_mark + get_base1(l,i,"l",1)));
                current_statement_begin__ = 100;
                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                }
            } else {
                {
                current_statement_begin__ = 103;
                validate_non_negative_index("T_i", "nc", nc);
                validate_non_negative_index("T_i", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
                (void) T_i;  // dummy to suppress unused var warning

                stan::math::initialize(T_i, DUMMY_VAR__);
                stan::math::fill(T_i,DUMMY_VAR__);
                stan::math::assign(T_i,rep_matrix(0,nc,nc));


                current_statement_begin__ = 104;
                for (int c = 1; c <= nc; ++c) {

                    current_statement_begin__ = 105;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                get_base1(theta_L,theta_L_mark,"theta_L",1), 
                                "assigning variable T_i");
                    current_statement_begin__ = 106;
                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    current_statement_begin__ = 107;
                    for (int r = (c + 1); r <= nc; ++r) {

                        current_statement_begin__ = 108;
                        stan::model::assign(T_i, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(theta_L,theta_L_mark,"theta_L",1), 
                                    "assigning variable T_i");
                        current_statement_begin__ = 109;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    }
                }
                current_statement_begin__ = 112;
                for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                    {
                    current_statement_begin__ = 113;
                    validate_non_negative_index("temp", "nc", nc);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  temp(static_cast<Eigen::VectorXd::Index>(nc));
                    (void) temp;  // dummy to suppress unused var warning

                    stan::math::initialize(temp, DUMMY_VAR__);
                    stan::math::fill(temp,DUMMY_VAR__);
                    stan::math::assign(temp,multiply(T_i,segment(z_b,b_mark,nc)));


                    current_statement_begin__ = 114;
                    stan::math::assign(b_mark, (b_mark - 1));
                    current_statement_begin__ = 115;
                    for (int s = 1; s <= nc; ++s) {
                        current_statement_begin__ = 115;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni((b_mark + s)), stan::model::nil_index_list()), 
                                    get_base1(temp,s,"temp",1), 
                                    "assigning variable b");
                    }
                    current_statement_begin__ = 116;
                    stan::math::assign(b_mark, (b_mark + (nc + 1)));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 120;
        return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 141;
        int pos_reg(0);
        (void) pos_reg;  // dummy to suppress unused var warning

        stan::math::fill(pos_reg, std::numeric_limits<int>::min());
        stan::math::assign(pos_reg,1);
        current_statement_begin__ = 142;
        int pos_rho(0);
        (void) pos_rho;  // dummy to suppress unused var warning

        stan::math::fill(pos_rho, std::numeric_limits<int>::min());
        stan::math::assign(pos_rho,1);


        current_statement_begin__ = 143;
        lp_accum__.add(normal_log(z_b,0,1));
        current_statement_begin__ = 144;
        lp_accum__.add(normal_log(z_T,0,1));
        current_statement_begin__ = 145;
        for (int i = 1; i <= t; ++i) {
            current_statement_begin__ = 145;
            if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                {
                current_statement_begin__ = 146;
                validate_non_negative_index("shape1", "(get_base1(p,i,\"p\",1) - 1)", (get_base1(p,i,"p",1) - 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  shape1(static_cast<Eigen::VectorXd::Index>((get_base1(p,i,"p",1) - 1)));
                (void) shape1;  // dummy to suppress unused var warning

                stan::math::initialize(shape1, DUMMY_VAR__);
                stan::math::fill(shape1,DUMMY_VAR__);
                current_statement_begin__ = 147;
                validate_non_negative_index("shape2", "(get_base1(p,i,\"p\",1) - 1)", (get_base1(p,i,"p",1) - 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  shape2(static_cast<Eigen::VectorXd::Index>((get_base1(p,i,"p",1) - 1)));
                (void) shape2;  // dummy to suppress unused var warning

                stan::math::initialize(shape2, DUMMY_VAR__);
                stan::math::fill(shape2,DUMMY_VAR__);
                current_statement_begin__ = 148;
                local_scalar_t__ nu;
                (void) nu;  // dummy to suppress unused var warning

                stan::math::initialize(nu, DUMMY_VAR__);
                stan::math::fill(nu,DUMMY_VAR__);
                stan::math::assign(nu,(get_base1(regularization,pos_reg,"regularization",1) + (0.5 * (get_base1(p,i,"p",1) - 2))));


                current_statement_begin__ = 149;
                stan::math::assign(pos_reg, (pos_reg + 1));
                current_statement_begin__ = 150;
                stan::model::assign(shape1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            nu, 
                            "assigning variable shape1");
                current_statement_begin__ = 151;
                stan::model::assign(shape2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            nu, 
                            "assigning variable shape2");
                current_statement_begin__ = 152;
                for (int j = 2; j <= (get_base1(p,i,"p",1) - 1); ++j) {

                    current_statement_begin__ = 153;
                    stan::math::assign(nu, (nu - 0.5));
                    current_statement_begin__ = 154;
                    stan::model::assign(shape1, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                (0.5 * j), 
                                "assigning variable shape1");
                    current_statement_begin__ = 155;
                    stan::model::assign(shape2, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                nu, 
                                "assigning variable shape2");
                }
                current_statement_begin__ = 157;
                lp_accum__.add(beta_log(stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(pos_rho, ((pos_rho + get_base1(p,i,"p",1)) - 2)), stan::model::nil_index_list()), "rho"),shape1,shape2));
                current_statement_begin__ = 158;
                stan::math::assign(pos_rho, (pos_rho + (get_base1(p,i,"p",1) - 1)));
                }
            }
        }
        current_statement_begin__ = 160;
        lp_accum__.add(gamma_log(zeta,delta,1));
        current_statement_begin__ = 161;
        lp_accum__.add(gamma_log(tau,shape,1));
        current_statement_begin__ = 162;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
hs_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
             const T3__& global_prior_scale,
             const T4__& error_scale,
             const T5__& c2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 178;
        int K(0);
        (void) K;  // dummy to suppress unused var warning

        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(z_beta));
        current_statement_begin__ = 179;
        validate_non_negative_index("lambda", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda;  // dummy to suppress unused var warning

        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda,DUMMY_VAR__);
        stan::math::assign(lambda,elt_multiply(get_base1(local,1,"local",1),stan::math::sqrt(get_base1(local,2,"local",1))));
        current_statement_begin__ = 180;
        local_scalar_t__ tau;
        (void) tau;  // dummy to suppress unused var warning

        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau,DUMMY_VAR__);
        stan::math::assign(tau,(((get_base1(global,1,"global",1) * stan::math::sqrt(get_base1(global,2,"global",1))) * global_prior_scale) * error_scale));
        current_statement_begin__ = 181;
        validate_non_negative_index("lambda2", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda2(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda2;  // dummy to suppress unused var warning

        stan::math::initialize(lambda2, DUMMY_VAR__);
        stan::math::fill(lambda2,DUMMY_VAR__);
        stan::math::assign(lambda2,square(lambda));
        current_statement_begin__ = 182;
        validate_non_negative_index("lambda_tilde", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_tilde(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_tilde;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde,DUMMY_VAR__);
        stan::math::assign(lambda_tilde,stan::math::sqrt(elt_divide(multiply(c2,lambda2),add(c2,multiply(square(tau),lambda2)))));


        current_statement_begin__ = 183;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(elt_multiply(z_beta,lambda_tilde),tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hs_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
             const T3__& global_prior_scale,
             const T4__& error_scale,
             const T5__& c2, std::ostream* pstream__) const {
        return hs_prior(z_beta, global, local, global_prior_scale, error_scale, c2, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
hsplus_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
                 const T3__& global_prior_scale,
                 const T4__& error_scale,
                 const T5__& c2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 199;
        int K(0);
        (void) K;  // dummy to suppress unused var warning

        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(z_beta));
        current_statement_begin__ = 200;
        validate_non_negative_index("lambda", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda;  // dummy to suppress unused var warning

        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda,DUMMY_VAR__);
        stan::math::assign(lambda,elt_multiply(get_base1(local,1,"local",1),stan::math::sqrt(get_base1(local,2,"local",1))));
        current_statement_begin__ = 201;
        validate_non_negative_index("eta", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(K));
        (void) eta;  // dummy to suppress unused var warning

        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);
        stan::math::assign(eta,elt_multiply(get_base1(local,3,"local",1),stan::math::sqrt(get_base1(local,4,"local",1))));
        current_statement_begin__ = 202;
        local_scalar_t__ tau;
        (void) tau;  // dummy to suppress unused var warning

        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau,DUMMY_VAR__);
        stan::math::assign(tau,(((get_base1(global,1,"global",1) * stan::math::sqrt(get_base1(global,2,"global",1))) * global_prior_scale) * error_scale));
        current_statement_begin__ = 203;
        validate_non_negative_index("lambda_eta2", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_eta2(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_eta2;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_eta2, DUMMY_VAR__);
        stan::math::fill(lambda_eta2,DUMMY_VAR__);
        stan::math::assign(lambda_eta2,square(elt_multiply(lambda,eta)));
        current_statement_begin__ = 204;
        validate_non_negative_index("lambda_tilde", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_tilde(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_tilde;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde,DUMMY_VAR__);
        stan::math::assign(lambda_tilde,stan::math::sqrt(elt_divide(multiply(c2,lambda_eta2),add(c2,multiply(square(tau),lambda_eta2)))));


        current_statement_begin__ = 206;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(elt_multiply(z_beta,lambda_tilde),tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hsplus_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
                 const T3__& global_prior_scale,
                 const T4__& error_scale,
                 const T5__& c2, std::ostream* pstream__) const {
        return hsplus_prior(z_beta, global, local, global_prior_scale, error_scale, c2, pstream__);
    }
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
CFt(const T0__& z,
        const T1__& df, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 220;
        local_scalar_t__ z2;
        (void) z2;  // dummy to suppress unused var warning

        stan::math::initialize(z2, DUMMY_VAR__);
        stan::math::fill(z2,DUMMY_VAR__);
        stan::math::assign(z2,square(z));
        current_statement_begin__ = 221;
        local_scalar_t__ z3;
        (void) z3;  // dummy to suppress unused var warning

        stan::math::initialize(z3, DUMMY_VAR__);
        stan::math::fill(z3,DUMMY_VAR__);
        stan::math::assign(z3,(z2 * z));
        current_statement_begin__ = 222;
        local_scalar_t__ z5;
        (void) z5;  // dummy to suppress unused var warning

        stan::math::initialize(z5, DUMMY_VAR__);
        stan::math::fill(z5,DUMMY_VAR__);
        stan::math::assign(z5,(z2 * z3));
        current_statement_begin__ = 223;
        local_scalar_t__ z7;
        (void) z7;  // dummy to suppress unused var warning

        stan::math::initialize(z7, DUMMY_VAR__);
        stan::math::fill(z7,DUMMY_VAR__);
        stan::math::assign(z7,(z2 * z5));
        current_statement_begin__ = 224;
        local_scalar_t__ z9;
        (void) z9;  // dummy to suppress unused var warning

        stan::math::initialize(z9, DUMMY_VAR__);
        stan::math::fill(z9,DUMMY_VAR__);
        stan::math::assign(z9,(z2 * z7));
        current_statement_begin__ = 225;
        local_scalar_t__ df2;
        (void) df2;  // dummy to suppress unused var warning

        stan::math::initialize(df2, DUMMY_VAR__);
        stan::math::fill(df2,DUMMY_VAR__);
        stan::math::assign(df2,square(df));
        current_statement_begin__ = 226;
        local_scalar_t__ df3;
        (void) df3;  // dummy to suppress unused var warning

        stan::math::initialize(df3, DUMMY_VAR__);
        stan::math::fill(df3,DUMMY_VAR__);
        stan::math::assign(df3,(df2 * df));
        current_statement_begin__ = 227;
        local_scalar_t__ df4;
        (void) df4;  // dummy to suppress unused var warning

        stan::math::initialize(df4, DUMMY_VAR__);
        stan::math::fill(df4,DUMMY_VAR__);
        stan::math::assign(df4,(df2 * df2));


        current_statement_begin__ = 228;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((z + ((z3 + z) / (4 * df))) + ((((5 * z5) + (16 * z3)) + (3 * z)) / (96 * df2))) + (((((3 * z7) + (19 * z5)) + (17 * z3)) - (15 * z)) / (384 * df3))) + ((((((79 * z9) + (776 * z7)) + (1482 * z5)) - (1920 * z3)) - (945 * z)) / (92160 * df4))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CFt_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& z,
        const T1__& df, std::ostream* pstream__) const {
        return CFt(z, df, pstream__);
    }
};

std::vector<std::vector<int> >
make_V(const int& N,
           const int& t,
           const std::vector<int>& v, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 242;
        validate_non_negative_index("V", "t", t);
        validate_non_negative_index("V", "N", N);
        vector<vector<int> > V(t, (vector<int>(N, 0)));
        stan::math::fill(V, std::numeric_limits<int>::min());
        current_statement_begin__ = 243;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning

        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);


        current_statement_begin__ = 244;
        if (as_bool(logical_gt(t,0))) {
            current_statement_begin__ = 244;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 244;
                for (int i = 1; i <= t; ++i) {

                    current_statement_begin__ = 245;
                    stan::model::assign(V, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(v,pos,"v",1) + 1), 
                                "assigning variable V");
                    current_statement_begin__ = 246;
                    stan::math::assign(pos, (pos + 1));
                }
            }
        }
        current_statement_begin__ = 248;
        return stan::math::promote_scalar<fun_return_scalar_t__>(V);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_V_functor__ {
            std::vector<std::vector<int> >
    operator()(const int& N,
           const int& t,
           const std::vector<int>& v, std::ostream* pstream__) const {
        return make_V(N, t, v, pstream__);
    }
};

template <typename T2__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T5__>::type, Eigen::Dynamic,1>
csr_matrix_times_vector2(const int& m,
                             const int& n,
                             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& w,
                             const std::vector<int>& v,
                             const std::vector<int>& u,
                             const Eigen::Matrix<T5__, Eigen::Dynamic,1>& b, std::ostream* pstream__);

double
make_lower(const int& family,
               const int& link, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 282;
        if (as_bool(logical_eq(family,1))) {
            current_statement_begin__ = 282;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
        }
        current_statement_begin__ = 283;
        if (as_bool(logical_lte(family,3))) {

            current_statement_begin__ = 284;
            if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 284;
                return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
            }
            current_statement_begin__ = 285;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
        current_statement_begin__ = 287;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_lower_functor__ {
            double
    operator()(const int& family,
               const int& link, std::ostream* pstream__) const {
        return make_lower(family, link, pstream__);
    }
};

double
make_upper(const int& family,
               const int& link, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 298;
        if (as_bool((primitive_value(logical_eq(family,4)) && primitive_value(logical_eq(link,5))))) {
            current_statement_begin__ = 298;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
        current_statement_begin__ = 299;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::positive_infinity());
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_upper_functor__ {
            double
    operator()(const int& family,
               const int& link, std::ostream* pstream__) const {
        return make_upper(family, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_bern(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 310;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 310;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 311;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 312;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(divide(stan::math::atan(eta),stan::math::pi()),0.5));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 313;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,5))) {
            current_statement_begin__ = 314;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else {
            current_statement_begin__ = 315;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 316;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_bern_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) const {
        return linkinv_bern(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
ll_bern_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
               const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
               const int& link,
               const std::vector<int>& N, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 329;
        if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 330;
            lp_accum__.add(logistic_ccdf_log(eta0,0,1));
            current_statement_begin__ = 331;
            lp_accum__.add(logistic_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,2))) {

            current_statement_begin__ = 334;
            lp_accum__.add(normal_ccdf_log(eta0,0,1));
            current_statement_begin__ = 335;
            lp_accum__.add(normal_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,3))) {

            current_statement_begin__ = 338;
            lp_accum__.add(cauchy_ccdf_log(eta0,0,1));
            current_statement_begin__ = 339;
            lp_accum__.add(cauchy_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,4))) {

            current_statement_begin__ = 342;
            lp_accum__.add(log1m_exp(eta0));
            current_statement_begin__ = 343;
            lp_accum__.add(eta1);
        } else if (as_bool(logical_eq(link,5))) {

            current_statement_begin__ = 346;
            lp_accum__.add(log1m_exp(minus(stan::math::exp(eta1))));
            current_statement_begin__ = 347;
            lp_accum__.add(minus(stan::math::exp(eta0)));
        } else {
            current_statement_begin__ = 349;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 350;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_bern_lp_functor__ {
    template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
               const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
               const int& link,
               const std::vector<int>& N, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_bern_lp(eta0, eta1, link, N, lp__, lp_accum__, pstream__);
    }
};

template <typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
pw_bern(const int& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 363;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 364;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 365;
        if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 366;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 366;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            bernoulli_logit_log(y,get_base1(eta,n,"eta",1)), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_lte(link,5))) {
            {
            current_statement_begin__ = 369;
            validate_non_negative_index("pi", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(N));
            (void) pi;  // dummy to suppress unused var warning

            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi,DUMMY_VAR__);
            stan::math::assign(pi,linkinv_bern(eta,link, pstream__));


            current_statement_begin__ = 370;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 370;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            bernoulli_log(y,get_base1(pi,n,"pi",1)), 
                            "assigning variable ll");
            }
            }
        } else {
            current_statement_begin__ = 372;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 373;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_bern_functor__ {
    template <typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
    operator()(const int& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) const {
        return pw_bern(y, eta, link, pstream__);
    }
};

template <typename T2__>
typename boost::math::tools::promote_args<T2__>::type
log_clogit_denom(const int& N_j,
                     const int& D_j,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_j, std::ostream* pstream__);

template <typename T2__>
typename boost::math::tools::promote_args<T2__>::type
log_clogit_denom(const int& N_j,
                     const int& D_j,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_j, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 386;
        if (as_bool((primitive_value(logical_eq(D_j,1)) && primitive_value(logical_eq(N_j,rows(eta_j)))))) {
            current_statement_begin__ = 386;
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_sum_exp(eta_j));
        }
        current_statement_begin__ = 387;
        if (as_bool(logical_eq(D_j,0))) {
            current_statement_begin__ = 387;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
        current_statement_begin__ = 388;
        if (as_bool(logical_eq(N_j,D_j))) {

            current_statement_begin__ = 389;
            if (as_bool(logical_eq(D_j,1))) {
                current_statement_begin__ = 389;
                return stan::math::promote_scalar<fun_return_scalar_t__>(get_base1(eta_j,N_j,"eta_j",1));
            }
            current_statement_begin__ = 390;
            return stan::math::promote_scalar<fun_return_scalar_t__>(sum(segment(eta_j,(N_j - 1),2)));
        } else {
            {
            current_statement_begin__ = 393;
            int N_jm1(0);
            (void) N_jm1;  // dummy to suppress unused var warning

            stan::math::fill(N_jm1, std::numeric_limits<int>::min());
            stan::math::assign(N_jm1,(N_j - 1));


            current_statement_begin__ = 394;
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_sum_exp(log_clogit_denom(N_jm1,D_j,eta_j, pstream__),(log_clogit_denom(N_jm1,(D_j - 1),eta_j, pstream__) + get_base1(eta_j,N_j,"eta_j",1))));
            }
        }
        current_statement_begin__ = 397;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::not_a_number());
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_clogit_denom_functor__ {
    template <typename T2__>
        typename boost::math::tools::promote_args<T2__>::type
    operator()(const int& N_j,
                     const int& D_j,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_j, std::ostream* pstream__) const {
        return log_clogit_denom(N_j, D_j, eta_j, pstream__);
    }
};

template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
ll_clogit_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
                 const std::vector<int>& successes,
                 const std::vector<int>& failures,
                 const std::vector<int>& observations, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 411;
        int J(0);
        (void) J;  // dummy to suppress unused var warning

        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,num_elements(observations));
        current_statement_begin__ = 412;
        int pos0(0);
        (void) pos0;  // dummy to suppress unused var warning

        stan::math::fill(pos0, std::numeric_limits<int>::min());
        stan::math::assign(pos0,1);
        current_statement_begin__ = 413;
        int pos1(0);
        (void) pos1;  // dummy to suppress unused var warning

        stan::math::fill(pos1, std::numeric_limits<int>::min());
        stan::math::assign(pos1,1);
        current_statement_begin__ = 414;
        validate_non_negative_index("summands", "J", J);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  summands(static_cast<Eigen::VectorXd::Index>(J));
        (void) summands;  // dummy to suppress unused var warning

        stan::math::initialize(summands, DUMMY_VAR__);
        stan::math::fill(summands,DUMMY_VAR__);


        current_statement_begin__ = 415;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 416;
            int D_g(0);
            (void) D_g;  // dummy to suppress unused var warning

            stan::math::fill(D_g, std::numeric_limits<int>::min());
            stan::math::assign(D_g,get_base1(successes,j,"successes",1));
            current_statement_begin__ = 417;
            int N_g(0);
            (void) N_g;  // dummy to suppress unused var warning

            stan::math::fill(N_g, std::numeric_limits<int>::min());
            stan::math::assign(N_g,get_base1(observations,j,"observations",1));
            current_statement_begin__ = 418;
            int F_g(0);
            (void) F_g;  // dummy to suppress unused var warning

            stan::math::fill(F_g, std::numeric_limits<int>::min());
            stan::math::assign(F_g,get_base1(failures,j,"failures",1));
            current_statement_begin__ = 419;
            validate_non_negative_index("eta_g", "N_g", N_g);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta_g(static_cast<Eigen::VectorXd::Index>(N_g));
            (void) eta_g;  // dummy to suppress unused var warning

            stan::math::initialize(eta_g, DUMMY_VAR__);
            stan::math::fill(eta_g,DUMMY_VAR__);
            stan::math::assign(eta_g,append_row(segment(eta1,pos1,D_g),segment(eta0,pos0,F_g)));


            current_statement_begin__ = 421;
            stan::model::assign(summands, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        log_clogit_denom(N_g,D_g,eta_g, pstream__), 
                        "assigning variable summands");
            current_statement_begin__ = 422;
            stan::math::assign(pos0, (pos0 + F_g));
            current_statement_begin__ = 423;
            stan::math::assign(pos1, (pos1 + D_g));
            }
        }
        current_statement_begin__ = 425;
        lp_accum__.add((sum(eta1) - sum(summands)));
        current_statement_begin__ = 426;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_clogit_lp_functor__ {
    template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
                 const std::vector<int>& successes,
                 const std::vector<int>& failures,
                 const std::vector<int>& observations, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_clogit_lp(eta0, eta1, successes, failures, observations, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_binom(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 436;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 436;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 437;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 438;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(divide(stan::math::atan(eta),stan::math::pi()),0.5));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 439;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,5))) {
            current_statement_begin__ = 440;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else {
            current_statement_begin__ = 441;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 442;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_binom_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_binom(eta, link, pstream__);
    }
};

template <typename T2__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T2__, T_lp__>::type
ll_binom_lp(const std::vector<int>& y,
                const std::vector<int>& trials,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
                const int& link, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 454;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 454;
            lp_accum__.add(binomial_logit_log(y,trials,eta));
        } else if (as_bool(logical_lt(link,4))) {
            current_statement_begin__ = 455;
            lp_accum__.add(binomial_log(y,trials,linkinv_binom(eta,link, pstream__)));
        } else if (as_bool(logical_eq(link,4))) {

            current_statement_begin__ = 457;
            for (int n = 1; n <= num_elements(y); ++n) {

                current_statement_begin__ = 458;
                lp_accum__.add((get_base1(y,n,"y",1) * get_base1(eta,n,"eta",1)));
                current_statement_begin__ = 459;
                lp_accum__.add(((get_base1(trials,n,"trials",1) - get_base1(y,n,"y",1)) * log1m_exp(get_base1(eta,n,"eta",1))));
                current_statement_begin__ = 460;
                lp_accum__.add(binomial_coefficient_log(get_base1(trials,n,"trials",1),get_base1(y,n,"y",1)));
            }
        } else if (as_bool(logical_eq(link,5))) {

            current_statement_begin__ = 464;
            for (int n = 1; n <= num_elements(y); ++n) {
                {
                current_statement_begin__ = 465;
                local_scalar_t__ neg_exp_eta;
                (void) neg_exp_eta;  // dummy to suppress unused var warning

                stan::math::initialize(neg_exp_eta, DUMMY_VAR__);
                stan::math::fill(neg_exp_eta,DUMMY_VAR__);
                stan::math::assign(neg_exp_eta,-(stan::math::exp(get_base1(eta,n,"eta",1))));


                current_statement_begin__ = 466;
                lp_accum__.add((get_base1(y,n,"y",1) * log1m_exp(neg_exp_eta)));
                current_statement_begin__ = 467;
                lp_accum__.add(((get_base1(trials,n,"trials",1) - get_base1(y,n,"y",1)) * neg_exp_eta));
                current_statement_begin__ = 468;
                lp_accum__.add(binomial_coefficient_log(get_base1(trials,n,"trials",1),get_base1(y,n,"y",1)));
                }
            }
        } else {
            current_statement_begin__ = 471;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 472;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_binom_lp_functor__ {
    template <typename T2__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T2__, T_lp__>::type
    operator()(const std::vector<int>& y,
                const std::vector<int>& trials,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
                const int& link, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_binom_lp(y, trials, eta, link, lp__, lp_accum__, pstream__);
    }
};

template <typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,1>
pw_binom(const std::vector<int>& y,
             const std::vector<int>& trials,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 483;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 484;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 485;
        if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 486;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 487;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            binomial_logit_log(get_base1(y,n,"y",1),get_base1(trials,n,"trials",1),get_base1(eta,n,"eta",1)), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_lte(link,5))) {
            {
            current_statement_begin__ = 490;
            validate_non_negative_index("pi", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(N));
            (void) pi;  // dummy to suppress unused var warning

            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi,DUMMY_VAR__);
            stan::math::assign(pi,linkinv_binom(eta,link, pstream__));


            current_statement_begin__ = 491;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 491;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            binomial_log(get_base1(y,n,"y",1),get_base1(trials,n,"trials",1),get_base1(pi,n,"pi",1)), 
                            "assigning variable ll");
            }
            }
        } else {
            current_statement_begin__ = 493;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 494;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_binom_functor__ {
    template <typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
             const std::vector<int>& trials,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
             const int& link, std::ostream* pstream__) const {
        return pw_binom(y, trials, eta, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_gauss(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 504;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 504;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 505;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 506;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(eta));
        } else {
            current_statement_begin__ = 507;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 508;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_gauss_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_gauss(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_gauss(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& sigma,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 519;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract((-(0.5) * stan::math::log((6.2831853071795862 * sigma))),multiply(0.5,square(divide(subtract(y,linkinv_gauss(eta,link, pstream__)),sigma)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_gauss_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& sigma,
             const int& link, std::ostream* pstream__) const {
        return pw_gauss(y, eta, sigma, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_gamma(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 531;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 531;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 532;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 533;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(eta));
        } else {
            current_statement_begin__ = 534;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 535;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_gamma_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_gamma(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
GammaReg(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link,
             const T4__& sum_log_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 550;
        local_scalar_t__ ret;
        (void) ret;  // dummy to suppress unused var warning

        stan::math::initialize(ret, DUMMY_VAR__);
        stan::math::fill(ret,DUMMY_VAR__);
        stan::math::assign(ret,((rows(y) * ((shape * stan::math::log(shape)) - stan::math::lgamma(shape))) + ((shape - 1) * sum_log_y)));


        current_statement_begin__ = 552;
        if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 553;
            stan::math::assign(ret, (ret - ((shape * sum(eta)) + (shape * sum(elt_divide(y,stan::math::exp(eta)))))));
        } else if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 555;
            stan::math::assign(ret, (ret - ((shape * sum(stan::math::log(eta))) + (shape * sum(elt_divide(y,eta))))));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 557;
            stan::math::assign(ret, (ret + ((shape * sum(stan::math::log(eta))) - (shape * dot_product(eta,y)))));
        } else {
            current_statement_begin__ = 558;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 559;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct GammaReg_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link,
             const T4__& sum_log_y, std::ostream* pstream__) const {
        return GammaReg(y, eta, shape, link, sum_log_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_gamma(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 571;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 572;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 573;
        if (as_bool(logical_eq(link,3))) {

            current_statement_begin__ = 574;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 575;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            gamma_log(get_base1(y,n,"y",1),shape,(shape * get_base1(eta,n,"eta",1))), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_eq(link,2))) {

            current_statement_begin__ = 579;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 580;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            gamma_log(get_base1(y,n,"y",1),shape,(shape / stan::math::exp(get_base1(eta,n,"eta",1)))), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 584;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 585;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            gamma_log(get_base1(y,n,"y",1),shape,(shape / get_base1(eta,n,"eta",1))), 
                            "assigning variable ll");
            }
        } else {
            current_statement_begin__ = 588;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 589;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_gamma_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link, std::ostream* pstream__) const {
        return pw_gamma(y, eta, shape, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 600;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 600;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 601;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 602;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(eta));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 603;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_sqrt(eta));
        } else {
            current_statement_begin__ = 604;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 605;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_inv_gaussian_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const int& link, std::ostream* pstream__) const {
        return linkinv_inv_gaussian(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                 const T2__& lambda,
                 const T3__& sum_log_y,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 620;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((0.5 * rows(y)) * stan::math::log((lambda / 6.2831853071795862))) - (1.5 * sum_log_y)) - ((0.5 * lambda) * dot_self(elt_divide(subtract(y,mu),elt_multiply(mu,sqrt_y))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_gaussian_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                 const T2__& lambda,
                 const T3__& sum_log_y,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) const {
        return inv_gaussian(y, mu, lambda, sum_log_y, sqrt_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
pw_inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                    const T2__& lambda,
                    const int& link,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& log_y,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 638;
        validate_non_negative_index("mu", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::assign(mu,linkinv_inv_gaussian(eta,link, pstream__));


        current_statement_begin__ = 639;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(multiply((-(0.5) * lambda),square(elt_divide(subtract(y,mu),elt_multiply(mu,sqrt_y)))),(0.5 * stan::math::log((lambda / 6.2831853071795862)))),multiply(1.5,log_y)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_inv_gaussian_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                    const T2__& lambda,
                    const int& link,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& log_y,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) const {
        return pw_inv_gaussian(y, eta, lambda, link, log_y, sqrt_y, pstream__);
    }
};

template <typename T0__, typename T1__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__>::type
inv_gaussian_rng(const T0__& mu,
                     const T1__& lambda, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 653;
        local_scalar_t__ mu2;
        (void) mu2;  // dummy to suppress unused var warning

        stan::math::initialize(mu2, DUMMY_VAR__);
        stan::math::fill(mu2,DUMMY_VAR__);
        stan::math::assign(mu2,square(mu));
        current_statement_begin__ = 654;
        local_scalar_t__ z;
        (void) z;  // dummy to suppress unused var warning

        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z,DUMMY_VAR__);
        stan::math::assign(z,uniform_rng(0,1, base_rng__));
        current_statement_begin__ = 655;
        local_scalar_t__ y;
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);
        stan::math::assign(y,square(normal_rng(0,1, base_rng__)));
        current_statement_begin__ = 656;
        local_scalar_t__ x;
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::assign(x,(mu + (((mu2 * y) - (mu * stan::math::sqrt(((((4 * mu) * lambda) * y) + (mu2 * square(y)))))) / (2 * lambda))));


        current_statement_begin__ = 658;
        if (as_bool(logical_lte(z,(mu / (mu + x))))) {
            current_statement_begin__ = 658;
            return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        } else {
            current_statement_begin__ = 659;
            return stan::math::promote_scalar<fun_return_scalar_t__>((mu2 / x));
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_gaussian_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mu,
                     const T1__& lambda, RNG& base_rng__, std::ostream* pstream__) const {
        return inv_gaussian_rng(mu, lambda, base_rng__, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_beta(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 670;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 670;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 671;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 672;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 673;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(0.5,divide(stan::math::atan(eta),stan::math::pi())));
        } else if (as_bool(logical_eq(link,5))) {
            current_statement_begin__ = 674;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,6))) {
            current_statement_begin__ = 675;
            return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(1,inv_cloglog(minus(eta))));
        } else {
            current_statement_begin__ = 676;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 677;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_beta_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) const {
        return linkinv_beta(eta, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_beta_z(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                   const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 688;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 688;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 689;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 690;
            return stan::math::promote_scalar<fun_return_scalar_t__>(square(eta));
        } else {
            current_statement_begin__ = 691;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 692;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_beta_z_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                   const int& link, std::ostream* pstream__) const {
        return linkinv_beta_z(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_beta(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const T2__& dispersion,
            const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 705;
        validate_non_negative_index("ll", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);
        current_statement_begin__ = 706;
        validate_non_negative_index("mu", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::assign(mu,linkinv_beta(eta,link, pstream__));


        current_statement_begin__ = 707;
        for (int n = 1; n <= rows(y); ++n) {

            current_statement_begin__ = 708;
            stan::model::assign(ll, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        beta_log(get_base1(y,n,"y",1),(get_base1(mu,n,"mu",1) * dispersion),((1 - get_base1(mu,n,"mu",1)) * dispersion)), 
                        "assigning variable ll");
        }
        current_statement_begin__ = 710;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_beta_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const T2__& dispersion,
            const int& link, std::ostream* pstream__) const {
        return pw_beta(y, eta, dispersion, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_beta_z(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_z,
              const int& link,
              const int& link_phi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 724;
        validate_non_negative_index("ll", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);
        current_statement_begin__ = 725;
        validate_non_negative_index("mu", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::assign(mu,linkinv_beta(eta,link, pstream__));
        current_statement_begin__ = 726;
        validate_non_negative_index("mu_z", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu_z(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) mu_z;  // dummy to suppress unused var warning

        stan::math::initialize(mu_z, DUMMY_VAR__);
        stan::math::fill(mu_z,DUMMY_VAR__);
        stan::math::assign(mu_z,linkinv_beta_z(eta_z,link_phi, pstream__));


        current_statement_begin__ = 727;
        for (int n = 1; n <= rows(y); ++n) {

            current_statement_begin__ = 728;
            stan::model::assign(ll, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        beta_log(get_base1(y,n,"y",1),(get_base1(mu,n,"mu",1) * get_base1(mu_z,n,"mu_z",1)),((1 - get_base1(mu,n,"mu",1)) * get_base1(mu_z,n,"mu_z",1))), 
                        "assigning variable ll");
        }
        current_statement_begin__ = 730;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_beta_z_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_z,
              const int& link,
              const int& link_phi, std::ostream* pstream__) const {
        return pw_beta_z(y, eta, eta_z, link, link_phi, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_count(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 741;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 741;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 742;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 743;
            return stan::math::promote_scalar<fun_return_scalar_t__>(square(eta));
        } else {
            current_statement_begin__ = 744;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 745;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_count_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_count(eta, link, pstream__);
    }
};

template <typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
pw_pois(const std::vector<int>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 757;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 758;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 759;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 760;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 760;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            poisson_log_log(get_base1(y,n,"y",1),get_base1(eta,n,"eta",1)), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_lte(link,3))) {
            {
            current_statement_begin__ = 762;
            validate_non_negative_index("phi", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phi(static_cast<Eigen::VectorXd::Index>(N));
            (void) phi;  // dummy to suppress unused var warning

            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi,DUMMY_VAR__);
            stan::math::assign(phi,linkinv_count(eta,link, pstream__));


            current_statement_begin__ = 763;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 763;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            poisson_log(get_base1(y,n,"y",1),get_base1(phi,n,"phi",1)), 
                            "assigning variable ll");
            }
            }
        } else {
            current_statement_begin__ = 765;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 766;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_pois_functor__ {
    template <typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) const {
        return pw_pois(y, eta, link, pstream__);
    }
};

template <typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
pw_nb(const std::vector<int>& y,
          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
          const T2__& theta,
          const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 779;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 780;
        validate_non_negative_index("rho", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rho(static_cast<Eigen::VectorXd::Index>(N));
        (void) rho;  // dummy to suppress unused var warning

        stan::math::initialize(rho, DUMMY_VAR__);
        stan::math::fill(rho,DUMMY_VAR__);
        stan::math::assign(rho,linkinv_count(eta,link, pstream__));
        current_statement_begin__ = 781;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 782;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 782;
            stan::model::assign(ll, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        neg_binomial_2_log(get_base1(y,n,"y",1),get_base1(rho,n,"rho",1),theta), 
                        "assigning variable ll");
        }
        current_statement_begin__ = 783;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_nb_functor__ {
    template <typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
          const T2__& theta,
          const int& link, std::ostream* pstream__) const {
        return pw_nb(y, eta, theta, link, pstream__);
    }
};

int
get_nvars_for_hs(const int& prior_dist, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 792;
        int hs(0);
        (void) hs;  // dummy to suppress unused var warning

        stan::math::fill(hs, std::numeric_limits<int>::min());
        stan::math::assign(hs,0);


        current_statement_begin__ = 793;
        if (as_bool(logical_eq(prior_dist,3))) {
            current_statement_begin__ = 793;
            stan::math::assign(hs, 2);
        } else if (as_bool(logical_eq(prior_dist,4))) {
            current_statement_begin__ = 794;
            stan::math::assign(hs, 4);
        }
        current_statement_begin__ = 795;
        return stan::math::promote_scalar<fun_return_scalar_t__>(hs);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_nvars_for_hs_functor__ {
            int
    operator()(const int& prior_dist, std::ostream* pstream__) const {
        return get_nvars_for_hs(prior_dist, pstream__);
    }
};

double
lb(const int& intercept_type, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 806;
        local_scalar_t__ lb;
        (void) lb;  // dummy to suppress unused var warning

        stan::math::initialize(lb, DUMMY_VAR__);
        stan::math::fill(lb,DUMMY_VAR__);


        current_statement_begin__ = 807;
        if (as_bool(logical_eq(intercept_type,2))) {
            current_statement_begin__ = 807;
            stan::math::assign(lb, 0);
        } else {
            current_statement_begin__ = 808;
            stan::math::assign(lb, stan::math::negative_infinity());
        }
        current_statement_begin__ = 809;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lb);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lb_functor__ {
            double
    operator()(const int& intercept_type, std::ostream* pstream__) const {
        return lb(intercept_type, pstream__);
    }
};

double
ub(const int& intercept_type, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 812;
        local_scalar_t__ ub;
        (void) ub;  // dummy to suppress unused var warning

        stan::math::initialize(ub, DUMMY_VAR__);
        stan::math::fill(ub,DUMMY_VAR__);


        current_statement_begin__ = 813;
        if (as_bool(logical_eq(intercept_type,3))) {
            current_statement_begin__ = 813;
            stan::math::assign(ub, 0);
        } else {
            current_statement_begin__ = 814;
            stan::math::assign(ub, stan::math::positive_infinity());
        }
        current_statement_begin__ = 815;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ub);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ub_functor__ {
            double
    operator()(const int& intercept_type, std::ostream* pstream__) const {
        return ub(intercept_type, pstream__);
    }
};

std::vector<int>
lower_tri_indices(const int& dim, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 825;
        validate_non_negative_index("indices", "(dim + choose(dim,2))", (dim + choose(dim,2)));
        vector<int> indices((dim + choose(dim,2)), 0);
        stan::math::fill(indices, std::numeric_limits<int>::min());
        current_statement_begin__ = 826;
        int mark(0);
        (void) mark;  // dummy to suppress unused var warning

        stan::math::fill(mark, std::numeric_limits<int>::min());
        stan::math::assign(mark,1);


        current_statement_begin__ = 827;
        for (int r = 1; r <= dim; ++r) {

            current_statement_begin__ = 828;
            for (int c = r; c <= dim; ++c) {

                current_statement_begin__ = 829;
                stan::model::assign(indices, 
                            stan::model::cons_list(stan::model::index_uni(mark), stan::model::nil_index_list()), 
                            (((r - 1) * dim) + c), 
                            "assigning variable indices");
                current_statement_begin__ = 830;
                stan::math::assign(mark, (mark + 1));
            }
        }
        current_statement_begin__ = 833;
        return stan::math::promote_scalar<fun_return_scalar_t__>(indices);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lower_tri_indices_functor__ {
            std::vector<int>
    operator()(const int& dim, std::ostream* pstream__) const {
        return lower_tri_indices(dim, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T2__, T3__>::type
make_aux(const T0__& aux_unscaled,
             const int& prior_dist,
             const T2__& prior_mean,
             const T3__& prior_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 847;
        local_scalar_t__ aux;
        (void) aux;  // dummy to suppress unused var warning

        stan::math::initialize(aux, DUMMY_VAR__);
        stan::math::fill(aux,DUMMY_VAR__);


        current_statement_begin__ = 848;
        if (as_bool(logical_eq(prior_dist,0))) {
            current_statement_begin__ = 849;
            stan::math::assign(aux, aux_unscaled);
        } else {

            current_statement_begin__ = 851;
            stan::math::assign(aux, (prior_scale * aux_unscaled));
            current_statement_begin__ = 852;
            if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 853;
                stan::math::assign(aux, (aux + prior_mean));
            }
        }
        current_statement_begin__ = 855;
        return stan::math::promote_scalar<fun_return_scalar_t__>(aux);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_aux_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T2__, T3__>::type
    operator()(const T0__& aux_unscaled,
             const int& prior_dist,
             const T2__& prior_mean,
             const T3__& prior_scale, std::ostream* pstream__) const {
        return make_aux(aux_unscaled, prior_dist, prior_mean, prior_scale, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T12__, typename T13__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T12__, T13__>::type>::type>::type, Eigen::Dynamic,1>
make_beta(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
              const int& prior_dist,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_mean,
              const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_scale,
              const Eigen::Matrix<T4__, Eigen::Dynamic,1>& prior_df,
              const T5__& global_prior_scale,
              const std::vector<T6__>& global,
              const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& local,
              const std::vector<T8__>& ool,
              const std::vector<Eigen::Matrix<T9__, Eigen::Dynamic,1> >& mix,
              const std::vector<T10__>& aux,
              const int& family,
              const T12__& slab_scale,
              const std::vector<T13__>& caux, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T12__, T13__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 871;
        validate_non_negative_index("beta", "rows(z_beta)", rows(z_beta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(rows(z_beta)));
        (void) beta;  // dummy to suppress unused var warning

        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta,DUMMY_VAR__);


        current_statement_begin__ = 872;
        if (as_bool(logical_eq(prior_dist,0))) {
            current_statement_begin__ = 872;
            stan::math::assign(beta, z_beta);
        } else if (as_bool(logical_eq(prior_dist,1))) {
            current_statement_begin__ = 873;
            stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
        } else if (as_bool(logical_eq(prior_dist,2))) {
            current_statement_begin__ = 874;
            for (int k = 1; k <= rows(prior_mean); ++k) {

                current_statement_begin__ = 875;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            ((CFt(get_base1(z_beta,k,"z_beta",1),get_base1(prior_df,k,"prior_df",1), pstream__) * get_base1(prior_scale,k,"prior_scale",1)) + get_base1(prior_mean,k,"prior_mean",1)), 
                            "assigning variable beta");
            }
        } else if (as_bool(logical_eq(prior_dist,3))) {
            {
            current_statement_begin__ = 878;
            local_scalar_t__ c2;
            (void) c2;  // dummy to suppress unused var warning

            stan::math::initialize(c2, DUMMY_VAR__);
            stan::math::fill(c2,DUMMY_VAR__);
            stan::math::assign(c2,(square(slab_scale) * get_base1(caux,1,"caux",1)));


            current_statement_begin__ = 879;
            if (as_bool(logical_eq(family,1))) {
                current_statement_begin__ = 880;
                stan::math::assign(beta, hs_prior(z_beta,global,local,global_prior_scale,get_base1(aux,1,"aux",1),c2, pstream__));
            } else {
                current_statement_begin__ = 882;
                stan::math::assign(beta, hs_prior(z_beta,global,local,global_prior_scale,1,c2, pstream__));
            }
            }
        } else if (as_bool(logical_eq(prior_dist,4))) {
            {
            current_statement_begin__ = 885;
            local_scalar_t__ c2;
            (void) c2;  // dummy to suppress unused var warning

            stan::math::initialize(c2, DUMMY_VAR__);
            stan::math::fill(c2,DUMMY_VAR__);
            stan::math::assign(c2,(square(slab_scale) * get_base1(caux,1,"caux",1)));


            current_statement_begin__ = 886;
            if (as_bool(logical_eq(family,1))) {
                current_statement_begin__ = 887;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local,global_prior_scale,get_base1(aux,1,"aux",1),c2, pstream__));
            } else {
                current_statement_begin__ = 889;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local,global_prior_scale,1,c2, pstream__));
            }
            }
        } else if (as_bool(logical_eq(prior_dist,5))) {
            current_statement_begin__ = 892;
            stan::math::assign(beta, add(prior_mean,elt_multiply(elt_multiply(prior_scale,stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_beta)));
        } else if (as_bool(logical_eq(prior_dist,6))) {
            current_statement_begin__ = 894;
            stan::math::assign(beta, add(prior_mean,elt_multiply(elt_multiply(multiply(get_base1(ool,1,"ool",1),prior_scale),stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_beta)));
        }
        current_statement_begin__ = 895;
        return stan::math::promote_scalar<fun_return_scalar_t__>(beta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_beta_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T12__, typename T13__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T12__, T13__>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
              const int& prior_dist,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_mean,
              const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_scale,
              const Eigen::Matrix<T4__, Eigen::Dynamic,1>& prior_df,
              const T5__& global_prior_scale,
              const std::vector<T6__>& global,
              const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& local,
              const std::vector<T8__>& ool,
              const std::vector<Eigen::Matrix<T9__, Eigen::Dynamic,1> >& mix,
              const std::vector<T10__>& aux,
              const int& family,
              const T12__& slab_scale,
              const std::vector<T13__>& caux, std::ostream* pstream__) const {
        return make_beta(z_beta, prior_dist, prior_mean, prior_scale, prior_df, global_prior_scale, global, local, ool, mix, aux, family, slab_scale, caux, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
make_b_matrix(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
                  const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
                  const std::vector<int>& p,
                  const std::vector<int>& l,
                  const int& i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 912;
        validate_non_negative_index("b_matrix", "get_base1(p,i,\"p\",1)", get_base1(p,i,"p",1));
        validate_non_negative_index("b_matrix", "get_base1(l,i,\"l\",1)", get_base1(l,i,"l",1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  b_matrix(static_cast<Eigen::VectorXd::Index>(get_base1(p,i,"p",1)),static_cast<Eigen::VectorXd::Index>(get_base1(l,i,"l",1)));
        (void) b_matrix;  // dummy to suppress unused var warning

        stan::math::initialize(b_matrix, DUMMY_VAR__);
        stan::math::fill(b_matrix,DUMMY_VAR__);
        current_statement_begin__ = 913;
        int nc(0);
        (void) nc;  // dummy to suppress unused var warning

        stan::math::fill(nc, std::numeric_limits<int>::min());
        stan::math::assign(nc,get_base1(p,i,"p",1));
        current_statement_begin__ = 914;
        int b_mark(0);
        (void) b_mark;  // dummy to suppress unused var warning

        stan::math::fill(b_mark, std::numeric_limits<int>::min());
        stan::math::assign(b_mark,1);
        current_statement_begin__ = 915;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning

        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);


        current_statement_begin__ = 916;
        if (as_bool(logical_gt(i,1))) {

            current_statement_begin__ = 917;
            for (int j = 1; j <= (i - 1); ++j) {

                current_statement_begin__ = 918;
                stan::math::assign(theta_L_mark, (theta_L_mark + (get_base1(p,j,"p",1) + choose(get_base1(p,j,"p",1),2))));
                current_statement_begin__ = 919;
                stan::math::assign(b_mark, (b_mark + (get_base1(p,j,"p",1) * get_base1(l,j,"l",1))));
            }
        }
        current_statement_begin__ = 922;
        if (as_bool(logical_eq(nc,1))) {
            {
            current_statement_begin__ = 923;
            local_scalar_t__ theta_L_start;
            (void) theta_L_start;  // dummy to suppress unused var warning

            stan::math::initialize(theta_L_start, DUMMY_VAR__);
            stan::math::fill(theta_L_start,DUMMY_VAR__);
            stan::math::assign(theta_L_start,get_base1(theta_L,theta_L_mark,"theta_L",1));


            current_statement_begin__ = 924;
            for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                current_statement_begin__ = 925;
                stan::model::assign(b_matrix, 
                            stan::model::cons_list(stan::model::index_uni(nc), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), 
                            (theta_L_start * get_base1(z_b,s,"z_b",1)), 
                            "assigning variable b_matrix");
            }
            }
        } else {
            {
            current_statement_begin__ = 928;
            validate_non_negative_index("T_i", "nc", nc);
            validate_non_negative_index("T_i", "nc", nc);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
            (void) T_i;  // dummy to suppress unused var warning

            stan::math::initialize(T_i, DUMMY_VAR__);
            stan::math::fill(T_i,DUMMY_VAR__);
            stan::math::assign(T_i,rep_matrix(0,nc,nc));


            current_statement_begin__ = 929;
            for (int c = 1; c <= nc; ++c) {

                current_statement_begin__ = 930;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                            get_base1(theta_L,theta_L_mark,"theta_L",1), 
                            "assigning variable T_i");
                current_statement_begin__ = 931;
                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                current_statement_begin__ = 932;
                for (int r = (c + 1); r <= nc; ++r) {

                    current_statement_begin__ = 933;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                get_base1(theta_L,theta_L_mark,"theta_L",1), 
                                "assigning variable T_i");
                    current_statement_begin__ = 934;
                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                }
            }
            current_statement_begin__ = 937;
            for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                {
                current_statement_begin__ = 938;
                validate_non_negative_index("temp", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  temp(static_cast<Eigen::VectorXd::Index>(nc));
                (void) temp;  // dummy to suppress unused var warning

                stan::math::initialize(temp, DUMMY_VAR__);
                stan::math::fill(temp,DUMMY_VAR__);
                stan::math::assign(temp,multiply(T_i,segment(z_b,b_mark,nc)));


                current_statement_begin__ = 939;
                stan::model::assign(b_matrix, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            temp, 
                            "assigning variable b_matrix");
                current_statement_begin__ = 940;
                stan::math::assign(b_mark, (b_mark + nc));
                }
            }
            }
        }
        current_statement_begin__ = 943;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(b_matrix));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
                  const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
                  const std::vector<int>& p,
                  const std::vector<int>& l,
                  const int& i, std::ostream* pstream__) const {
        return make_b_matrix(z_b, theta_L, p, l, i, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T5__, typename T6__, typename T7__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__>::type>::type, Eigen::Dynamic,1>
evaluate_eta(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X,
                 const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic,1> >& Z1,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& Z2,
                 const std::vector<int>& Z1_id,
                 const std::vector<int>& Z2_id,
                 const std::vector<T5__>& gamma,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& beta,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,Eigen::Dynamic>& b1Mat,
                 const Eigen::Matrix<T8__, Eigen::Dynamic,Eigen::Dynamic>& b2Mat,
                 const int& b1Mat_colshift,
                 const int& b2Mat_colshift,
                 const int& intercept_type, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 968;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(X));
        current_statement_begin__ = 969;
        int K(0);
        (void) K;  // dummy to suppress unused var warning

        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(beta));
        current_statement_begin__ = 970;
        int p1(0);
        (void) p1;  // dummy to suppress unused var warning

        stan::math::fill(p1, std::numeric_limits<int>::min());
        stan::math::assign(p1,size(Z1));
        current_statement_begin__ = 971;
        int p2(0);
        (void) p2;  // dummy to suppress unused var warning

        stan::math::fill(p2, std::numeric_limits<int>::min());
        stan::math::assign(p2,size(Z2));
        current_statement_begin__ = 972;
        validate_non_negative_index("eta", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) eta;  // dummy to suppress unused var warning

        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);


        current_statement_begin__ = 974;
        if (as_bool(logical_gt(K,0))) {
            current_statement_begin__ = 974;
            stan::math::assign(eta, multiply(X,beta));
        } else {
            current_statement_begin__ = 975;
            stan::math::assign(eta, rep_vector(0.0,N));
        }
        current_statement_begin__ = 977;
        if (as_bool(logical_gt(intercept_type,0))) {

            current_statement_begin__ = 978;
            if (as_bool(logical_eq(intercept_type,1))) {
                current_statement_begin__ = 978;
                stan::math::assign(eta, add(eta, get_base1(gamma,1,"gamma",1)));
            } else if (as_bool(logical_eq(intercept_type,2))) {
                current_statement_begin__ = 979;
                stan::math::assign(eta, add(eta, (get_base1(gamma,1,"gamma",1) - max(eta))));
            } else if (as_bool(logical_eq(intercept_type,3))) {
                current_statement_begin__ = 980;
                stan::math::assign(eta, add(eta, (get_base1(gamma,1,"gamma",1) - min(eta))));
            }
        }
        current_statement_begin__ = 983;
        if (as_bool(logical_gt(p1,0))) {

            current_statement_begin__ = 984;
            for (int k = 1; k <= p1; ++k) {
                current_statement_begin__ = 985;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 986;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "eta") + (get_base1(b1Mat,get_base1(Z1_id,n,"Z1_id",1),(k + b1Mat_colshift),"b1Mat",1) * get_base1(get_base1(Z1,k,"Z1",1),n,"Z1",2))), 
                                "assigning variable eta");
                }
            }
        }
        current_statement_begin__ = 988;
        if (as_bool(logical_gt(p2,0))) {

            current_statement_begin__ = 989;
            for (int k = 1; k <= p2; ++k) {
                current_statement_begin__ = 990;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 991;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "eta") + (get_base1(b2Mat,get_base1(Z2_id,n,"Z2_id",1),(k + b2Mat_colshift),"b2Mat",1) * get_base1(get_base1(Z2,k,"Z2",1),n,"Z2",2))), 
                                "assigning variable eta");
                }
            }
        }
        current_statement_begin__ = 994;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct evaluate_eta_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T5__, typename T6__, typename T7__, typename T8__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X,
                 const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic,1> >& Z1,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& Z2,
                 const std::vector<int>& Z1_id,
                 const std::vector<int>& Z2_id,
                 const std::vector<T5__>& gamma,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& beta,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,Eigen::Dynamic>& b1Mat,
                 const Eigen::Matrix<T8__, Eigen::Dynamic,Eigen::Dynamic>& b2Mat,
                 const int& b1Mat_colshift,
                 const int& b2Mat_colshift,
                 const int& intercept_type, std::ostream* pstream__) const {
        return evaluate_eta(X, Z1, Z2, Z1_id, Z2_id, gamma, beta, b1Mat, b2Mat, b1Mat_colshift, b2Mat_colshift, intercept_type, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
evaluate_mu(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                const int& family,
                const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1006;
        validate_non_negative_index("mu", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);


        current_statement_begin__ = 1007;
        if (as_bool(logical_eq(family,1))) {
            current_statement_begin__ = 1008;
            stan::math::assign(mu, linkinv_gauss(eta,link, pstream__));
        } else if (as_bool(logical_eq(family,2))) {
            current_statement_begin__ = 1010;
            stan::math::assign(mu, linkinv_gamma(eta,link, pstream__));
        } else if (as_bool(logical_eq(family,3))) {
            current_statement_begin__ = 1012;
            stan::math::assign(mu, linkinv_inv_gaussian(eta,link, pstream__));
        } else if (as_bool(logical_eq(family,4))) {
            current_statement_begin__ = 1014;
            stan::math::assign(mu, linkinv_bern(eta,link, pstream__));
        } else if (as_bool(logical_eq(family,5))) {
            current_statement_begin__ = 1016;
            stan::math::assign(mu, linkinv_binom(eta,link, pstream__));
        } else if (as_bool((primitive_value((primitive_value(logical_eq(family,6)) || primitive_value(logical_eq(family,7)))) || primitive_value(logical_eq(family,8))))) {
            current_statement_begin__ = 1018;
            stan::math::assign(mu, linkinv_count(eta,link, pstream__));
        }
        current_statement_begin__ = 1019;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct evaluate_mu_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                const int& family,
                const int& link, std::ostream* pstream__) const {
        return evaluate_mu(eta, family, link, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T6__, typename T7__, typename T8__, typename T_lp__, typename T_lp_accum__>
void
glm_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y_real,
           const std::vector<int>& y_integer,
           const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
           const std::vector<T3__>& aux,
           const int& family,
           const int& link,
           const T6__& sum_log_y,
           const Eigen::Matrix<T7__, Eigen::Dynamic,1>& sqrt_y,
           const Eigen::Matrix<T8__, Eigen::Dynamic,1>& log_y, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1033;
        if (as_bool(logical_eq(family,1))) {

            current_statement_begin__ = 1034;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 1034;
                lp_accum__.add(normal_log(y_real,eta,get_base1(aux,1,"aux",1)));
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 1035;
                lp_accum__.add(lognormal_log(y_real,eta,get_base1(aux,1,"aux",1)));
            } else {
                current_statement_begin__ = 1036;
                lp_accum__.add(normal_log(y_real,inv(eta),get_base1(aux,1,"aux",1)));
            }
        } else if (as_bool(logical_eq(family,2))) {

            current_statement_begin__ = 1039;
            lp_accum__.add(GammaReg(y_real,eta,get_base1(aux,1,"aux",1),link,sum_log_y, pstream__));
        } else if (as_bool(logical_eq(family,3))) {

            current_statement_begin__ = 1042;
            lp_accum__.add(inv_gaussian(y_real,linkinv_inv_gaussian(eta,link, pstream__),get_base1(aux,1,"aux",1),sum_log_y,sqrt_y, pstream__));
        } else if (as_bool(logical_eq(family,4))) {

            current_statement_begin__ = 1046;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 1046;
                lp_accum__.add(bernoulli_logit_log(y_integer,eta));
            } else {
                current_statement_begin__ = 1047;
                lp_accum__.add(bernoulli_log(y_integer,linkinv_bern(eta,link, pstream__)));
            }
        } else if (as_bool(logical_eq(family,5))) {

            current_statement_begin__ = 1050;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Binomial with >1 trials not allowed.";
            throw std::domain_error(errmsg_stream__.str());
        } else if (as_bool((primitive_value(logical_eq(family,6)) || primitive_value(logical_eq(family,8))))) {

            current_statement_begin__ = 1053;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 1053;
                lp_accum__.add(poisson_log_log(y_integer,eta));
            } else {
                current_statement_begin__ = 1054;
                lp_accum__.add(poisson_log(y_integer,linkinv_count(eta,link, pstream__)));
            }
        } else if (as_bool(logical_eq(family,7))) {

            current_statement_begin__ = 1057;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 1057;
                lp_accum__.add(neg_binomial_2_log_log(y_integer,eta,get_base1(aux,1,"aux",1)));
            } else {
                current_statement_begin__ = 1058;
                lp_accum__.add(neg_binomial_2_log(y_integer,linkinv_count(eta,link, pstream__),get_base1(aux,1,"aux",1)));
            }
        } else {
            current_statement_begin__ = 1060;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid family.";
            throw std::domain_error(errmsg_stream__.str());
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct glm_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T6__, typename T7__, typename T8__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y_real,
           const std::vector<int>& y_integer,
           const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
           const std::vector<T3__>& aux,
           const int& family,
           const int& link,
           const T6__& sum_log_y,
           const Eigen::Matrix<T7__, Eigen::Dynamic,1>& sqrt_y,
           const Eigen::Matrix<T8__, Eigen::Dynamic,1>& log_y, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return glm_lp(y_real, y_integer, eta, aux, family, link, sum_log_y, sqrt_y, log_y, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T_lp__, typename T_lp_accum__>
void
beta_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
            const int& prior_dist,
            const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_scale,
            const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_df,
            const T4__& global_prior_df,
            const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic,1> >& local,
            const std::vector<T6__>& global,
            const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& mix,
            const std::vector<T8__>& one_over_lambda,
            const T9__& slab_df,
            const std::vector<T10__>& caux, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T_lp__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1081;
        if (as_bool(logical_eq(prior_dist,1))) {
            current_statement_begin__ = 1081;
            lp_accum__.add(normal_log(z_beta,0,1));
        } else if (as_bool(logical_eq(prior_dist,2))) {
            current_statement_begin__ = 1082;
            lp_accum__.add(normal_log(z_beta,0,1));
        } else if (as_bool(logical_eq(prior_dist,3))) {

            current_statement_begin__ = 1084;
            lp_accum__.add(normal_log(z_beta,0,1));
            current_statement_begin__ = 1085;
            lp_accum__.add(normal_log(get_base1(local,1,"local",1),0,1));
            current_statement_begin__ = 1086;
            lp_accum__.add(inv_gamma_log(get_base1(local,2,"local",1),multiply(0.5,prior_df),multiply(0.5,prior_df)));
            current_statement_begin__ = 1087;
            lp_accum__.add(normal_log(get_base1(global,1,"global",1),0,1));
            current_statement_begin__ = 1088;
            lp_accum__.add(inv_gamma_log(get_base1(global,2,"global",1),(0.5 * global_prior_df),(0.5 * global_prior_df)));
            current_statement_begin__ = 1089;
            lp_accum__.add(inv_gamma_log(caux,(0.5 * slab_df),(0.5 * slab_df)));
        } else if (as_bool(logical_eq(prior_dist,4))) {

            current_statement_begin__ = 1092;
            lp_accum__.add(normal_log(z_beta,0,1));
            current_statement_begin__ = 1093;
            lp_accum__.add(normal_log(get_base1(local,1,"local",1),0,1));
            current_statement_begin__ = 1094;
            lp_accum__.add(inv_gamma_log(get_base1(local,2,"local",1),multiply(0.5,prior_df),multiply(0.5,prior_df)));
            current_statement_begin__ = 1095;
            lp_accum__.add(normal_log(get_base1(local,3,"local",1),0,1));
            current_statement_begin__ = 1097;
            lp_accum__.add(inv_gamma_log(get_base1(local,4,"local",1),multiply(0.5,prior_scale),multiply(0.5,prior_scale)));
            current_statement_begin__ = 1098;
            lp_accum__.add(normal_log(get_base1(global,1,"global",1),0,1));
            current_statement_begin__ = 1099;
            lp_accum__.add(inv_gamma_log(get_base1(global,2,"global",1),(0.5 * global_prior_df),(0.5 * global_prior_df)));
            current_statement_begin__ = 1100;
            lp_accum__.add(inv_gamma_log(caux,(0.5 * slab_df),(0.5 * slab_df)));
        } else if (as_bool(logical_eq(prior_dist,5))) {

            current_statement_begin__ = 1103;
            lp_accum__.add(normal_log(z_beta,0,1));
            current_statement_begin__ = 1104;
            lp_accum__.add(exponential_log(get_base1(mix,1,"mix",1),1));
        } else if (as_bool(logical_eq(prior_dist,6))) {

            current_statement_begin__ = 1107;
            lp_accum__.add(normal_log(z_beta,0,1));
            current_statement_begin__ = 1108;
            lp_accum__.add(exponential_log(get_base1(mix,1,"mix",1),1));
            current_statement_begin__ = 1109;
            lp_accum__.add(chi_square_log(get_base1(one_over_lambda,1,"one_over_lambda",1),get_base1(prior_df,1,"prior_df",1)));
        } else if (as_bool(logical_eq(prior_dist,7))) {

            current_statement_begin__ = 1112;
            lp_accum__.add(normal_log(z_beta,0,1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct beta_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
            const int& prior_dist,
            const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_scale,
            const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_df,
            const T4__& global_prior_df,
            const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic,1> >& local,
            const std::vector<T6__>& global,
            const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& mix,
            const std::vector<T8__>& one_over_lambda,
            const T9__& slab_df,
            const std::vector<T10__>& caux, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return beta_lp(z_beta, prior_dist, prior_scale, prior_df, global_prior_df, local, global, mix, one_over_lambda, slab_df, caux, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
void
gamma_lp(const T0__& gamma,
             const int& dist,
             const T2__& mean,
             const T3__& scale,
             const T4__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1128;
        if (as_bool(logical_eq(dist,1))) {
            current_statement_begin__ = 1129;
            lp_accum__.add(normal_log(gamma,mean,scale));
        } else if (as_bool(logical_eq(dist,2))) {
            current_statement_begin__ = 1131;
            lp_accum__.add(student_t_log(gamma,df,mean,scale));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gamma_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const T0__& gamma,
             const int& dist,
             const T2__& mean,
             const T3__& scale,
             const T4__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return gamma_lp(gamma, dist, mean, scale, df, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
void
aux_lp(const T0__& aux_unscaled,
           const int& dist,
           const T2__& scale,
           const T3__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1146;
        if (as_bool((primitive_value(logical_gt(dist,0)) && primitive_value(logical_gt(scale,0))))) {

            current_statement_begin__ = 1147;
            if (as_bool(logical_eq(dist,1))) {
                current_statement_begin__ = 1148;
                lp_accum__.add(normal_log(aux_unscaled,0,1));
            } else if (as_bool(logical_eq(dist,2))) {
                current_statement_begin__ = 1150;
                lp_accum__.add(student_t_log(aux_unscaled,df,0,1));
            } else {
                current_statement_begin__ = 1152;
                lp_accum__.add(exponential_log(aux_unscaled,1));
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct aux_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const T0__& aux_unscaled,
           const int& dist,
           const T2__& scale,
           const T3__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return aux_lp(aux_unscaled, dist, scale, df, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T1__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__>::type
mean_PPD_rng(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& mu,
                 const std::vector<T1__>& aux,
                 const int& family, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1168;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(mu));
        current_statement_begin__ = 1169;
        local_scalar_t__ mean_PPD;
        (void) mean_PPD;  // dummy to suppress unused var warning

        stan::math::initialize(mean_PPD, DUMMY_VAR__);
        stan::math::fill(mean_PPD,DUMMY_VAR__);
        stan::math::assign(mean_PPD,0);


        current_statement_begin__ = 1170;
        if (as_bool(logical_eq(family,1))) {

            current_statement_begin__ = 1171;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1172;
                stan::math::assign(mean_PPD, (mean_PPD + normal_rng(get_base1(mu,n,"mu",1),get_base1(aux,1,"aux",1), base_rng__)));
            }
        } else if (as_bool(logical_eq(family,2))) {

            current_statement_begin__ = 1175;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1176;
                stan::math::assign(mean_PPD, (mean_PPD + gamma_rng(get_base1(aux,1,"aux",1),(get_base1(aux,1,"aux",1) / get_base1(mu,n,"mu",1)), base_rng__)));
            }
        } else if (as_bool(logical_eq(family,3))) {

            current_statement_begin__ = 1179;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1180;
                stan::math::assign(mean_PPD, (mean_PPD + inv_gaussian_rng(get_base1(mu,n,"mu",1),get_base1(aux,1,"aux",1), base_rng__, pstream__)));
            }
        } else if (as_bool(logical_eq(family,4))) {

            current_statement_begin__ = 1183;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1184;
                stan::math::assign(mean_PPD, (mean_PPD + bernoulli_rng(get_base1(mu,n,"mu",1), base_rng__)));
            }
        } else if (as_bool(logical_eq(family,5))) {

            current_statement_begin__ = 1187;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Binomial with >1 trials not allowed.";
            throw std::domain_error(errmsg_stream__.str());
        } else if (as_bool((primitive_value(logical_eq(family,6)) || primitive_value(logical_eq(family,8))))) {
            {
            current_statement_begin__ = 1190;
            local_scalar_t__ poisson_max;
            (void) poisson_max;  // dummy to suppress unused var warning

            stan::math::initialize(poisson_max, DUMMY_VAR__);
            stan::math::fill(poisson_max,DUMMY_VAR__);
            stan::math::assign(poisson_max,pow(2.0,30.0));


            current_statement_begin__ = 1191;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 1192;
                if (as_bool(logical_lt(get_base1(mu,n,"mu",1),poisson_max))) {
                    current_statement_begin__ = 1193;
                    stan::math::assign(mean_PPD, (mean_PPD + poisson_rng(get_base1(mu,n,"mu",1), base_rng__)));
                } else {
                    current_statement_begin__ = 1195;
                    stan::math::assign(mean_PPD, (mean_PPD + normal_rng(get_base1(mu,n,"mu",1),stan::math::sqrt(get_base1(mu,n,"mu",1)), base_rng__)));
                }
            }
            }
        } else if (as_bool(logical_eq(family,7))) {
            {
            current_statement_begin__ = 1199;
            local_scalar_t__ poisson_max;
            (void) poisson_max;  // dummy to suppress unused var warning

            stan::math::initialize(poisson_max, DUMMY_VAR__);
            stan::math::fill(poisson_max,DUMMY_VAR__);
            stan::math::assign(poisson_max,pow(2.0,30.0));


            current_statement_begin__ = 1200;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 1201;
                local_scalar_t__ gamma_temp;
                (void) gamma_temp;  // dummy to suppress unused var warning

                stan::math::initialize(gamma_temp, DUMMY_VAR__);
                stan::math::fill(gamma_temp,DUMMY_VAR__);


                current_statement_begin__ = 1202;
                if (as_bool(is_inf(get_base1(aux,1,"aux",1)))) {
                    current_statement_begin__ = 1203;
                    stan::math::assign(gamma_temp, get_base1(mu,n,"mu",1));
                } else {
                    current_statement_begin__ = 1205;
                    stan::math::assign(gamma_temp, gamma_rng(get_base1(aux,1,"aux",1),(get_base1(aux,1,"aux",1) / get_base1(mu,n,"mu",1)), base_rng__));
                }
                current_statement_begin__ = 1206;
                if (as_bool(logical_lt(gamma_temp,poisson_max))) {
                    current_statement_begin__ = 1207;
                    stan::math::assign(mean_PPD, (mean_PPD + poisson_rng(gamma_temp, base_rng__)));
                } else {
                    current_statement_begin__ = 1209;
                    stan::math::assign(mean_PPD, (mean_PPD + normal_rng(gamma_temp,stan::math::sqrt(gamma_temp), base_rng__)));
                }
                }
            }
            }
        }
        current_statement_begin__ = 1212;
        return stan::math::promote_scalar<fun_return_scalar_t__>((mean_PPD / N));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mean_PPD_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& mu,
                 const std::vector<T1__>& aux,
                 const int& family, RNG& base_rng__, std::ostream* pstream__) const {
        return mean_PPD_rng(mu, aux, family, base_rng__, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
exponential_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1221;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct exponential_log_haz_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) const {
        return exponential_log_haz(eta, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
exponentialAFT_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& af, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1231;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(af));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct exponentialAFT_log_haz_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& af, std::ostream* pstream__) const {
        return exponentialAFT_log_haz(af, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
weibull_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                    const T2__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1243;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 1244;
        stan::math::assign(res, add(add(stan::math::log(shape),multiply((shape - 1),stan::math::log(t))),eta));
        current_statement_begin__ = 1245;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weibull_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                    const T2__& shape, std::ostream* pstream__) const {
        return weibull_log_haz(eta, t, shape, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
weibullAFT_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& af,
                       const Eigen::Matrix<T1__, Eigen::Dynamic,1>& caf,
                       const T2__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1257;
        validate_non_negative_index("res", "rows(af)", rows(af));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(af)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 1258;
        stan::math::assign(res, add(add(stan::math::log(shape),multiply((shape - 1),stan::math::log(caf))),stan::math::log(af)));
        current_statement_begin__ = 1259;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weibullAFT_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& af,
                       const Eigen::Matrix<T1__, Eigen::Dynamic,1>& caf,
                       const T2__& shape, std::ostream* pstream__) const {
        return weibullAFT_log_haz(af, caf, shape, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
gompertz_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                     const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1271;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 1272;
        stan::math::assign(res, add(multiply(scale,t),eta));
        current_statement_begin__ = 1273;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gompertz_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                     const T2__& scale, std::ostream* pstream__) const {
        return gompertz_log_haz(eta, t, scale, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
mspline_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1285;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 1286;
        stan::math::assign(res, add(stan::math::log(multiply(basis,coefs)),eta));
        current_statement_begin__ = 1287;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mspline_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) const {
        return mspline_log_haz(eta, basis, coefs, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
bspline_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1299;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 1300;
        stan::math::assign(res, add(multiply(basis,coefs),eta));
        current_statement_begin__ = 1301;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct bspline_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) const {
        return bspline_log_haz(eta, basis, coefs, pstream__);
    }
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
quadrature_log_surv(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1315;
        local_scalar_t__ res;
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 1316;
        stan::math::assign(res, -(dot_product(qwts,stan::math::exp(log_hazard))));
        current_statement_begin__ = 1317;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct quadrature_log_surv_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard, std::ostream* pstream__) const {
        return quadrature_log_surv(qwts, log_hazard, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
quadrature_log_cdf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                       const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard,
                       const int& qnodes,
                       const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1321;
        int M(0);
        (void) M;  // dummy to suppress unused var warning

        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,rows(log_hazard));
        current_statement_begin__ = 1322;
        validate_non_negative_index("hazard", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hazard(static_cast<Eigen::VectorXd::Index>(M));
        (void) hazard;  // dummy to suppress unused var warning

        stan::math::initialize(hazard, DUMMY_VAR__);
        stan::math::fill(hazard,DUMMY_VAR__);
        stan::math::assign(hazard,stan::math::exp(log_hazard));
        current_statement_begin__ = 1323;
        validate_non_negative_index("qwts_mat", "N", N);
        validate_non_negative_index("qwts_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  qwts_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) qwts_mat;  // dummy to suppress unused var warning

        stan::math::initialize(qwts_mat, DUMMY_VAR__);
        stan::math::fill(qwts_mat,DUMMY_VAR__);
        stan::math::assign(qwts_mat,to_matrix(qwts,N,qnodes));
        current_statement_begin__ = 1324;
        validate_non_negative_index("haz_mat", "N", N);
        validate_non_negative_index("haz_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  haz_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) haz_mat;  // dummy to suppress unused var warning

        stan::math::initialize(haz_mat, DUMMY_VAR__);
        stan::math::fill(haz_mat,DUMMY_VAR__);
        stan::math::assign(haz_mat,to_matrix(hazard,N,qnodes));
        current_statement_begin__ = 1325;
        validate_non_negative_index("chaz", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chaz(static_cast<Eigen::VectorXd::Index>(N));
        (void) chaz;  // dummy to suppress unused var warning

        stan::math::initialize(chaz, DUMMY_VAR__);
        stan::math::fill(chaz,DUMMY_VAR__);
        stan::math::assign(chaz,rows_dot_product(qwts_mat,haz_mat));
        current_statement_begin__ = 1326;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 1327;
        stan::math::assign(res, stan::math::log(subtract(1,stan::math::exp(minus(chaz)))));
        current_statement_begin__ = 1328;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct quadrature_log_cdf_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                       const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard,
                       const int& qnodes,
                       const int& N, std::ostream* pstream__) const {
        return quadrature_log_cdf(qwts, log_hazard, qnodes, N, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
quadrature_log_cdf2(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts_lower,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard_lower,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,1>& qwts_upper,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,1>& log_hazard_upper,
                        const int& qnodes,
                        const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1334;
        int M(0);
        (void) M;  // dummy to suppress unused var warning

        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,rows(log_hazard_lower));
        current_statement_begin__ = 1335;
        validate_non_negative_index("hazard_lower", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hazard_lower(static_cast<Eigen::VectorXd::Index>(M));
        (void) hazard_lower;  // dummy to suppress unused var warning

        stan::math::initialize(hazard_lower, DUMMY_VAR__);
        stan::math::fill(hazard_lower,DUMMY_VAR__);
        stan::math::assign(hazard_lower,stan::math::exp(log_hazard_lower));
        current_statement_begin__ = 1336;
        validate_non_negative_index("hazard_upper", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hazard_upper(static_cast<Eigen::VectorXd::Index>(M));
        (void) hazard_upper;  // dummy to suppress unused var warning

        stan::math::initialize(hazard_upper, DUMMY_VAR__);
        stan::math::fill(hazard_upper,DUMMY_VAR__);
        stan::math::assign(hazard_upper,stan::math::exp(log_hazard_upper));
        current_statement_begin__ = 1337;
        validate_non_negative_index("qwts_lower_mat", "N", N);
        validate_non_negative_index("qwts_lower_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  qwts_lower_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) qwts_lower_mat;  // dummy to suppress unused var warning

        stan::math::initialize(qwts_lower_mat, DUMMY_VAR__);
        stan::math::fill(qwts_lower_mat,DUMMY_VAR__);
        stan::math::assign(qwts_lower_mat,to_matrix(qwts_lower,N,qnodes));
        current_statement_begin__ = 1338;
        validate_non_negative_index("qwts_upper_mat", "N", N);
        validate_non_negative_index("qwts_upper_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  qwts_upper_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) qwts_upper_mat;  // dummy to suppress unused var warning

        stan::math::initialize(qwts_upper_mat, DUMMY_VAR__);
        stan::math::fill(qwts_upper_mat,DUMMY_VAR__);
        stan::math::assign(qwts_upper_mat,to_matrix(qwts_upper,N,qnodes));
        current_statement_begin__ = 1339;
        validate_non_negative_index("haz_lower_mat", "N", N);
        validate_non_negative_index("haz_lower_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  haz_lower_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) haz_lower_mat;  // dummy to suppress unused var warning

        stan::math::initialize(haz_lower_mat, DUMMY_VAR__);
        stan::math::fill(haz_lower_mat,DUMMY_VAR__);
        stan::math::assign(haz_lower_mat,to_matrix(hazard_lower,N,qnodes));
        current_statement_begin__ = 1340;
        validate_non_negative_index("haz_upper_mat", "N", N);
        validate_non_negative_index("haz_upper_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  haz_upper_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) haz_upper_mat;  // dummy to suppress unused var warning

        stan::math::initialize(haz_upper_mat, DUMMY_VAR__);
        stan::math::fill(haz_upper_mat,DUMMY_VAR__);
        stan::math::assign(haz_upper_mat,to_matrix(hazard_upper,N,qnodes));
        current_statement_begin__ = 1341;
        validate_non_negative_index("chaz_lower", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chaz_lower(static_cast<Eigen::VectorXd::Index>(N));
        (void) chaz_lower;  // dummy to suppress unused var warning

        stan::math::initialize(chaz_lower, DUMMY_VAR__);
        stan::math::fill(chaz_lower,DUMMY_VAR__);
        stan::math::assign(chaz_lower,rows_dot_product(qwts_lower_mat,haz_lower_mat));
        current_statement_begin__ = 1342;
        validate_non_negative_index("chaz_upper", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chaz_upper(static_cast<Eigen::VectorXd::Index>(N));
        (void) chaz_upper;  // dummy to suppress unused var warning

        stan::math::initialize(chaz_upper, DUMMY_VAR__);
        stan::math::fill(chaz_upper,DUMMY_VAR__);
        stan::math::assign(chaz_upper,rows_dot_product(qwts_upper_mat,haz_upper_mat));
        current_statement_begin__ = 1343;
        validate_non_negative_index("surv_lower", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_lower(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_lower;  // dummy to suppress unused var warning

        stan::math::initialize(surv_lower, DUMMY_VAR__);
        stan::math::fill(surv_lower,DUMMY_VAR__);
        stan::math::assign(surv_lower,stan::math::exp(minus(chaz_lower)));
        current_statement_begin__ = 1344;
        validate_non_negative_index("surv_upper", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_upper(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_upper;  // dummy to suppress unused var warning

        stan::math::initialize(surv_upper, DUMMY_VAR__);
        stan::math::fill(surv_upper,DUMMY_VAR__);
        stan::math::assign(surv_upper,stan::math::exp(minus(chaz_upper)));
        current_statement_begin__ = 1345;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 1346;
        stan::math::assign(res, stan::math::log(subtract(surv_lower,surv_upper)));
        current_statement_begin__ = 1347;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct quadrature_log_cdf2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts_lower,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard_lower,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,1>& qwts_upper,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,1>& log_hazard_upper,
                        const int& qnodes,
                        const int& N, std::ostream* pstream__) const {
        return quadrature_log_cdf2(qwts_lower, log_hazard_lower, qwts_upper, log_hazard_upper, qnodes, N, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
quadrature_aft(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                   const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                   const int& qnodes,
                   const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1362;
        int M(0);
        (void) M;  // dummy to suppress unused var warning

        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,rows(eta));
        current_statement_begin__ = 1363;
        validate_non_negative_index("af", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  af(static_cast<Eigen::VectorXd::Index>(M));
        (void) af;  // dummy to suppress unused var warning

        stan::math::initialize(af, DUMMY_VAR__);
        stan::math::fill(af,DUMMY_VAR__);
        stan::math::assign(af,stan::math::exp(minus(eta)));
        current_statement_begin__ = 1364;
        validate_non_negative_index("qwts_mat", "N", N);
        validate_non_negative_index("qwts_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  qwts_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) qwts_mat;  // dummy to suppress unused var warning

        stan::math::initialize(qwts_mat, DUMMY_VAR__);
        stan::math::fill(qwts_mat,DUMMY_VAR__);
        stan::math::assign(qwts_mat,to_matrix(qwts,N,qnodes));
        current_statement_begin__ = 1365;
        validate_non_negative_index("af_mat", "N", N);
        validate_non_negative_index("af_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  af_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) af_mat;  // dummy to suppress unused var warning

        stan::math::initialize(af_mat, DUMMY_VAR__);
        stan::math::fill(af_mat,DUMMY_VAR__);
        stan::math::assign(af_mat,to_matrix(af,N,qnodes));
        current_statement_begin__ = 1366;
        validate_non_negative_index("caf", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  caf(static_cast<Eigen::VectorXd::Index>(N));
        (void) caf;  // dummy to suppress unused var warning

        stan::math::initialize(caf, DUMMY_VAR__);
        stan::math::fill(caf,DUMMY_VAR__);
        stan::math::assign(caf,rows_dot_product(qwts_mat,af_mat));


        current_statement_begin__ = 1367;
        return stan::math::promote_scalar<fun_return_scalar_t__>(caf);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct quadrature_aft_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                   const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                   const int& qnodes,
                   const int& N, std::ostream* pstream__) const {
        return quadrature_aft(qwts, eta, qnodes, N, pstream__);
    }
};

double
coefs_lb(const int& type, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1376;
        local_scalar_t__ lbound;
        (void) lbound;  // dummy to suppress unused var warning

        stan::math::initialize(lbound, DUMMY_VAR__);
        stan::math::fill(lbound,DUMMY_VAR__);


        current_statement_begin__ = 1377;
        if (as_bool(logical_eq(type,2))) {
            current_statement_begin__ = 1378;
            stan::math::assign(lbound, stan::math::negative_infinity());
        } else if (as_bool(logical_eq(type,3))) {
            current_statement_begin__ = 1380;
            stan::math::assign(lbound, stan::math::negative_infinity());
        } else {
            current_statement_begin__ = 1382;
            stan::math::assign(lbound, 0);
        }
        current_statement_begin__ = 1383;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lbound);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct coefs_lb_functor__ {
            double
    operator()(const int& type, std::ostream* pstream__) const {
        return coefs_lb(type, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic,1>
make_basehaz_coef(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& aux_unscaled,
                      const int& prior_dist,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_mean,
                      const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1397;
        validate_non_negative_index("aux", "rows(aux_unscaled)", rows(aux_unscaled));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aux(static_cast<Eigen::VectorXd::Index>(rows(aux_unscaled)));
        (void) aux;  // dummy to suppress unused var warning

        stan::math::initialize(aux, DUMMY_VAR__);
        stan::math::fill(aux,DUMMY_VAR__);


        current_statement_begin__ = 1398;
        if (as_bool(logical_eq(prior_dist,0))) {
            current_statement_begin__ = 1399;
            stan::math::assign(aux, aux_unscaled);
        } else {

            current_statement_begin__ = 1401;
            stan::math::assign(aux, elt_multiply(prior_scale,aux_unscaled));
            current_statement_begin__ = 1402;
            if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 1403;
                stan::math::assign(aux, add(aux, prior_mean));
            }
        }
        current_statement_begin__ = 1405;
        return stan::math::promote_scalar<fun_return_scalar_t__>(aux);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_basehaz_coef_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& aux_unscaled,
                      const int& prior_dist,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_mean,
                      const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_scale, std::ostream* pstream__) const {
        return make_basehaz_coef(aux_unscaled, prior_dist, prior_mean, prior_scale, pstream__);
    }
};

template <typename T0__, typename T2__, typename T_lp__, typename T_lp_accum__>
void
basehaz_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& aux_unscaled,
               const int& dist,
               const Eigen::Matrix<T2__, Eigen::Dynamic,1>& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1418;
        if (as_bool(logical_gt(dist,0))) {

            current_statement_begin__ = 1419;
            if (as_bool(logical_eq(dist,1))) {
                current_statement_begin__ = 1420;
                lp_accum__.add(normal_log(aux_unscaled,0,1));
            } else if (as_bool(logical_eq(dist,2))) {
                current_statement_begin__ = 1422;
                lp_accum__.add(student_t_log(aux_unscaled,df,0,1));
            } else {
                current_statement_begin__ = 1424;
                lp_accum__.add(exponential_log(aux_unscaled,1));
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct basehaz_lp_functor__ {
    template <typename T0__, typename T2__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& aux_unscaled,
               const int& dist,
               const Eigen::Matrix<T2__, Eigen::Dynamic,1>& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return basehaz_lp(aux_unscaled, dist, df, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
collapse_within_groups(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                           const std::vector<std::vector<int> >& grp_idx,
                           const int& grp_assoc, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1444;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,size(grp_idx));
        current_statement_begin__ = 1445;
        validate_non_negative_index("val", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(N));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, DUMMY_VAR__);
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 1446;
        if (as_bool(logical_eq(grp_assoc,1))) {

            current_statement_begin__ = 1447;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1448;
                stan::model::assign(val, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            sum(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(grp_idx,n,"grp_idx",1),1,"grp_idx",2), get_base1(get_base1(grp_idx,n,"grp_idx",1),2,"grp_idx",2)), stan::model::nil_index_list()), "eta")), 
                            "assigning variable val");
            }
        } else if (as_bool(logical_eq(grp_assoc,2))) {

            current_statement_begin__ = 1451;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1452;
                stan::model::assign(val, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(grp_idx,n,"grp_idx",1),1,"grp_idx",2), get_base1(get_base1(grp_idx,n,"grp_idx",1),2,"grp_idx",2)), stan::model::nil_index_list()), "eta")), 
                            "assigning variable val");
            }
        } else if (as_bool(logical_eq(grp_assoc,3))) {

            current_statement_begin__ = 1455;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1456;
                stan::model::assign(val, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            min(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(grp_idx,n,"grp_idx",1),1,"grp_idx",2), get_base1(get_base1(grp_idx,n,"grp_idx",1),2,"grp_idx",2)), stan::model::nil_index_list()), "eta")), 
                            "assigning variable val");
            }
        } else if (as_bool(logical_eq(grp_assoc,4))) {

            current_statement_begin__ = 1459;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1460;
                stan::model::assign(val, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            max(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(grp_idx,n,"grp_idx",1),1,"grp_idx",2), get_base1(get_base1(grp_idx,n,"grp_idx",1),2,"grp_idx",2)), stan::model::nil_index_list()), "eta")), 
                            "assigning variable val");
            }
        }
        current_statement_begin__ = 1462;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct collapse_within_groups_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                           const std::vector<std::vector<int> >& grp_idx,
                           const int& grp_assoc, std::ostream* pstream__) const {
        return collapse_within_groups(eta, grp_idx, grp_assoc, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
make_x_assoc_shared_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& b,
                          const std::vector<int>& l,
                          const std::vector<int>& p,
                          const std::vector<std::vector<int> >& pmat,
                          const int& Npat,
                          const int& qnodes,
                          const std::vector<int>& which_b,
                          const int& sum_size_which_b,
                          const std::vector<int>& size_which_b,
                          const int& t_i,
                          const int& M, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1498;
        int prior_shift(0);
        (void) prior_shift;  // dummy to suppress unused var warning

        stan::math::fill(prior_shift, std::numeric_limits<int>::min());
        current_statement_begin__ = 1499;
        int start_store(0);
        (void) start_store;  // dummy to suppress unused var warning

        stan::math::fill(start_store, std::numeric_limits<int>::min());
        current_statement_begin__ = 1500;
        int end_store(0);
        (void) end_store;  // dummy to suppress unused var warning

        stan::math::fill(end_store, std::numeric_limits<int>::min());
        current_statement_begin__ = 1501;
        validate_non_negative_index("temp", "Npat", Npat);
        validate_non_negative_index("temp", "sum_size_which_b", sum_size_which_b);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  temp(static_cast<Eigen::VectorXd::Index>(Npat),static_cast<Eigen::VectorXd::Index>(sum_size_which_b));
        (void) temp;  // dummy to suppress unused var warning

        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp,DUMMY_VAR__);
        current_statement_begin__ = 1502;
        validate_non_negative_index("x_assoc_shared_b", "(Npat * (qnodes + 1))", (Npat * (qnodes + 1)));
        validate_non_negative_index("x_assoc_shared_b", "sum_size_which_b", sum_size_which_b);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  x_assoc_shared_b(static_cast<Eigen::VectorXd::Index>((Npat * (qnodes + 1))),static_cast<Eigen::VectorXd::Index>(sum_size_which_b));
        (void) x_assoc_shared_b;  // dummy to suppress unused var warning

        stan::math::initialize(x_assoc_shared_b, DUMMY_VAR__);
        stan::math::fill(x_assoc_shared_b,DUMMY_VAR__);


        current_statement_begin__ = 1503;
        if (as_bool(logical_eq(t_i,1))) {
            current_statement_begin__ = 1503;
            stan::math::assign(prior_shift, 0);
        } else {
            current_statement_begin__ = 1504;
            stan::math::assign(prior_shift, sum(stan::model::rvalue(l, stan::model::cons_list(stan::model::index_min_max(1, (t_i - 1)), stan::model::nil_index_list()), "l")));
        }
        current_statement_begin__ = 1505;
        for (int i = 1; i <= Npat; ++i) {
            {
            current_statement_begin__ = 1506;
            int mark(0);
            (void) mark;  // dummy to suppress unused var warning

            stan::math::fill(mark, std::numeric_limits<int>::min());
            current_statement_begin__ = 1507;
            int start_collect(0);
            (void) start_collect;  // dummy to suppress unused var warning

            stan::math::fill(start_collect, std::numeric_limits<int>::min());


            current_statement_begin__ = 1508;
            stan::math::assign(mark, 1);
            current_statement_begin__ = 1509;
            stan::math::assign(start_collect, (prior_shift + ((i - 1) * get_base1(p,t_i,"p",1))));
            current_statement_begin__ = 1510;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 1511;
                if (as_bool(logical_gt(get_base1(size_which_b,m,"size_which_b",1),0))) {
                    {
                    current_statement_begin__ = 1512;
                    int shift(0);
                    (void) shift;  // dummy to suppress unused var warning

                    stan::math::fill(shift, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1513;
                    int j_shift(0);
                    (void) j_shift;  // dummy to suppress unused var warning

                    stan::math::fill(j_shift, std::numeric_limits<int>::min());


                    current_statement_begin__ = 1514;
                    if (as_bool(logical_eq(m,1))) {

                        current_statement_begin__ = 1515;
                        stan::math::assign(shift, 0);
                        current_statement_begin__ = 1516;
                        stan::math::assign(j_shift, 0);
                    } else {

                        current_statement_begin__ = 1519;
                        stan::math::assign(shift, sum(stan::model::rvalue(pmat, stan::model::cons_list(stan::model::index_uni(t_i), stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list())), "pmat")));
                        current_statement_begin__ = 1520;
                        stan::math::assign(j_shift, sum(stan::model::rvalue(size_which_b, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "size_which_b")));
                    }
                    current_statement_begin__ = 1522;
                    for (int j = 1; j <= get_base1(size_which_b,m,"size_which_b",1); ++j) {
                        {
                        current_statement_begin__ = 1523;
                        int item_collect(0);
                        (void) item_collect;  // dummy to suppress unused var warning

                        stan::math::fill(item_collect, std::numeric_limits<int>::min());


                        current_statement_begin__ = 1524;
                        stan::math::assign(item_collect, ((start_collect + shift) + get_base1(which_b,(j_shift + j),"which_b",1)));
                        current_statement_begin__ = 1525;
                        stan::model::assign(temp, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(mark), stan::model::nil_index_list())), 
                                    get_base1(b,item_collect,"b",1), 
                                    "assigning variable temp");
                        current_statement_begin__ = 1526;
                        stan::math::assign(mark, (mark + 1));
                        }
                    }
                    }
                }
            }
            }
        }
        current_statement_begin__ = 1531;
        for (int i = 1; i <= (qnodes + 1); ++i) {

            current_statement_begin__ = 1532;
            stan::math::assign(start_store, (((i - 1) * Npat) + 1));
            current_statement_begin__ = 1533;
            stan::math::assign(end_store, (i * Npat));
            current_statement_begin__ = 1534;
            stan::model::assign(x_assoc_shared_b, 
                        stan::model::cons_list(stan::model::index_min_max(start_store, end_store), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        temp, 
                        "assigning variable x_assoc_shared_b");
        }
        current_statement_begin__ = 1536;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x_assoc_shared_b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_x_assoc_shared_b_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& b,
                          const std::vector<int>& l,
                          const std::vector<int>& p,
                          const std::vector<std::vector<int> >& pmat,
                          const int& Npat,
                          const int& qnodes,
                          const std::vector<int>& which_b,
                          const int& sum_size_which_b,
                          const std::vector<int>& size_which_b,
                          const int& t_i,
                          const int& M, std::ostream* pstream__) const {
        return make_x_assoc_shared_b(b, l, p, pmat, Npat, qnodes, which_b, sum_size_which_b, size_which_b, t_i, M, pstream__);
    }
};

template <typename T0__, typename T1__, typename T18__, typename T19__, typename T20__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T18__, T19__, typename boost::math::tools::promote_args<T20__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
make_x_assoc_shared_coef(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& b,
                             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& beta,
                             const std::vector<int>& KM,
                             const int& M,
                             const int& t_i,
                             const std::vector<int>& l,
                             const std::vector<int>& p,
                             const std::vector<std::vector<int> >& pmat,
                             const int& Npat,
                             const int& qnodes,
                             const int& sum_size_which_coef,
                             const std::vector<int>& size_which_coef,
                             const std::vector<int>& which_coef_zindex,
                             const std::vector<int>& which_coef_xindex,
                             const std::vector<int>& has_intercept,
                             const std::vector<int>& has_intercept_nob,
                             const std::vector<int>& has_intercept_lob,
                             const std::vector<int>& has_intercept_upb,
                             const std::vector<T18__>& gamma_nob,
                             const std::vector<T19__>& gamma_lob,
                             const std::vector<T20__>& gamma_upb, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T18__, T19__, typename boost::math::tools::promote_args<T20__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1585;
        int t_shift(0);
        (void) t_shift;  // dummy to suppress unused var warning

        stan::math::fill(t_shift, std::numeric_limits<int>::min());
        current_statement_begin__ = 1586;
        int start_store(0);
        (void) start_store;  // dummy to suppress unused var warning

        stan::math::fill(start_store, std::numeric_limits<int>::min());
        current_statement_begin__ = 1587;
        int end_store(0);
        (void) end_store;  // dummy to suppress unused var warning

        stan::math::fill(end_store, std::numeric_limits<int>::min());
        current_statement_begin__ = 1588;
        validate_non_negative_index("temp", "Npat", Npat);
        validate_non_negative_index("temp", "sum_size_which_coef", sum_size_which_coef);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  temp(static_cast<Eigen::VectorXd::Index>(Npat),static_cast<Eigen::VectorXd::Index>(sum_size_which_coef));
        (void) temp;  // dummy to suppress unused var warning

        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp,DUMMY_VAR__);
        current_statement_begin__ = 1589;
        validate_non_negative_index("x_assoc_shared_coef", "(Npat * (qnodes + 1))", (Npat * (qnodes + 1)));
        validate_non_negative_index("x_assoc_shared_coef", "sum_size_which_coef", sum_size_which_coef);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  x_assoc_shared_coef(static_cast<Eigen::VectorXd::Index>((Npat * (qnodes + 1))),static_cast<Eigen::VectorXd::Index>(sum_size_which_coef));
        (void) x_assoc_shared_coef;  // dummy to suppress unused var warning

        stan::math::initialize(x_assoc_shared_coef, DUMMY_VAR__);
        stan::math::fill(x_assoc_shared_coef,DUMMY_VAR__);


        current_statement_begin__ = 1590;
        if (as_bool(logical_eq(t_i,1))) {
            current_statement_begin__ = 1590;
            stan::math::assign(t_shift, 0);
        } else {
            current_statement_begin__ = 1591;
            stan::math::assign(t_shift, sum(stan::model::rvalue(l, stan::model::cons_list(stan::model::index_min_max(1, (t_i - 1)), stan::model::nil_index_list()), "l")));
        }
        current_statement_begin__ = 1592;
        for (int i = 1; i <= Npat; ++i) {
            {
            current_statement_begin__ = 1593;
            int mark(0);
            (void) mark;  // dummy to suppress unused var warning

            stan::math::fill(mark, std::numeric_limits<int>::min());
            current_statement_begin__ = 1594;
            int i_shift(0);
            (void) i_shift;  // dummy to suppress unused var warning

            stan::math::fill(i_shift, std::numeric_limits<int>::min());


            current_statement_begin__ = 1595;
            stan::math::assign(mark, 1);
            current_statement_begin__ = 1596;
            stan::math::assign(i_shift, ((i - 1) * get_base1(p,t_i,"p",1)));
            current_statement_begin__ = 1597;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 1598;
                if (as_bool(logical_gt(get_base1(size_which_coef,m,"size_which_coef",1),0))) {
                    {
                    current_statement_begin__ = 1599;
                    int j_shift(0);
                    (void) j_shift;  // dummy to suppress unused var warning

                    stan::math::fill(j_shift, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1600;
                    int m_shift(0);
                    (void) m_shift;  // dummy to suppress unused var warning

                    stan::math::fill(m_shift, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1601;
                    int shift_nb(0);
                    (void) shift_nb;  // dummy to suppress unused var warning

                    stan::math::fill(shift_nb, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1602;
                    int shift_lb(0);
                    (void) shift_lb;  // dummy to suppress unused var warning

                    stan::math::fill(shift_lb, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1603;
                    int shift_ub(0);
                    (void) shift_ub;  // dummy to suppress unused var warning

                    stan::math::fill(shift_ub, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1604;
                    int shift_beta(0);
                    (void) shift_beta;  // dummy to suppress unused var warning

                    stan::math::fill(shift_beta, std::numeric_limits<int>::min());


                    current_statement_begin__ = 1605;
                    if (as_bool(logical_eq(m,1))) {

                        current_statement_begin__ = 1606;
                        stan::math::assign(j_shift, 0);
                        current_statement_begin__ = 1606;
                        stan::math::assign(m_shift, 0);
                        current_statement_begin__ = 1606;
                        stan::math::assign(shift_nb, 0);
                        current_statement_begin__ = 1607;
                        stan::math::assign(shift_lb, 0);
                        current_statement_begin__ = 1607;
                        stan::math::assign(shift_ub, 0);
                        current_statement_begin__ = 1607;
                        stan::math::assign(shift_beta, 0);
                    } else {

                        current_statement_begin__ = 1610;
                        stan::math::assign(j_shift, sum(stan::model::rvalue(size_which_coef, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "size_which_coef")));
                        current_statement_begin__ = 1611;
                        stan::math::assign(m_shift, sum(stan::model::rvalue(pmat, stan::model::cons_list(stan::model::index_uni(t_i), stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list())), "pmat")));
                        current_statement_begin__ = 1612;
                        stan::math::assign(shift_nb, sum(stan::model::rvalue(has_intercept_nob, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "has_intercept_nob")));
                        current_statement_begin__ = 1613;
                        stan::math::assign(shift_lb, sum(stan::model::rvalue(has_intercept_lob, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "has_intercept_lob")));
                        current_statement_begin__ = 1614;
                        stan::math::assign(shift_ub, sum(stan::model::rvalue(has_intercept_upb, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "has_intercept_upb")));
                        current_statement_begin__ = 1615;
                        stan::math::assign(shift_beta, sum(stan::model::rvalue(KM, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "KM")));
                    }
                    current_statement_begin__ = 1617;
                    for (int j = 1; j <= get_base1(size_which_coef,m,"size_which_coef",1); ++j) {
                        {
                        current_statement_begin__ = 1618;
                        int b_collect(0);
                        (void) b_collect;  // dummy to suppress unused var warning

                        stan::math::fill(b_collect, std::numeric_limits<int>::min());
                        current_statement_begin__ = 1619;
                        int beta_collect_m(0);
                        (void) beta_collect_m;  // dummy to suppress unused var warning

                        stan::math::fill(beta_collect_m, std::numeric_limits<int>::min());
                        current_statement_begin__ = 1620;
                        int beta_collect(0);
                        (void) beta_collect;  // dummy to suppress unused var warning

                        stan::math::fill(beta_collect, std::numeric_limits<int>::min());
                        current_statement_begin__ = 1621;
                        local_scalar_t__ coef;
                        (void) coef;  // dummy to suppress unused var warning

                        stan::math::initialize(coef, DUMMY_VAR__);
                        stan::math::fill(coef,DUMMY_VAR__);


                        current_statement_begin__ = 1622;
                        stan::math::assign(b_collect, (((t_shift + i_shift) + m_shift) + get_base1(which_coef_zindex,(j_shift + j),"which_coef_zindex",1)));
                        current_statement_begin__ = 1623;
                        stan::math::assign(beta_collect_m, get_base1(which_coef_xindex,(j_shift + j),"which_coef_xindex",1));
                        current_statement_begin__ = 1624;
                        stan::math::assign(beta_collect, (shift_beta + beta_collect_m));
                        current_statement_begin__ = 1625;
                        stan::math::assign(coef, get_base1(b,b_collect,"b",1));
                        current_statement_begin__ = 1626;
                        if (as_bool((primitive_value(logical_eq(get_base1(has_intercept,m,"has_intercept",1),1)) && primitive_value(logical_eq(beta_collect,1))))) {

                            current_statement_begin__ = 1628;
                            if (as_bool(logical_eq(get_base1(has_intercept_nob,m,"has_intercept_nob",1),1))) {
                                current_statement_begin__ = 1629;
                                stan::math::assign(coef, (coef + get_base1(gamma_nob,sum(stan::model::rvalue(has_intercept_nob, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "has_intercept_nob")),"gamma_nob",1)));
                            } else if (as_bool(logical_eq(get_base1(has_intercept_lob,m,"has_intercept_lob",1),1))) {
                                current_statement_begin__ = 1631;
                                stan::math::assign(coef, (coef + get_base1(gamma_lob,sum(stan::model::rvalue(has_intercept_lob, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "has_intercept_lob")),"gamma_lob",1)));
                            } else if (as_bool(logical_eq(get_base1(has_intercept_upb,m,"has_intercept_upb",1),1))) {
                                current_statement_begin__ = 1633;
                                stan::math::assign(coef, (coef + get_base1(gamma_upb,sum(stan::model::rvalue(has_intercept_upb, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "has_intercept_upb")),"gamma_upb",1)));
                            }
                        } else if (as_bool(logical_eq(get_base1(has_intercept,m,"has_intercept",1),1))) {

                            current_statement_begin__ = 1638;
                            stan::math::assign(coef, (coef + get_base1(beta,(beta_collect - 1),"beta",1)));
                        } else {
                            current_statement_begin__ = 1641;
                            stan::math::assign(coef, (coef + get_base1(beta,beta_collect,"beta",1)));
                        }
                        current_statement_begin__ = 1643;
                        stan::model::assign(temp, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(mark), stan::model::nil_index_list())), 
                                    coef, 
                                    "assigning variable temp");
                        current_statement_begin__ = 1644;
                        stan::math::assign(mark, (mark + 1));
                        }
                    }
                    }
                }
            }
            }
        }
        current_statement_begin__ = 1651;
        for (int i = 1; i <= (qnodes + 1); ++i) {

            current_statement_begin__ = 1652;
            stan::math::assign(start_store, (((i - 1) * Npat) + 1));
            current_statement_begin__ = 1653;
            stan::math::assign(end_store, (i * Npat));
            current_statement_begin__ = 1654;
            stan::model::assign(x_assoc_shared_coef, 
                        stan::model::cons_list(stan::model::index_min_max(start_store, end_store), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        temp, 
                        "assigning variable x_assoc_shared_coef");
        }
        current_statement_begin__ = 1656;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x_assoc_shared_coef);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_x_assoc_shared_coef_functor__ {
    template <typename T0__, typename T1__, typename T18__, typename T19__, typename T20__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T18__, T19__, typename boost::math::tools::promote_args<T20__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& b,
                             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& beta,
                             const std::vector<int>& KM,
                             const int& M,
                             const int& t_i,
                             const std::vector<int>& l,
                             const std::vector<int>& p,
                             const std::vector<std::vector<int> >& pmat,
                             const int& Npat,
                             const int& qnodes,
                             const int& sum_size_which_coef,
                             const std::vector<int>& size_which_coef,
                             const std::vector<int>& which_coef_zindex,
                             const std::vector<int>& which_coef_xindex,
                             const std::vector<int>& has_intercept,
                             const std::vector<int>& has_intercept_nob,
                             const std::vector<int>& has_intercept_lob,
                             const std::vector<int>& has_intercept_upb,
                             const std::vector<T18__>& gamma_nob,
                             const std::vector<T19__>& gamma_lob,
                             const std::vector<T20__>& gamma_upb, std::ostream* pstream__) const {
        return make_x_assoc_shared_coef(b, beta, KM, M, t_i, l, p, pmat, Npat, qnodes, sum_size_which_coef, size_which_coef, which_coef_zindex, which_coef_xindex, has_intercept, has_intercept_nob, has_intercept_lob, has_intercept_upb, gamma_nob, gamma_lob, gamma_upb, pstream__);
    }
};

#include <meta_header.hpp>
 class model_msjm : public prob_grad {
private:
    int M;
    vector<int> has_aux;
    int has_weights;
    vector<int> resp_type;
    vector<int> intercept_type;
    vector<int> yNobs;
    vector<int> yNeta;
    vector<int> yK;
    int t;
    vector<int> p;
    vector<int> l;
    int q;
    int len_theta_L;
    int bN1;
    int bK1;
    vector<int> bK1_len;
    vector<vector<int> > bK1_idx;
    int bN2;
    int bK2;
    vector<int> bK2_len;
    vector<vector<int> > bK2_idx;
    vector<int> yInt1;
    vector<int> yInt2;
    vector<int> yInt3;
    vector_d yReal1;
    vector_d yReal2;
    vector_d yReal3;
    matrix_d yX1;
    matrix_d yX2;
    matrix_d yX3;
    vector_d yXbar1;
    vector_d yXbar2;
    vector_d yXbar3;
    vector<int> family;
    vector<int> link;
    vector<vector_d> y1_Z1;
    vector<vector_d> y2_Z1;
    vector<vector_d> y3_Z1;
    vector<int> y1_Z1_id;
    vector<int> y2_Z1_id;
    vector<int> y3_Z1_id;
    vector<vector_d> y1_Z2;
    vector<vector_d> y2_Z2;
    vector<vector_d> y3_Z2;
    vector<int> y1_Z2_id;
    vector<int> y2_Z2_id;
    vector<int> y3_Z2_id;
    vector<int> y_prior_dist;
    vector<int> y_prior_dist_for_intercept;
    vector<int> y_prior_dist_for_aux;
    int prior_dist_for_cov;
    int prior_PD;
    int e_prior_dist01;
    int e_prior_dist_for_intercept01;
    int e_prior_dist_for_aux01;
    int basehaz_type01;
    int e_K01;
    int basehaz_nvars01;
    int qnodes01;
    int len_epts01;
    int len_qpts01;
    int len_ipts01;
    int len_cpts01;
    vector<vector<int> > idx_cpts01;
    vector_d epts01;
    vector_d qpts01;
    vector_d ipts01;
    matrix_d e_x01;
    vector_d e_xbar01;
    matrix_d basis_epts01;
    matrix_d basis_qpts01;
    matrix_d basis_ipts01;
    vector_d qwts01;
    vector_d iwts01;
    double norm_const01;
    int e_has_intercept01;
    int e_prior_dist02;
    int e_prior_dist_for_intercept02;
    int e_prior_dist_for_aux02;
    int basehaz_type02;
    int e_K02;
    int basehaz_nvars02;
    int qnodes02;
    int len_epts02;
    int len_qpts02;
    int len_ipts02;
    int len_cpts02;
    vector<vector<int> > idx_cpts02;
    vector_d epts02;
    vector_d qpts02;
    vector_d ipts02;
    matrix_d e_x02;
    vector_d e_xbar02;
    matrix_d basis_epts02;
    matrix_d basis_qpts02;
    matrix_d basis_ipts02;
    vector_d qwts02;
    vector_d iwts02;
    double norm_const02;
    int e_has_intercept02;
    int e_prior_dist12;
    int e_prior_dist_for_intercept12;
    int e_prior_dist_for_aux12;
    int basehaz_type12;
    int e_K12;
    int basehaz_nvars12;
    int qnodes12;
    int len_epts12;
    int len_qpts12;
    int len_ipts12;
    int len_cpts12;
    vector<vector<int> > idx_cpts12;
    vector_d epts12;
    vector_d qpts12;
    vector_d ipts12;
    matrix_d e_x12;
    vector_d e_xbar12;
    matrix_d basis_epts12;
    matrix_d basis_qpts12;
    matrix_d basis_ipts12;
    vector_d qwts12;
    vector_d iwts12;
    double norm_const12;
    int e_has_intercept12;
    int a_prior_dist01;
    int a_K01;
    vector_d a_xbar01;
    int assoc01;
    vector<vector<int> > assoc_uses01;
    vector<vector<int> > has_assoc01;
    int sum_size_which_b01;
    vector<int> size_which_b01;
    vector<int> which_b_zindex01;
    int sum_size_which_coef01;
    vector<int> size_which_coef01;
    vector<int> which_coef_zindex01;
    vector<int> which_coef_xindex01;
    int sum_size_which_interactions01;
    vector<int> size_which_interactions01;
    vector<int> which_interactions01;
    vector<int> y_qrows01;
    matrix_d y1_x_eta_01;
    matrix_d y2_x_eta_01;
    matrix_d y3_x_eta_01;
    vector<vector_d> y1_z1_eta_01;
    vector<vector_d> y2_z1_eta_01;
    vector<vector_d> y3_z1_eta_01;
    vector<vector_d> y1_z2_eta_01;
    vector<vector_d> y2_z2_eta_01;
    vector<vector_d> y3_z2_eta_01;
    vector<int> y1_z1_id_eta_01;
    vector<int> y2_z1_id_eta_01;
    vector<int> y3_z1_id_eta_01;
    vector<int> y1_z2_id_eta_01;
    vector<int> y2_z2_id_eta_01;
    vector<int> y3_z2_id_eta_01;
    matrix_d y1_x_eps_01;
    matrix_d y2_x_eps_01;
    matrix_d y3_x_eps_01;
    vector<vector_d> y1_z1_eps_01;
    vector<vector_d> y2_z1_eps_01;
    vector<vector_d> y3_z1_eps_01;
    vector<vector_d> y1_z2_eps_01;
    vector<vector_d> y2_z2_eps_01;
    vector<vector_d> y3_z2_eps_01;
    vector<int> y1_z1_id_eps_01;
    vector<int> y2_z1_id_eps_01;
    vector<int> y3_z1_id_eps_01;
    vector<int> y1_z2_id_eps_01;
    vector<int> y2_z2_id_eps_01;
    vector<int> y3_z2_id_eps_01;
    int auc_qnodes01;
    int y_qrows_for_auc01;
    vector_d auc_qwts01;
    matrix_d y1_x_auc_01;
    matrix_d y2_x_auc_01;
    matrix_d y3_x_auc_01;
    vector<vector_d> y1_z1_auc_01;
    vector<vector_d> y2_z1_auc_01;
    vector<vector_d> y3_z1_auc_01;
    vector<vector_d> y1_z2_auc_01;
    vector<vector_d> y2_z2_auc_01;
    vector<vector_d> y3_z2_auc_01;
    vector<int> y1_z1_id_auc_01;
    vector<int> y2_z1_id_auc_01;
    vector<int> y3_z1_id_auc_01;
    vector<int> y1_z2_id_auc_01;
    vector<int> y2_z2_id_auc_01;
    vector<int> y3_z2_id_auc_01;
    vector<int> a_K_data01;
    matrix_d y_x_data01;
    vector<vector<int> > idx_data01;
    vector<int> has_grp01;
    int grp_assoc01;
    vector<vector<int> > idx_grp01;
    int a_prior_dist02;
    int a_K02;
    vector_d a_xbar02;
    int assoc02;
    vector<vector<int> > assoc_uses02;
    vector<vector<int> > has_assoc02;
    int sum_size_which_b02;
    vector<int> size_which_b02;
    vector<int> which_b_zindex02;
    int sum_size_which_coef02;
    vector<int> size_which_coef02;
    vector<int> which_coef_zindex02;
    vector<int> which_coef_xindex02;
    int sum_size_which_interactions02;
    vector<int> size_which_interactions02;
    vector<int> which_interactions02;
    vector<int> y_qrows02;
    matrix_d y1_x_eta_02;
    matrix_d y2_x_eta_02;
    matrix_d y3_x_eta_02;
    vector<vector_d> y1_z1_eta_02;
    vector<vector_d> y2_z1_eta_02;
    vector<vector_d> y3_z1_eta_02;
    vector<vector_d> y1_z2_eta_02;
    vector<vector_d> y2_z2_eta_02;
    vector<vector_d> y3_z2_eta_02;
    vector<int> y1_z1_id_eta_02;
    vector<int> y2_z1_id_eta_02;
    vector<int> y3_z1_id_eta_02;
    vector<int> y1_z2_id_eta_02;
    vector<int> y2_z2_id_eta_02;
    vector<int> y3_z2_id_eta_02;
    matrix_d y1_x_eps_02;
    matrix_d y2_x_eps_02;
    matrix_d y3_x_eps_02;
    vector<vector_d> y1_z1_eps_02;
    vector<vector_d> y2_z1_eps_02;
    vector<vector_d> y3_z1_eps_02;
    vector<vector_d> y1_z2_eps_02;
    vector<vector_d> y2_z2_eps_02;
    vector<vector_d> y3_z2_eps_02;
    vector<int> y1_z1_id_eps_02;
    vector<int> y2_z1_id_eps_02;
    vector<int> y3_z1_id_eps_02;
    vector<int> y1_z2_id_eps_02;
    vector<int> y2_z2_id_eps_02;
    vector<int> y3_z2_id_eps_02;
    int auc_qnodes02;
    int y_qrows_for_auc02;
    vector_d auc_qwts02;
    matrix_d y1_x_auc_02;
    matrix_d y2_x_auc_02;
    matrix_d y3_x_auc_02;
    vector<vector_d> y1_z1_auc_02;
    vector<vector_d> y2_z1_auc_02;
    vector<vector_d> y3_z1_auc_02;
    vector<vector_d> y1_z2_auc_02;
    vector<vector_d> y2_z2_auc_02;
    vector<vector_d> y3_z2_auc_02;
    vector<int> y1_z1_id_auc_02;
    vector<int> y2_z1_id_auc_02;
    vector<int> y3_z1_id_auc_02;
    vector<int> y1_z2_id_auc_02;
    vector<int> y2_z2_id_auc_02;
    vector<int> y3_z2_id_auc_02;
    vector<int> a_K_data02;
    matrix_d y_x_data02;
    vector<vector<int> > idx_data02;
    vector<int> has_grp02;
    int grp_assoc02;
    vector<vector<int> > idx_grp02;
    int a_prior_dist12;
    int a_K12;
    vector_d a_xbar12;
    int assoc12;
    vector<vector<int> > assoc_uses12;
    vector<vector<int> > has_assoc12;
    int sum_size_which_b12;
    vector<int> size_which_b12;
    vector<int> which_b_zindex12;
    int sum_size_which_coef12;
    vector<int> size_which_coef12;
    vector<int> which_coef_zindex12;
    vector<int> which_coef_xindex12;
    int sum_size_which_interactions12;
    vector<int> size_which_interactions12;
    vector<int> which_interactions12;
    vector<int> y_qrows12;
    matrix_d y1_x_eta_12;
    matrix_d y2_x_eta_12;
    matrix_d y3_x_eta_12;
    vector<vector_d> y1_z1_eta_12;
    vector<vector_d> y2_z1_eta_12;
    vector<vector_d> y3_z1_eta_12;
    vector<vector_d> y1_z2_eta_12;
    vector<vector_d> y2_z2_eta_12;
    vector<vector_d> y3_z2_eta_12;
    vector<int> y1_z1_id_eta_12;
    vector<int> y2_z1_id_eta_12;
    vector<int> y3_z1_id_eta_12;
    vector<int> y1_z2_id_eta_12;
    vector<int> y2_z2_id_eta_12;
    vector<int> y3_z2_id_eta_12;
    matrix_d y1_x_eps_12;
    matrix_d y2_x_eps_12;
    matrix_d y3_x_eps_12;
    vector<vector_d> y1_z1_eps_12;
    vector<vector_d> y2_z1_eps_12;
    vector<vector_d> y3_z1_eps_12;
    vector<vector_d> y1_z2_eps_12;
    vector<vector_d> y2_z2_eps_12;
    vector<vector_d> y3_z2_eps_12;
    vector<int> y1_z1_id_eps_12;
    vector<int> y2_z1_id_eps_12;
    vector<int> y3_z1_id_eps_12;
    vector<int> y1_z2_id_eps_12;
    vector<int> y2_z2_id_eps_12;
    vector<int> y3_z2_id_eps_12;
    int auc_qnodes12;
    int y_qrows_for_auc12;
    vector_d auc_qwts12;
    matrix_d y1_x_auc_12;
    matrix_d y2_x_auc_12;
    matrix_d y3_x_auc_12;
    vector<vector_d> y1_z1_auc_12;
    vector<vector_d> y2_z1_auc_12;
    vector<vector_d> y3_z1_auc_12;
    vector<vector_d> y1_z2_auc_12;
    vector<vector_d> y2_z2_auc_12;
    vector<vector_d> y3_z2_auc_12;
    vector<int> y1_z1_id_auc_12;
    vector<int> y2_z1_id_auc_12;
    vector<int> y3_z1_id_auc_12;
    vector<int> y1_z2_id_auc_12;
    vector<int> y2_z2_id_auc_12;
    vector<int> y3_z2_id_auc_12;
    vector<int> a_K_data12;
    matrix_d y_x_data12;
    vector<vector<int> > idx_data12;
    vector<int> has_grp12;
    int grp_assoc12;
    vector<vector<int> > idx_grp12;
    vector_d y_prior_mean1;
    vector_d y_prior_mean2;
    vector_d y_prior_mean3;
    vector_d y_prior_scale1;
    vector_d y_prior_scale2;
    vector_d y_prior_scale3;
    vector_d y_prior_df1;
    vector_d y_prior_df2;
    vector_d y_prior_df3;
    vector_d y_global_prior_df;
    vector_d y_global_prior_scale;
    vector_d y_slab_df;
    vector_d y_slab_scale;
    vector_d y_prior_mean_for_intercept;
    vector_d y_prior_scale_for_intercept;
    vector_d y_prior_df_for_intercept;
    vector_d y_prior_mean_for_aux;
    vector_d y_prior_scale_for_aux;
    vector_d y_prior_df_for_aux;
    int len_concentration;
    int len_regularization;
    vector_d b_prior_shape;
    vector_d b_prior_scale;
    vector<double> b_prior_concentration;
    vector<double> b_prior_regularization;
    vector_d b1_prior_scale;
    vector_d b2_prior_scale;
    vector_d b1_prior_df;
    vector_d b2_prior_df;
    double b1_prior_regularization;
    double b2_prior_regularization;
    vector_d e_prior_mean01;
    double e_prior_mean_for_intercept01;
    vector_d e_prior_mean_for_aux01;
    vector_d e_prior_scale01;
    double e_prior_scale_for_intercept01;
    vector_d e_prior_scale_for_aux01;
    vector_d e_prior_df01;
    double e_prior_df_for_intercept01;
    vector_d e_prior_df_for_aux01;
    double e_global_prior_scale01;
    double e_global_prior_df01;
    double e_slab_df01;
    double e_slab_scale01;
    vector_d e_prior_mean02;
    double e_prior_mean_for_intercept02;
    vector_d e_prior_mean_for_aux02;
    vector_d e_prior_scale02;
    double e_prior_scale_for_intercept02;
    vector_d e_prior_scale_for_aux02;
    vector_d e_prior_df02;
    double e_prior_df_for_intercept02;
    vector_d e_prior_df_for_aux02;
    double e_global_prior_scale02;
    double e_global_prior_df02;
    double e_slab_df02;
    double e_slab_scale02;
    vector_d e_prior_mean12;
    double e_prior_mean_for_intercept12;
    vector_d e_prior_mean_for_aux12;
    vector_d e_prior_scale12;
    double e_prior_scale_for_intercept12;
    vector_d e_prior_scale_for_aux12;
    vector_d e_prior_df12;
    double e_prior_df_for_intercept12;
    vector_d e_prior_df_for_aux12;
    double e_global_prior_scale12;
    double e_global_prior_df12;
    double e_slab_df12;
    double e_slab_scale12;
    vector_d a_prior_mean01;
    vector_d a_prior_scale01;
    vector_d a_prior_df01;
    double a_global_prior_scale01;
    double a_global_prior_df01;
    double a_slab_df01;
    double a_slab_scale01;
    vector_d a_prior_mean02;
    vector_d a_prior_scale02;
    vector_d a_prior_df02;
    double a_global_prior_scale02;
    double a_global_prior_df02;
    double a_slab_df02;
    double a_slab_scale02;
    vector_d a_prior_mean12;
    vector_d a_prior_scale12;
    vector_d a_prior_df12;
    double a_global_prior_scale12;
    double a_global_prior_df12;
    double a_slab_df12;
    double a_slab_scale12;
    int e_hs01;
    int a_hs01;
    int e_hs02;
    int a_hs02;
    int e_hs12;
    int a_hs12;
    vector_d log_epts01;
    vector_d log_epts02;
    vector_d log_epts12;
    vector_d log_qpts01;
    vector_d log_qpts02;
    vector_d log_qpts12;
    vector_d log_ipts01;
    vector_d log_ipts02;
    vector_d log_ipts12;
    double sum_epts01;
    double sum_epts02;
    double sum_epts12;
    double sum_log_epts01;
    double sum_log_epts02;
    double sum_log_epts12;
    int yHs1;
    int yHs2;
    int yHs3;
    int len_z_T;
    int len_var_group;
    int len_rho;
    int pos;
    vector<double> delta;
    vector<int> bCov1_idx;
    vector<int> bCov2_idx;
    double sum_log_y1;
    double sum_log_y2;
    double sum_log_y3;
    vector_d sqrt_y1;
    vector_d sqrt_y2;
    vector_d sqrt_y3;
    vector_d log_y1;
    vector_d log_y2;
    vector_d log_y3;
public:
    model_msjm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_msjm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_msjm_namespace::model_msjm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 1673;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 1674;
            validate_non_negative_index("has_aux", "3", 3);
            context__.validate_dims("data initialization", "has_aux", "int", context__.to_vec(3));
            validate_non_negative_index("has_aux", "3", 3);
            has_aux = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("has_aux");
            pos__ = 0;
            size_t has_aux_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < has_aux_limit_0__; ++i_0__) {
                has_aux[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1675;
            context__.validate_dims("data initialization", "has_weights", "int", context__.to_vec());
            has_weights = int(0);
            vals_i__ = context__.vals_i("has_weights");
            pos__ = 0;
            has_weights = vals_i__[pos__++];
            current_statement_begin__ = 1676;
            validate_non_negative_index("resp_type", "3", 3);
            context__.validate_dims("data initialization", "resp_type", "int", context__.to_vec(3));
            validate_non_negative_index("resp_type", "3", 3);
            resp_type = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("resp_type");
            pos__ = 0;
            size_t resp_type_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < resp_type_limit_0__; ++i_0__) {
                resp_type[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1677;
            validate_non_negative_index("intercept_type", "3", 3);
            context__.validate_dims("data initialization", "intercept_type", "int", context__.to_vec(3));
            validate_non_negative_index("intercept_type", "3", 3);
            intercept_type = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("intercept_type");
            pos__ = 0;
            size_t intercept_type_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < intercept_type_limit_0__; ++i_0__) {
                intercept_type[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1678;
            validate_non_negative_index("yNobs", "3", 3);
            context__.validate_dims("data initialization", "yNobs", "int", context__.to_vec(3));
            validate_non_negative_index("yNobs", "3", 3);
            yNobs = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("yNobs");
            pos__ = 0;
            size_t yNobs_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < yNobs_limit_0__; ++i_0__) {
                yNobs[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1679;
            validate_non_negative_index("yNeta", "3", 3);
            context__.validate_dims("data initialization", "yNeta", "int", context__.to_vec(3));
            validate_non_negative_index("yNeta", "3", 3);
            yNeta = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("yNeta");
            pos__ = 0;
            size_t yNeta_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < yNeta_limit_0__; ++i_0__) {
                yNeta[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1680;
            validate_non_negative_index("yK", "3", 3);
            context__.validate_dims("data initialization", "yK", "int", context__.to_vec(3));
            validate_non_negative_index("yK", "3", 3);
            yK = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("yK");
            pos__ = 0;
            size_t yK_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < yK_limit_0__; ++i_0__) {
                yK[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1683;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 1684;
            validate_non_negative_index("p", "t", t);
            context__.validate_dims("data initialization", "p", "int", context__.to_vec(t));
            validate_non_negative_index("p", "t", t);
            p = std::vector<int>(t,int(0));
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            size_t p_limit_0__ = t;
            for (size_t i_0__ = 0; i_0__ < p_limit_0__; ++i_0__) {
                p[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1685;
            validate_non_negative_index("l", "t", t);
            context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
            validate_non_negative_index("l", "t", t);
            l = std::vector<int>(t,int(0));
            vals_i__ = context__.vals_i("l");
            pos__ = 0;
            size_t l_limit_0__ = t;
            for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
                l[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1686;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            current_statement_begin__ = 1687;
            context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
            len_theta_L = int(0);
            vals_i__ = context__.vals_i("len_theta_L");
            pos__ = 0;
            len_theta_L = vals_i__[pos__++];
            current_statement_begin__ = 1692;
            context__.validate_dims("data initialization", "bN1", "int", context__.to_vec());
            bN1 = int(0);
            vals_i__ = context__.vals_i("bN1");
            pos__ = 0;
            bN1 = vals_i__[pos__++];
            current_statement_begin__ = 1693;
            context__.validate_dims("data initialization", "bK1", "int", context__.to_vec());
            bK1 = int(0);
            vals_i__ = context__.vals_i("bK1");
            pos__ = 0;
            bK1 = vals_i__[pos__++];
            current_statement_begin__ = 1694;
            validate_non_negative_index("bK1_len", "3", 3);
            context__.validate_dims("data initialization", "bK1_len", "int", context__.to_vec(3));
            validate_non_negative_index("bK1_len", "3", 3);
            bK1_len = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("bK1_len");
            pos__ = 0;
            size_t bK1_len_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < bK1_len_limit_0__; ++i_0__) {
                bK1_len[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1695;
            validate_non_negative_index("bK1_idx", "3", 3);
            validate_non_negative_index("bK1_idx", "2", 2);
            context__.validate_dims("data initialization", "bK1_idx", "int", context__.to_vec(3,2));
            validate_non_negative_index("bK1_idx", "3", 3);
            validate_non_negative_index("bK1_idx", "2", 2);
            bK1_idx = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("bK1_idx");
            pos__ = 0;
            size_t bK1_idx_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < bK1_idx_limit_1__; ++i_1__) {
                size_t bK1_idx_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < bK1_idx_limit_0__; ++i_0__) {
                    bK1_idx[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1698;
            context__.validate_dims("data initialization", "bN2", "int", context__.to_vec());
            bN2 = int(0);
            vals_i__ = context__.vals_i("bN2");
            pos__ = 0;
            bN2 = vals_i__[pos__++];
            current_statement_begin__ = 1699;
            context__.validate_dims("data initialization", "bK2", "int", context__.to_vec());
            bK2 = int(0);
            vals_i__ = context__.vals_i("bK2");
            pos__ = 0;
            bK2 = vals_i__[pos__++];
            current_statement_begin__ = 1700;
            validate_non_negative_index("bK2_len", "3", 3);
            context__.validate_dims("data initialization", "bK2_len", "int", context__.to_vec(3));
            validate_non_negative_index("bK2_len", "3", 3);
            bK2_len = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("bK2_len");
            pos__ = 0;
            size_t bK2_len_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < bK2_len_limit_0__; ++i_0__) {
                bK2_len[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1701;
            validate_non_negative_index("bK2_idx", "3", 3);
            validate_non_negative_index("bK2_idx", "2", 2);
            context__.validate_dims("data initialization", "bK2_idx", "int", context__.to_vec(3,2));
            validate_non_negative_index("bK2_idx", "3", 3);
            validate_non_negative_index("bK2_idx", "2", 2);
            bK2_idx = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("bK2_idx");
            pos__ = 0;
            size_t bK2_idx_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < bK2_idx_limit_1__; ++i_1__) {
                size_t bK2_idx_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < bK2_idx_limit_0__; ++i_0__) {
                    bK2_idx[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1715;
            validate_non_negative_index("yInt1", "(logical_eq(get_base1(resp_type,1,\"resp_type\",1),2) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yInt1", "int", context__.to_vec((logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            validate_non_negative_index("yInt1", "(logical_eq(get_base1(resp_type,1,\"resp_type\",1),2) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            yInt1 = std::vector<int>((logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("yInt1");
            pos__ = 0;
            size_t yInt1_limit_0__ = (logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < yInt1_limit_0__; ++i_0__) {
                yInt1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1716;
            validate_non_negative_index("yInt2", "(logical_eq(get_base1(resp_type,2,\"resp_type\",1),2) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yInt2", "int", context__.to_vec((logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            validate_non_negative_index("yInt2", "(logical_eq(get_base1(resp_type,2,\"resp_type\",1),2) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            yInt2 = std::vector<int>((logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("yInt2");
            pos__ = 0;
            size_t yInt2_limit_0__ = (logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < yInt2_limit_0__; ++i_0__) {
                yInt2[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1717;
            validate_non_negative_index("yInt3", "(logical_eq(get_base1(resp_type,3,\"resp_type\",1),2) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yInt3", "int", context__.to_vec((logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            validate_non_negative_index("yInt3", "(logical_eq(get_base1(resp_type,3,\"resp_type\",1),2) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            yInt3 = std::vector<int>((logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("yInt3");
            pos__ = 0;
            size_t yInt3_limit_0__ = (logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < yInt3_limit_0__; ++i_0__) {
                yInt3[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1718;
            validate_non_negative_index("yReal1", "(logical_eq(get_base1(resp_type,1,\"resp_type\",1),1) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yReal1", "vector_d", context__.to_vec((logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            validate_non_negative_index("yReal1", "(logical_eq(get_base1(resp_type,1,\"resp_type\",1),1) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            yReal1 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            vals_r__ = context__.vals_r("yReal1");
            pos__ = 0;
            size_t yReal1_i_vec_lim__ = (logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < yReal1_i_vec_lim__; ++i_vec__) {
                yReal1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1719;
            validate_non_negative_index("yReal2", "(logical_eq(get_base1(resp_type,2,\"resp_type\",1),1) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yReal2", "vector_d", context__.to_vec((logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            validate_non_negative_index("yReal2", "(logical_eq(get_base1(resp_type,2,\"resp_type\",1),1) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            yReal2 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            vals_r__ = context__.vals_r("yReal2");
            pos__ = 0;
            size_t yReal2_i_vec_lim__ = (logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < yReal2_i_vec_lim__; ++i_vec__) {
                yReal2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1720;
            validate_non_negative_index("yReal3", "(logical_eq(get_base1(resp_type,3,\"resp_type\",1),1) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yReal3", "vector_d", context__.to_vec((logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            validate_non_negative_index("yReal3", "(logical_eq(get_base1(resp_type,3,\"resp_type\",1),1) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            yReal3 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            vals_r__ = context__.vals_r("yReal3");
            pos__ = 0;
            size_t yReal3_i_vec_lim__ = (logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < yReal3_i_vec_lim__; ++i_vec__) {
                yReal3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1721;
            validate_non_negative_index("yX1", "get_base1(yNeta,1,\"yNeta\",1)", get_base1(yNeta,1,"yNeta",1));
            validate_non_negative_index("yX1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "yX1", "matrix_d", context__.to_vec(get_base1(yNeta,1,"yNeta",1),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("yX1", "get_base1(yNeta,1,\"yNeta\",1)", get_base1(yNeta,1,"yNeta",1));
            validate_non_negative_index("yX1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            yX1 = matrix_d(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,1,"yNeta",1)),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("yX1");
            pos__ = 0;
            size_t yX1_m_mat_lim__ = get_base1(yNeta,1,"yNeta",1);
            size_t yX1_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < yX1_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < yX1_m_mat_lim__; ++m_mat__) {
                    yX1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1722;
            validate_non_negative_index("yX2", "get_base1(yNeta,2,\"yNeta\",1)", get_base1(yNeta,2,"yNeta",1));
            validate_non_negative_index("yX2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "yX2", "matrix_d", context__.to_vec(get_base1(yNeta,2,"yNeta",1),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("yX2", "get_base1(yNeta,2,\"yNeta\",1)", get_base1(yNeta,2,"yNeta",1));
            validate_non_negative_index("yX2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            yX2 = matrix_d(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,2,"yNeta",1)),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("yX2");
            pos__ = 0;
            size_t yX2_m_mat_lim__ = get_base1(yNeta,2,"yNeta",1);
            size_t yX2_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < yX2_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < yX2_m_mat_lim__; ++m_mat__) {
                    yX2(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1723;
            validate_non_negative_index("yX3", "get_base1(yNeta,3,\"yNeta\",1)", get_base1(yNeta,3,"yNeta",1));
            validate_non_negative_index("yX3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "yX3", "matrix_d", context__.to_vec(get_base1(yNeta,3,"yNeta",1),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("yX3", "get_base1(yNeta,3,\"yNeta\",1)", get_base1(yNeta,3,"yNeta",1));
            validate_non_negative_index("yX3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            yX3 = matrix_d(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,3,"yNeta",1)),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("yX3");
            pos__ = 0;
            size_t yX3_m_mat_lim__ = get_base1(yNeta,3,"yNeta",1);
            size_t yX3_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < yX3_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < yX3_m_mat_lim__; ++m_mat__) {
                    yX3(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1724;
            validate_non_negative_index("yXbar1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "yXbar1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
            validate_non_negative_index("yXbar1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            yXbar1 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("yXbar1");
            pos__ = 0;
            size_t yXbar1_i_vec_lim__ = get_base1(yK,1,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < yXbar1_i_vec_lim__; ++i_vec__) {
                yXbar1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1725;
            validate_non_negative_index("yXbar2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "yXbar2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
            validate_non_negative_index("yXbar2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            yXbar2 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("yXbar2");
            pos__ = 0;
            size_t yXbar2_i_vec_lim__ = get_base1(yK,2,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < yXbar2_i_vec_lim__; ++i_vec__) {
                yXbar2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1726;
            validate_non_negative_index("yXbar3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "yXbar3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
            validate_non_negative_index("yXbar3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            yXbar3 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("yXbar3");
            pos__ = 0;
            size_t yXbar3_i_vec_lim__ = get_base1(yK,3,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < yXbar3_i_vec_lim__; ++i_vec__) {
                yXbar3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1736;
            validate_non_negative_index("family", "M", M);
            context__.validate_dims("data initialization", "family", "int", context__.to_vec(M));
            validate_non_negative_index("family", "M", M);
            family = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            size_t family_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < family_limit_0__; ++i_0__) {
                family[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1737;
            validate_non_negative_index("link", "M", M);
            context__.validate_dims("data initialization", "link", "int", context__.to_vec(M));
            validate_non_negative_index("link", "M", M);
            link = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("link");
            pos__ = 0;
            size_t link_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < link_limit_0__; ++i_0__) {
                link[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1740;
            validate_non_negative_index("y1_Z1", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_Z1", "(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y1_Z1", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 )));
            validate_non_negative_index("y1_Z1", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_Z1", "(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            y1_Z1 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_Z1");
            pos__ = 0;
            size_t y1_Z1_i_vec_lim__ = (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_Z1_i_vec_lim__; ++i_vec__) {
                size_t y1_Z1_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_Z1_limit_0__; ++i_0__) {
                    y1_Z1[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1741;
            validate_non_negative_index("y2_Z1", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_Z1", "(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y2_Z1", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 )));
            validate_non_negative_index("y2_Z1", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_Z1", "(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            y2_Z1 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_Z1");
            pos__ = 0;
            size_t y2_Z1_i_vec_lim__ = (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_Z1_i_vec_lim__; ++i_vec__) {
                size_t y2_Z1_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_Z1_limit_0__; ++i_0__) {
                    y2_Z1[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1742;
            validate_non_negative_index("y3_Z1", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_Z1", "(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y3_Z1", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 )));
            validate_non_negative_index("y3_Z1", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_Z1", "(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            y3_Z1 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_Z1");
            pos__ = 0;
            size_t y3_Z1_i_vec_lim__ = (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_Z1_i_vec_lim__; ++i_vec__) {
                size_t y3_Z1_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_Z1_limit_0__; ++i_0__) {
                    y3_Z1[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1743;
            validate_non_negative_index("y1_Z1_id", "(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y1_Z1_id", "int", context__.to_vec((logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 )));
            validate_non_negative_index("y1_Z1_id", "(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            y1_Z1_id = std::vector<int>((logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_Z1_id");
            pos__ = 0;
            size_t y1_Z1_id_limit_0__ = (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_Z1_id_limit_0__; ++i_0__) {
                y1_Z1_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1744;
            validate_non_negative_index("y2_Z1_id", "(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y2_Z1_id", "int", context__.to_vec((logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 )));
            validate_non_negative_index("y2_Z1_id", "(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            y2_Z1_id = std::vector<int>((logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_Z1_id");
            pos__ = 0;
            size_t y2_Z1_id_limit_0__ = (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_Z1_id_limit_0__; ++i_0__) {
                y2_Z1_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1745;
            validate_non_negative_index("y3_Z1_id", "(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y3_Z1_id", "int", context__.to_vec((logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 )));
            validate_non_negative_index("y3_Z1_id", "(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            y3_Z1_id = std::vector<int>((logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_Z1_id");
            pos__ = 0;
            size_t y3_Z1_id_limit_0__ = (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_Z1_id_limit_0__; ++i_0__) {
                y3_Z1_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1748;
            validate_non_negative_index("y1_Z2", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_Z2", "(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y1_Z2", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 )));
            validate_non_negative_index("y1_Z2", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_Z2", "(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            y1_Z2 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_Z2");
            pos__ = 0;
            size_t y1_Z2_i_vec_lim__ = (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_Z2_i_vec_lim__; ++i_vec__) {
                size_t y1_Z2_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_Z2_limit_0__; ++i_0__) {
                    y1_Z2[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1749;
            validate_non_negative_index("y2_Z2", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_Z2", "(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y2_Z2", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 )));
            validate_non_negative_index("y2_Z2", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_Z2", "(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            y2_Z2 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_Z2");
            pos__ = 0;
            size_t y2_Z2_i_vec_lim__ = (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_Z2_i_vec_lim__; ++i_vec__) {
                size_t y2_Z2_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_Z2_limit_0__; ++i_0__) {
                    y2_Z2[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1750;
            validate_non_negative_index("y3_Z2", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_Z2", "(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y3_Z2", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 )));
            validate_non_negative_index("y3_Z2", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_Z2", "(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            y3_Z2 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_Z2");
            pos__ = 0;
            size_t y3_Z2_i_vec_lim__ = (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_Z2_i_vec_lim__; ++i_vec__) {
                size_t y3_Z2_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_Z2_limit_0__; ++i_0__) {
                    y3_Z2[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1751;
            validate_non_negative_index("y1_Z2_id", "(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y1_Z2_id", "int", context__.to_vec((logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 )));
            validate_non_negative_index("y1_Z2_id", "(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            y1_Z2_id = std::vector<int>((logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_Z2_id");
            pos__ = 0;
            size_t y1_Z2_id_limit_0__ = (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_Z2_id_limit_0__; ++i_0__) {
                y1_Z2_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1752;
            validate_non_negative_index("y2_Z2_id", "(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y2_Z2_id", "int", context__.to_vec((logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 )));
            validate_non_negative_index("y2_Z2_id", "(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            y2_Z2_id = std::vector<int>((logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_Z2_id");
            pos__ = 0;
            size_t y2_Z2_id_limit_0__ = (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_Z2_id_limit_0__; ++i_0__) {
                y2_Z2_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1753;
            validate_non_negative_index("y3_Z2_id", "(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y3_Z2_id", "int", context__.to_vec((logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 )));
            validate_non_negative_index("y3_Z2_id", "(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            y3_Z2_id = std::vector<int>((logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_Z2_id");
            pos__ = 0;
            size_t y3_Z2_id_limit_0__ = (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_Z2_id_limit_0__; ++i_0__) {
                y3_Z2_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1757;
            validate_non_negative_index("y_prior_dist", "3", 3);
            context__.validate_dims("data initialization", "y_prior_dist", "int", context__.to_vec(3));
            validate_non_negative_index("y_prior_dist", "3", 3);
            y_prior_dist = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("y_prior_dist");
            pos__ = 0;
            size_t y_prior_dist_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < y_prior_dist_limit_0__; ++i_0__) {
                y_prior_dist[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1758;
            validate_non_negative_index("y_prior_dist_for_intercept", "M", M);
            context__.validate_dims("data initialization", "y_prior_dist_for_intercept", "int", context__.to_vec(M));
            validate_non_negative_index("y_prior_dist_for_intercept", "M", M);
            y_prior_dist_for_intercept = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("y_prior_dist_for_intercept");
            pos__ = 0;
            size_t y_prior_dist_for_intercept_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < y_prior_dist_for_intercept_limit_0__; ++i_0__) {
                y_prior_dist_for_intercept[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1761;
            validate_non_negative_index("y_prior_dist_for_aux", "M", M);
            context__.validate_dims("data initialization", "y_prior_dist_for_aux", "int", context__.to_vec(M));
            validate_non_negative_index("y_prior_dist_for_aux", "M", M);
            y_prior_dist_for_aux = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("y_prior_dist_for_aux");
            pos__ = 0;
            size_t y_prior_dist_for_aux_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < y_prior_dist_for_aux_limit_0__; ++i_0__) {
                y_prior_dist_for_aux[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1764;
            context__.validate_dims("data initialization", "prior_dist_for_cov", "int", context__.to_vec());
            prior_dist_for_cov = int(0);
            vals_i__ = context__.vals_i("prior_dist_for_cov");
            pos__ = 0;
            prior_dist_for_cov = vals_i__[pos__++];
            current_statement_begin__ = 1767;
            context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
            prior_PD = int(0);
            vals_i__ = context__.vals_i("prior_PD");
            pos__ = 0;
            prior_PD = vals_i__[pos__++];
            current_statement_begin__ = 1788;
            context__.validate_dims("data initialization", "e_prior_dist01", "int", context__.to_vec());
            e_prior_dist01 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist01");
            pos__ = 0;
            e_prior_dist01 = vals_i__[pos__++];
            current_statement_begin__ = 1789;
            context__.validate_dims("data initialization", "e_prior_dist_for_intercept01", "int", context__.to_vec());
            e_prior_dist_for_intercept01 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist_for_intercept01");
            pos__ = 0;
            e_prior_dist_for_intercept01 = vals_i__[pos__++];
            current_statement_begin__ = 1796;
            context__.validate_dims("data initialization", "e_prior_dist_for_aux01", "int", context__.to_vec());
            e_prior_dist_for_aux01 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist_for_aux01");
            pos__ = 0;
            e_prior_dist_for_aux01 = vals_i__[pos__++];
            current_statement_begin__ = 1802;
            context__.validate_dims("data initialization", "basehaz_type01", "int", context__.to_vec());
            basehaz_type01 = int(0);
            vals_i__ = context__.vals_i("basehaz_type01");
            pos__ = 0;
            basehaz_type01 = vals_i__[pos__++];
            current_statement_begin__ = 1805;
            context__.validate_dims("data initialization", "e_K01", "int", context__.to_vec());
            e_K01 = int(0);
            vals_i__ = context__.vals_i("e_K01");
            pos__ = 0;
            e_K01 = vals_i__[pos__++];
            current_statement_begin__ = 1806;
            context__.validate_dims("data initialization", "basehaz_nvars01", "int", context__.to_vec());
            basehaz_nvars01 = int(0);
            vals_i__ = context__.vals_i("basehaz_nvars01");
            pos__ = 0;
            basehaz_nvars01 = vals_i__[pos__++];
            current_statement_begin__ = 1807;
            context__.validate_dims("data initialization", "qnodes01", "int", context__.to_vec());
            qnodes01 = int(0);
            vals_i__ = context__.vals_i("qnodes01");
            pos__ = 0;
            qnodes01 = vals_i__[pos__++];
            current_statement_begin__ = 1808;
            context__.validate_dims("data initialization", "len_epts01", "int", context__.to_vec());
            len_epts01 = int(0);
            vals_i__ = context__.vals_i("len_epts01");
            pos__ = 0;
            len_epts01 = vals_i__[pos__++];
            current_statement_begin__ = 1809;
            context__.validate_dims("data initialization", "len_qpts01", "int", context__.to_vec());
            len_qpts01 = int(0);
            vals_i__ = context__.vals_i("len_qpts01");
            pos__ = 0;
            len_qpts01 = vals_i__[pos__++];
            current_statement_begin__ = 1810;
            context__.validate_dims("data initialization", "len_ipts01", "int", context__.to_vec());
            len_ipts01 = int(0);
            vals_i__ = context__.vals_i("len_ipts01");
            pos__ = 0;
            len_ipts01 = vals_i__[pos__++];
            current_statement_begin__ = 1811;
            context__.validate_dims("data initialization", "len_cpts01", "int", context__.to_vec());
            len_cpts01 = int(0);
            vals_i__ = context__.vals_i("len_cpts01");
            pos__ = 0;
            len_cpts01 = vals_i__[pos__++];
            current_statement_begin__ = 1812;
            validate_non_negative_index("idx_cpts01", "3", 3);
            validate_non_negative_index("idx_cpts01", "2", 2);
            context__.validate_dims("data initialization", "idx_cpts01", "int", context__.to_vec(3,2));
            validate_non_negative_index("idx_cpts01", "3", 3);
            validate_non_negative_index("idx_cpts01", "2", 2);
            idx_cpts01 = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_cpts01");
            pos__ = 0;
            size_t idx_cpts01_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_cpts01_limit_1__; ++i_1__) {
                size_t idx_cpts01_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < idx_cpts01_limit_0__; ++i_0__) {
                    idx_cpts01[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1815;
            validate_non_negative_index("epts01", "len_epts01", len_epts01);
            context__.validate_dims("data initialization", "epts01", "vector_d", context__.to_vec(len_epts01));
            validate_non_negative_index("epts01", "len_epts01", len_epts01);
            epts01 = vector_d(static_cast<Eigen::VectorXd::Index>(len_epts01));
            vals_r__ = context__.vals_r("epts01");
            pos__ = 0;
            size_t epts01_i_vec_lim__ = len_epts01;
            for (size_t i_vec__ = 0; i_vec__ < epts01_i_vec_lim__; ++i_vec__) {
                epts01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1816;
            validate_non_negative_index("qpts01", "len_qpts01", len_qpts01);
            context__.validate_dims("data initialization", "qpts01", "vector_d", context__.to_vec(len_qpts01));
            validate_non_negative_index("qpts01", "len_qpts01", len_qpts01);
            qpts01 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts01));
            vals_r__ = context__.vals_r("qpts01");
            pos__ = 0;
            size_t qpts01_i_vec_lim__ = len_qpts01;
            for (size_t i_vec__ = 0; i_vec__ < qpts01_i_vec_lim__; ++i_vec__) {
                qpts01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1817;
            validate_non_negative_index("ipts01", "len_ipts01", len_ipts01);
            context__.validate_dims("data initialization", "ipts01", "vector_d", context__.to_vec(len_ipts01));
            validate_non_negative_index("ipts01", "len_ipts01", len_ipts01);
            ipts01 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts01));
            vals_r__ = context__.vals_r("ipts01");
            pos__ = 0;
            size_t ipts01_i_vec_lim__ = len_ipts01;
            for (size_t i_vec__ = 0; i_vec__ < ipts01_i_vec_lim__; ++i_vec__) {
                ipts01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1820;
            validate_non_negative_index("e_x01", "len_cpts01", len_cpts01);
            validate_non_negative_index("e_x01", "e_K01", e_K01);
            context__.validate_dims("data initialization", "e_x01", "matrix_d", context__.to_vec(len_cpts01,e_K01));
            validate_non_negative_index("e_x01", "len_cpts01", len_cpts01);
            validate_non_negative_index("e_x01", "e_K01", e_K01);
            e_x01 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_cpts01),static_cast<Eigen::VectorXd::Index>(e_K01));
            vals_r__ = context__.vals_r("e_x01");
            pos__ = 0;
            size_t e_x01_m_mat_lim__ = len_cpts01;
            size_t e_x01_n_mat_lim__ = e_K01;
            for (size_t n_mat__ = 0; n_mat__ < e_x01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < e_x01_m_mat_lim__; ++m_mat__) {
                    e_x01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1821;
            validate_non_negative_index("e_xbar01", "e_K01", e_K01);
            context__.validate_dims("data initialization", "e_xbar01", "vector_d", context__.to_vec(e_K01));
            validate_non_negative_index("e_xbar01", "e_K01", e_K01);
            e_xbar01 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K01));
            vals_r__ = context__.vals_r("e_xbar01");
            pos__ = 0;
            size_t e_xbar01_i_vec_lim__ = e_K01;
            for (size_t i_vec__ = 0; i_vec__ < e_xbar01_i_vec_lim__; ++i_vec__) {
                e_xbar01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1824;
            validate_non_negative_index("basis_epts01", "len_epts01", len_epts01);
            validate_non_negative_index("basis_epts01", "basehaz_nvars01", basehaz_nvars01);
            context__.validate_dims("data initialization", "basis_epts01", "matrix_d", context__.to_vec(len_epts01,basehaz_nvars01));
            validate_non_negative_index("basis_epts01", "len_epts01", len_epts01);
            validate_non_negative_index("basis_epts01", "basehaz_nvars01", basehaz_nvars01);
            basis_epts01 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_epts01),static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
            vals_r__ = context__.vals_r("basis_epts01");
            pos__ = 0;
            size_t basis_epts01_m_mat_lim__ = len_epts01;
            size_t basis_epts01_n_mat_lim__ = basehaz_nvars01;
            for (size_t n_mat__ = 0; n_mat__ < basis_epts01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_epts01_m_mat_lim__; ++m_mat__) {
                    basis_epts01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1825;
            validate_non_negative_index("basis_qpts01", "len_qpts01", len_qpts01);
            validate_non_negative_index("basis_qpts01", "basehaz_nvars01", basehaz_nvars01);
            context__.validate_dims("data initialization", "basis_qpts01", "matrix_d", context__.to_vec(len_qpts01,basehaz_nvars01));
            validate_non_negative_index("basis_qpts01", "len_qpts01", len_qpts01);
            validate_non_negative_index("basis_qpts01", "basehaz_nvars01", basehaz_nvars01);
            basis_qpts01 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_qpts01),static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
            vals_r__ = context__.vals_r("basis_qpts01");
            pos__ = 0;
            size_t basis_qpts01_m_mat_lim__ = len_qpts01;
            size_t basis_qpts01_n_mat_lim__ = basehaz_nvars01;
            for (size_t n_mat__ = 0; n_mat__ < basis_qpts01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_qpts01_m_mat_lim__; ++m_mat__) {
                    basis_qpts01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1826;
            validate_non_negative_index("basis_ipts01", "len_ipts01", len_ipts01);
            validate_non_negative_index("basis_ipts01", "basehaz_nvars01", basehaz_nvars01);
            context__.validate_dims("data initialization", "basis_ipts01", "matrix_d", context__.to_vec(len_ipts01,basehaz_nvars01));
            validate_non_negative_index("basis_ipts01", "len_ipts01", len_ipts01);
            validate_non_negative_index("basis_ipts01", "basehaz_nvars01", basehaz_nvars01);
            basis_ipts01 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_ipts01),static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
            vals_r__ = context__.vals_r("basis_ipts01");
            pos__ = 0;
            size_t basis_ipts01_m_mat_lim__ = len_ipts01;
            size_t basis_ipts01_n_mat_lim__ = basehaz_nvars01;
            for (size_t n_mat__ = 0; n_mat__ < basis_ipts01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_ipts01_m_mat_lim__; ++m_mat__) {
                    basis_ipts01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1829;
            validate_non_negative_index("qwts01", "len_qpts01", len_qpts01);
            context__.validate_dims("data initialization", "qwts01", "vector_d", context__.to_vec(len_qpts01));
            validate_non_negative_index("qwts01", "len_qpts01", len_qpts01);
            qwts01 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts01));
            vals_r__ = context__.vals_r("qwts01");
            pos__ = 0;
            size_t qwts01_i_vec_lim__ = len_qpts01;
            for (size_t i_vec__ = 0; i_vec__ < qwts01_i_vec_lim__; ++i_vec__) {
                qwts01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1830;
            validate_non_negative_index("iwts01", "len_ipts01", len_ipts01);
            context__.validate_dims("data initialization", "iwts01", "vector_d", context__.to_vec(len_ipts01));
            validate_non_negative_index("iwts01", "len_ipts01", len_ipts01);
            iwts01 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts01));
            vals_r__ = context__.vals_r("iwts01");
            pos__ = 0;
            size_t iwts01_i_vec_lim__ = len_ipts01;
            for (size_t i_vec__ = 0; i_vec__ < iwts01_i_vec_lim__; ++i_vec__) {
                iwts01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1833;
            context__.validate_dims("data initialization", "norm_const01", "double", context__.to_vec());
            norm_const01 = double(0);
            vals_r__ = context__.vals_r("norm_const01");
            pos__ = 0;
            norm_const01 = vals_r__[pos__++];
            current_statement_begin__ = 1836;
            context__.validate_dims("data initialization", "e_has_intercept01", "int", context__.to_vec());
            e_has_intercept01 = int(0);
            vals_i__ = context__.vals_i("e_has_intercept01");
            pos__ = 0;
            e_has_intercept01 = vals_i__[pos__++];
            current_statement_begin__ = 1846;
            context__.validate_dims("data initialization", "e_prior_dist02", "int", context__.to_vec());
            e_prior_dist02 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist02");
            pos__ = 0;
            e_prior_dist02 = vals_i__[pos__++];
            current_statement_begin__ = 1847;
            context__.validate_dims("data initialization", "e_prior_dist_for_intercept02", "int", context__.to_vec());
            e_prior_dist_for_intercept02 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist_for_intercept02");
            pos__ = 0;
            e_prior_dist_for_intercept02 = vals_i__[pos__++];
            current_statement_begin__ = 1854;
            context__.validate_dims("data initialization", "e_prior_dist_for_aux02", "int", context__.to_vec());
            e_prior_dist_for_aux02 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist_for_aux02");
            pos__ = 0;
            e_prior_dist_for_aux02 = vals_i__[pos__++];
            current_statement_begin__ = 1860;
            context__.validate_dims("data initialization", "basehaz_type02", "int", context__.to_vec());
            basehaz_type02 = int(0);
            vals_i__ = context__.vals_i("basehaz_type02");
            pos__ = 0;
            basehaz_type02 = vals_i__[pos__++];
            current_statement_begin__ = 1863;
            context__.validate_dims("data initialization", "e_K02", "int", context__.to_vec());
            e_K02 = int(0);
            vals_i__ = context__.vals_i("e_K02");
            pos__ = 0;
            e_K02 = vals_i__[pos__++];
            current_statement_begin__ = 1864;
            context__.validate_dims("data initialization", "basehaz_nvars02", "int", context__.to_vec());
            basehaz_nvars02 = int(0);
            vals_i__ = context__.vals_i("basehaz_nvars02");
            pos__ = 0;
            basehaz_nvars02 = vals_i__[pos__++];
            current_statement_begin__ = 1865;
            context__.validate_dims("data initialization", "qnodes02", "int", context__.to_vec());
            qnodes02 = int(0);
            vals_i__ = context__.vals_i("qnodes02");
            pos__ = 0;
            qnodes02 = vals_i__[pos__++];
            current_statement_begin__ = 1866;
            context__.validate_dims("data initialization", "len_epts02", "int", context__.to_vec());
            len_epts02 = int(0);
            vals_i__ = context__.vals_i("len_epts02");
            pos__ = 0;
            len_epts02 = vals_i__[pos__++];
            current_statement_begin__ = 1867;
            context__.validate_dims("data initialization", "len_qpts02", "int", context__.to_vec());
            len_qpts02 = int(0);
            vals_i__ = context__.vals_i("len_qpts02");
            pos__ = 0;
            len_qpts02 = vals_i__[pos__++];
            current_statement_begin__ = 1868;
            context__.validate_dims("data initialization", "len_ipts02", "int", context__.to_vec());
            len_ipts02 = int(0);
            vals_i__ = context__.vals_i("len_ipts02");
            pos__ = 0;
            len_ipts02 = vals_i__[pos__++];
            current_statement_begin__ = 1869;
            context__.validate_dims("data initialization", "len_cpts02", "int", context__.to_vec());
            len_cpts02 = int(0);
            vals_i__ = context__.vals_i("len_cpts02");
            pos__ = 0;
            len_cpts02 = vals_i__[pos__++];
            current_statement_begin__ = 1870;
            validate_non_negative_index("idx_cpts02", "3", 3);
            validate_non_negative_index("idx_cpts02", "2", 2);
            context__.validate_dims("data initialization", "idx_cpts02", "int", context__.to_vec(3,2));
            validate_non_negative_index("idx_cpts02", "3", 3);
            validate_non_negative_index("idx_cpts02", "2", 2);
            idx_cpts02 = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_cpts02");
            pos__ = 0;
            size_t idx_cpts02_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_cpts02_limit_1__; ++i_1__) {
                size_t idx_cpts02_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < idx_cpts02_limit_0__; ++i_0__) {
                    idx_cpts02[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1873;
            validate_non_negative_index("epts02", "len_epts02", len_epts02);
            context__.validate_dims("data initialization", "epts02", "vector_d", context__.to_vec(len_epts02));
            validate_non_negative_index("epts02", "len_epts02", len_epts02);
            epts02 = vector_d(static_cast<Eigen::VectorXd::Index>(len_epts02));
            vals_r__ = context__.vals_r("epts02");
            pos__ = 0;
            size_t epts02_i_vec_lim__ = len_epts02;
            for (size_t i_vec__ = 0; i_vec__ < epts02_i_vec_lim__; ++i_vec__) {
                epts02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1874;
            validate_non_negative_index("qpts02", "len_qpts02", len_qpts02);
            context__.validate_dims("data initialization", "qpts02", "vector_d", context__.to_vec(len_qpts02));
            validate_non_negative_index("qpts02", "len_qpts02", len_qpts02);
            qpts02 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts02));
            vals_r__ = context__.vals_r("qpts02");
            pos__ = 0;
            size_t qpts02_i_vec_lim__ = len_qpts02;
            for (size_t i_vec__ = 0; i_vec__ < qpts02_i_vec_lim__; ++i_vec__) {
                qpts02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1875;
            validate_non_negative_index("ipts02", "len_ipts02", len_ipts02);
            context__.validate_dims("data initialization", "ipts02", "vector_d", context__.to_vec(len_ipts02));
            validate_non_negative_index("ipts02", "len_ipts02", len_ipts02);
            ipts02 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts02));
            vals_r__ = context__.vals_r("ipts02");
            pos__ = 0;
            size_t ipts02_i_vec_lim__ = len_ipts02;
            for (size_t i_vec__ = 0; i_vec__ < ipts02_i_vec_lim__; ++i_vec__) {
                ipts02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1878;
            validate_non_negative_index("e_x02", "len_cpts02", len_cpts02);
            validate_non_negative_index("e_x02", "e_K02", e_K02);
            context__.validate_dims("data initialization", "e_x02", "matrix_d", context__.to_vec(len_cpts02,e_K02));
            validate_non_negative_index("e_x02", "len_cpts02", len_cpts02);
            validate_non_negative_index("e_x02", "e_K02", e_K02);
            e_x02 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_cpts02),static_cast<Eigen::VectorXd::Index>(e_K02));
            vals_r__ = context__.vals_r("e_x02");
            pos__ = 0;
            size_t e_x02_m_mat_lim__ = len_cpts02;
            size_t e_x02_n_mat_lim__ = e_K02;
            for (size_t n_mat__ = 0; n_mat__ < e_x02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < e_x02_m_mat_lim__; ++m_mat__) {
                    e_x02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1879;
            validate_non_negative_index("e_xbar02", "e_K02", e_K02);
            context__.validate_dims("data initialization", "e_xbar02", "vector_d", context__.to_vec(e_K02));
            validate_non_negative_index("e_xbar02", "e_K02", e_K02);
            e_xbar02 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K02));
            vals_r__ = context__.vals_r("e_xbar02");
            pos__ = 0;
            size_t e_xbar02_i_vec_lim__ = e_K02;
            for (size_t i_vec__ = 0; i_vec__ < e_xbar02_i_vec_lim__; ++i_vec__) {
                e_xbar02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1882;
            validate_non_negative_index("basis_epts02", "len_epts02", len_epts02);
            validate_non_negative_index("basis_epts02", "basehaz_nvars02", basehaz_nvars02);
            context__.validate_dims("data initialization", "basis_epts02", "matrix_d", context__.to_vec(len_epts02,basehaz_nvars02));
            validate_non_negative_index("basis_epts02", "len_epts02", len_epts02);
            validate_non_negative_index("basis_epts02", "basehaz_nvars02", basehaz_nvars02);
            basis_epts02 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_epts02),static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
            vals_r__ = context__.vals_r("basis_epts02");
            pos__ = 0;
            size_t basis_epts02_m_mat_lim__ = len_epts02;
            size_t basis_epts02_n_mat_lim__ = basehaz_nvars02;
            for (size_t n_mat__ = 0; n_mat__ < basis_epts02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_epts02_m_mat_lim__; ++m_mat__) {
                    basis_epts02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1883;
            validate_non_negative_index("basis_qpts02", "len_qpts02", len_qpts02);
            validate_non_negative_index("basis_qpts02", "basehaz_nvars02", basehaz_nvars02);
            context__.validate_dims("data initialization", "basis_qpts02", "matrix_d", context__.to_vec(len_qpts02,basehaz_nvars02));
            validate_non_negative_index("basis_qpts02", "len_qpts02", len_qpts02);
            validate_non_negative_index("basis_qpts02", "basehaz_nvars02", basehaz_nvars02);
            basis_qpts02 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_qpts02),static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
            vals_r__ = context__.vals_r("basis_qpts02");
            pos__ = 0;
            size_t basis_qpts02_m_mat_lim__ = len_qpts02;
            size_t basis_qpts02_n_mat_lim__ = basehaz_nvars02;
            for (size_t n_mat__ = 0; n_mat__ < basis_qpts02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_qpts02_m_mat_lim__; ++m_mat__) {
                    basis_qpts02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1884;
            validate_non_negative_index("basis_ipts02", "len_ipts02", len_ipts02);
            validate_non_negative_index("basis_ipts02", "basehaz_nvars02", basehaz_nvars02);
            context__.validate_dims("data initialization", "basis_ipts02", "matrix_d", context__.to_vec(len_ipts02,basehaz_nvars02));
            validate_non_negative_index("basis_ipts02", "len_ipts02", len_ipts02);
            validate_non_negative_index("basis_ipts02", "basehaz_nvars02", basehaz_nvars02);
            basis_ipts02 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_ipts02),static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
            vals_r__ = context__.vals_r("basis_ipts02");
            pos__ = 0;
            size_t basis_ipts02_m_mat_lim__ = len_ipts02;
            size_t basis_ipts02_n_mat_lim__ = basehaz_nvars02;
            for (size_t n_mat__ = 0; n_mat__ < basis_ipts02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_ipts02_m_mat_lim__; ++m_mat__) {
                    basis_ipts02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1887;
            validate_non_negative_index("qwts02", "len_qpts02", len_qpts02);
            context__.validate_dims("data initialization", "qwts02", "vector_d", context__.to_vec(len_qpts02));
            validate_non_negative_index("qwts02", "len_qpts02", len_qpts02);
            qwts02 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts02));
            vals_r__ = context__.vals_r("qwts02");
            pos__ = 0;
            size_t qwts02_i_vec_lim__ = len_qpts02;
            for (size_t i_vec__ = 0; i_vec__ < qwts02_i_vec_lim__; ++i_vec__) {
                qwts02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1888;
            validate_non_negative_index("iwts02", "len_ipts02", len_ipts02);
            context__.validate_dims("data initialization", "iwts02", "vector_d", context__.to_vec(len_ipts02));
            validate_non_negative_index("iwts02", "len_ipts02", len_ipts02);
            iwts02 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts02));
            vals_r__ = context__.vals_r("iwts02");
            pos__ = 0;
            size_t iwts02_i_vec_lim__ = len_ipts02;
            for (size_t i_vec__ = 0; i_vec__ < iwts02_i_vec_lim__; ++i_vec__) {
                iwts02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1891;
            context__.validate_dims("data initialization", "norm_const02", "double", context__.to_vec());
            norm_const02 = double(0);
            vals_r__ = context__.vals_r("norm_const02");
            pos__ = 0;
            norm_const02 = vals_r__[pos__++];
            current_statement_begin__ = 1894;
            context__.validate_dims("data initialization", "e_has_intercept02", "int", context__.to_vec());
            e_has_intercept02 = int(0);
            vals_i__ = context__.vals_i("e_has_intercept02");
            pos__ = 0;
            e_has_intercept02 = vals_i__[pos__++];
            current_statement_begin__ = 1904;
            context__.validate_dims("data initialization", "e_prior_dist12", "int", context__.to_vec());
            e_prior_dist12 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist12");
            pos__ = 0;
            e_prior_dist12 = vals_i__[pos__++];
            current_statement_begin__ = 1905;
            context__.validate_dims("data initialization", "e_prior_dist_for_intercept12", "int", context__.to_vec());
            e_prior_dist_for_intercept12 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist_for_intercept12");
            pos__ = 0;
            e_prior_dist_for_intercept12 = vals_i__[pos__++];
            current_statement_begin__ = 1912;
            context__.validate_dims("data initialization", "e_prior_dist_for_aux12", "int", context__.to_vec());
            e_prior_dist_for_aux12 = int(0);
            vals_i__ = context__.vals_i("e_prior_dist_for_aux12");
            pos__ = 0;
            e_prior_dist_for_aux12 = vals_i__[pos__++];
            current_statement_begin__ = 1918;
            context__.validate_dims("data initialization", "basehaz_type12", "int", context__.to_vec());
            basehaz_type12 = int(0);
            vals_i__ = context__.vals_i("basehaz_type12");
            pos__ = 0;
            basehaz_type12 = vals_i__[pos__++];
            current_statement_begin__ = 1921;
            context__.validate_dims("data initialization", "e_K12", "int", context__.to_vec());
            e_K12 = int(0);
            vals_i__ = context__.vals_i("e_K12");
            pos__ = 0;
            e_K12 = vals_i__[pos__++];
            current_statement_begin__ = 1922;
            context__.validate_dims("data initialization", "basehaz_nvars12", "int", context__.to_vec());
            basehaz_nvars12 = int(0);
            vals_i__ = context__.vals_i("basehaz_nvars12");
            pos__ = 0;
            basehaz_nvars12 = vals_i__[pos__++];
            current_statement_begin__ = 1923;
            context__.validate_dims("data initialization", "qnodes12", "int", context__.to_vec());
            qnodes12 = int(0);
            vals_i__ = context__.vals_i("qnodes12");
            pos__ = 0;
            qnodes12 = vals_i__[pos__++];
            current_statement_begin__ = 1924;
            context__.validate_dims("data initialization", "len_epts12", "int", context__.to_vec());
            len_epts12 = int(0);
            vals_i__ = context__.vals_i("len_epts12");
            pos__ = 0;
            len_epts12 = vals_i__[pos__++];
            current_statement_begin__ = 1925;
            context__.validate_dims("data initialization", "len_qpts12", "int", context__.to_vec());
            len_qpts12 = int(0);
            vals_i__ = context__.vals_i("len_qpts12");
            pos__ = 0;
            len_qpts12 = vals_i__[pos__++];
            current_statement_begin__ = 1926;
            context__.validate_dims("data initialization", "len_ipts12", "int", context__.to_vec());
            len_ipts12 = int(0);
            vals_i__ = context__.vals_i("len_ipts12");
            pos__ = 0;
            len_ipts12 = vals_i__[pos__++];
            current_statement_begin__ = 1927;
            context__.validate_dims("data initialization", "len_cpts12", "int", context__.to_vec());
            len_cpts12 = int(0);
            vals_i__ = context__.vals_i("len_cpts12");
            pos__ = 0;
            len_cpts12 = vals_i__[pos__++];
            current_statement_begin__ = 1928;
            validate_non_negative_index("idx_cpts12", "3", 3);
            validate_non_negative_index("idx_cpts12", "2", 2);
            context__.validate_dims("data initialization", "idx_cpts12", "int", context__.to_vec(3,2));
            validate_non_negative_index("idx_cpts12", "3", 3);
            validate_non_negative_index("idx_cpts12", "2", 2);
            idx_cpts12 = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_cpts12");
            pos__ = 0;
            size_t idx_cpts12_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_cpts12_limit_1__; ++i_1__) {
                size_t idx_cpts12_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < idx_cpts12_limit_0__; ++i_0__) {
                    idx_cpts12[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1931;
            validate_non_negative_index("epts12", "len_epts12", len_epts12);
            context__.validate_dims("data initialization", "epts12", "vector_d", context__.to_vec(len_epts12));
            validate_non_negative_index("epts12", "len_epts12", len_epts12);
            epts12 = vector_d(static_cast<Eigen::VectorXd::Index>(len_epts12));
            vals_r__ = context__.vals_r("epts12");
            pos__ = 0;
            size_t epts12_i_vec_lim__ = len_epts12;
            for (size_t i_vec__ = 0; i_vec__ < epts12_i_vec_lim__; ++i_vec__) {
                epts12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1932;
            validate_non_negative_index("qpts12", "len_qpts12", len_qpts12);
            context__.validate_dims("data initialization", "qpts12", "vector_d", context__.to_vec(len_qpts12));
            validate_non_negative_index("qpts12", "len_qpts12", len_qpts12);
            qpts12 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts12));
            vals_r__ = context__.vals_r("qpts12");
            pos__ = 0;
            size_t qpts12_i_vec_lim__ = len_qpts12;
            for (size_t i_vec__ = 0; i_vec__ < qpts12_i_vec_lim__; ++i_vec__) {
                qpts12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1933;
            validate_non_negative_index("ipts12", "len_ipts12", len_ipts12);
            context__.validate_dims("data initialization", "ipts12", "vector_d", context__.to_vec(len_ipts12));
            validate_non_negative_index("ipts12", "len_ipts12", len_ipts12);
            ipts12 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts12));
            vals_r__ = context__.vals_r("ipts12");
            pos__ = 0;
            size_t ipts12_i_vec_lim__ = len_ipts12;
            for (size_t i_vec__ = 0; i_vec__ < ipts12_i_vec_lim__; ++i_vec__) {
                ipts12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1936;
            validate_non_negative_index("e_x12", "len_cpts12", len_cpts12);
            validate_non_negative_index("e_x12", "e_K12", e_K12);
            context__.validate_dims("data initialization", "e_x12", "matrix_d", context__.to_vec(len_cpts12,e_K12));
            validate_non_negative_index("e_x12", "len_cpts12", len_cpts12);
            validate_non_negative_index("e_x12", "e_K12", e_K12);
            e_x12 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_cpts12),static_cast<Eigen::VectorXd::Index>(e_K12));
            vals_r__ = context__.vals_r("e_x12");
            pos__ = 0;
            size_t e_x12_m_mat_lim__ = len_cpts12;
            size_t e_x12_n_mat_lim__ = e_K12;
            for (size_t n_mat__ = 0; n_mat__ < e_x12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < e_x12_m_mat_lim__; ++m_mat__) {
                    e_x12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1937;
            validate_non_negative_index("e_xbar12", "e_K12", e_K12);
            context__.validate_dims("data initialization", "e_xbar12", "vector_d", context__.to_vec(e_K12));
            validate_non_negative_index("e_xbar12", "e_K12", e_K12);
            e_xbar12 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K12));
            vals_r__ = context__.vals_r("e_xbar12");
            pos__ = 0;
            size_t e_xbar12_i_vec_lim__ = e_K12;
            for (size_t i_vec__ = 0; i_vec__ < e_xbar12_i_vec_lim__; ++i_vec__) {
                e_xbar12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1940;
            validate_non_negative_index("basis_epts12", "len_epts12", len_epts12);
            validate_non_negative_index("basis_epts12", "basehaz_nvars12", basehaz_nvars12);
            context__.validate_dims("data initialization", "basis_epts12", "matrix_d", context__.to_vec(len_epts12,basehaz_nvars12));
            validate_non_negative_index("basis_epts12", "len_epts12", len_epts12);
            validate_non_negative_index("basis_epts12", "basehaz_nvars12", basehaz_nvars12);
            basis_epts12 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_epts12),static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
            vals_r__ = context__.vals_r("basis_epts12");
            pos__ = 0;
            size_t basis_epts12_m_mat_lim__ = len_epts12;
            size_t basis_epts12_n_mat_lim__ = basehaz_nvars12;
            for (size_t n_mat__ = 0; n_mat__ < basis_epts12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_epts12_m_mat_lim__; ++m_mat__) {
                    basis_epts12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1941;
            validate_non_negative_index("basis_qpts12", "len_qpts12", len_qpts12);
            validate_non_negative_index("basis_qpts12", "basehaz_nvars12", basehaz_nvars12);
            context__.validate_dims("data initialization", "basis_qpts12", "matrix_d", context__.to_vec(len_qpts12,basehaz_nvars12));
            validate_non_negative_index("basis_qpts12", "len_qpts12", len_qpts12);
            validate_non_negative_index("basis_qpts12", "basehaz_nvars12", basehaz_nvars12);
            basis_qpts12 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_qpts12),static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
            vals_r__ = context__.vals_r("basis_qpts12");
            pos__ = 0;
            size_t basis_qpts12_m_mat_lim__ = len_qpts12;
            size_t basis_qpts12_n_mat_lim__ = basehaz_nvars12;
            for (size_t n_mat__ = 0; n_mat__ < basis_qpts12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_qpts12_m_mat_lim__; ++m_mat__) {
                    basis_qpts12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1942;
            validate_non_negative_index("basis_ipts12", "len_ipts12", len_ipts12);
            validate_non_negative_index("basis_ipts12", "basehaz_nvars12", basehaz_nvars12);
            context__.validate_dims("data initialization", "basis_ipts12", "matrix_d", context__.to_vec(len_ipts12,basehaz_nvars12));
            validate_non_negative_index("basis_ipts12", "len_ipts12", len_ipts12);
            validate_non_negative_index("basis_ipts12", "basehaz_nvars12", basehaz_nvars12);
            basis_ipts12 = matrix_d(static_cast<Eigen::VectorXd::Index>(len_ipts12),static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
            vals_r__ = context__.vals_r("basis_ipts12");
            pos__ = 0;
            size_t basis_ipts12_m_mat_lim__ = len_ipts12;
            size_t basis_ipts12_n_mat_lim__ = basehaz_nvars12;
            for (size_t n_mat__ = 0; n_mat__ < basis_ipts12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < basis_ipts12_m_mat_lim__; ++m_mat__) {
                    basis_ipts12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1945;
            validate_non_negative_index("qwts12", "len_qpts12", len_qpts12);
            context__.validate_dims("data initialization", "qwts12", "vector_d", context__.to_vec(len_qpts12));
            validate_non_negative_index("qwts12", "len_qpts12", len_qpts12);
            qwts12 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts12));
            vals_r__ = context__.vals_r("qwts12");
            pos__ = 0;
            size_t qwts12_i_vec_lim__ = len_qpts12;
            for (size_t i_vec__ = 0; i_vec__ < qwts12_i_vec_lim__; ++i_vec__) {
                qwts12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1946;
            validate_non_negative_index("iwts12", "len_ipts12", len_ipts12);
            context__.validate_dims("data initialization", "iwts12", "vector_d", context__.to_vec(len_ipts12));
            validate_non_negative_index("iwts12", "len_ipts12", len_ipts12);
            iwts12 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts12));
            vals_r__ = context__.vals_r("iwts12");
            pos__ = 0;
            size_t iwts12_i_vec_lim__ = len_ipts12;
            for (size_t i_vec__ = 0; i_vec__ < iwts12_i_vec_lim__; ++i_vec__) {
                iwts12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1949;
            context__.validate_dims("data initialization", "norm_const12", "double", context__.to_vec());
            norm_const12 = double(0);
            vals_r__ = context__.vals_r("norm_const12");
            pos__ = 0;
            norm_const12 = vals_r__[pos__++];
            current_statement_begin__ = 1952;
            context__.validate_dims("data initialization", "e_has_intercept12", "int", context__.to_vec());
            e_has_intercept12 = int(0);
            vals_i__ = context__.vals_i("e_has_intercept12");
            pos__ = 0;
            e_has_intercept12 = vals_i__[pos__++];
            current_statement_begin__ = 1979;
            context__.validate_dims("data initialization", "a_prior_dist01", "int", context__.to_vec());
            a_prior_dist01 = int(0);
            vals_i__ = context__.vals_i("a_prior_dist01");
            pos__ = 0;
            a_prior_dist01 = vals_i__[pos__++];
            current_statement_begin__ = 1984;
            context__.validate_dims("data initialization", "a_K01", "int", context__.to_vec());
            a_K01 = int(0);
            vals_i__ = context__.vals_i("a_K01");
            pos__ = 0;
            a_K01 = vals_i__[pos__++];
            current_statement_begin__ = 1987;
            validate_non_negative_index("a_xbar01", "a_K01", a_K01);
            context__.validate_dims("data initialization", "a_xbar01", "vector_d", context__.to_vec(a_K01));
            validate_non_negative_index("a_xbar01", "a_K01", a_K01);
            a_xbar01 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K01));
            vals_r__ = context__.vals_r("a_xbar01");
            pos__ = 0;
            size_t a_xbar01_i_vec_lim__ = a_K01;
            for (size_t i_vec__ = 0; i_vec__ < a_xbar01_i_vec_lim__; ++i_vec__) {
                a_xbar01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1990;
            context__.validate_dims("data initialization", "assoc01", "int", context__.to_vec());
            assoc01 = int(0);
            vals_i__ = context__.vals_i("assoc01");
            pos__ = 0;
            assoc01 = vals_i__[pos__++];
            current_statement_begin__ = 1993;
            validate_non_negative_index("assoc_uses01", "6", 6);
            validate_non_negative_index("assoc_uses01", "3", 3);
            context__.validate_dims("data initialization", "assoc_uses01", "int", context__.to_vec(6,3));
            validate_non_negative_index("assoc_uses01", "6", 6);
            validate_non_negative_index("assoc_uses01", "3", 3);
            assoc_uses01 = std::vector<std::vector<int> >(6,std::vector<int>(3,int(0)));
            vals_i__ = context__.vals_i("assoc_uses01");
            pos__ = 0;
            size_t assoc_uses01_limit_1__ = 3;
            for (size_t i_1__ = 0; i_1__ < assoc_uses01_limit_1__; ++i_1__) {
                size_t assoc_uses01_limit_0__ = 6;
                for (size_t i_0__ = 0; i_0__ < assoc_uses01_limit_0__; ++i_0__) {
                    assoc_uses01[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1996;
            validate_non_negative_index("has_assoc01", "16", 16);
            validate_non_negative_index("has_assoc01", "M", M);
            context__.validate_dims("data initialization", "has_assoc01", "int", context__.to_vec(16,M));
            validate_non_negative_index("has_assoc01", "16", 16);
            validate_non_negative_index("has_assoc01", "M", M);
            has_assoc01 = std::vector<std::vector<int> >(16,std::vector<int>(M,int(0)));
            vals_i__ = context__.vals_i("has_assoc01");
            pos__ = 0;
            size_t has_assoc01_limit_1__ = M;
            for (size_t i_1__ = 0; i_1__ < has_assoc01_limit_1__; ++i_1__) {
                size_t has_assoc01_limit_0__ = 16;
                for (size_t i_0__ = 0; i_0__ < has_assoc01_limit_0__; ++i_0__) {
                    has_assoc01[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1999;
            context__.validate_dims("data initialization", "sum_size_which_b01", "int", context__.to_vec());
            sum_size_which_b01 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_b01");
            pos__ = 0;
            sum_size_which_b01 = vals_i__[pos__++];
            current_statement_begin__ = 2002;
            validate_non_negative_index("size_which_b01", "M", M);
            context__.validate_dims("data initialization", "size_which_b01", "int", context__.to_vec(M));
            validate_non_negative_index("size_which_b01", "M", M);
            size_which_b01 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("size_which_b01");
            pos__ = 0;
            size_t size_which_b01_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < size_which_b01_limit_0__; ++i_0__) {
                size_which_b01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2005;
            validate_non_negative_index("which_b_zindex01", "sum_size_which_b01", sum_size_which_b01);
            context__.validate_dims("data initialization", "which_b_zindex01", "int", context__.to_vec(sum_size_which_b01));
            validate_non_negative_index("which_b_zindex01", "sum_size_which_b01", sum_size_which_b01);
            which_b_zindex01 = std::vector<int>(sum_size_which_b01,int(0));
            vals_i__ = context__.vals_i("which_b_zindex01");
            pos__ = 0;
            size_t which_b_zindex01_limit_0__ = sum_size_which_b01;
            for (size_t i_0__ = 0; i_0__ < which_b_zindex01_limit_0__; ++i_0__) {
                which_b_zindex01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2008;
            context__.validate_dims("data initialization", "sum_size_which_coef01", "int", context__.to_vec());
            sum_size_which_coef01 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_coef01");
            pos__ = 0;
            sum_size_which_coef01 = vals_i__[pos__++];
            current_statement_begin__ = 2011;
            validate_non_negative_index("size_which_coef01", "M", M);
            context__.validate_dims("data initialization", "size_which_coef01", "int", context__.to_vec(M));
            validate_non_negative_index("size_which_coef01", "M", M);
            size_which_coef01 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("size_which_coef01");
            pos__ = 0;
            size_t size_which_coef01_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < size_which_coef01_limit_0__; ++i_0__) {
                size_which_coef01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2014;
            validate_non_negative_index("which_coef_zindex01", "sum_size_which_coef01", sum_size_which_coef01);
            context__.validate_dims("data initialization", "which_coef_zindex01", "int", context__.to_vec(sum_size_which_coef01));
            validate_non_negative_index("which_coef_zindex01", "sum_size_which_coef01", sum_size_which_coef01);
            which_coef_zindex01 = std::vector<int>(sum_size_which_coef01,int(0));
            vals_i__ = context__.vals_i("which_coef_zindex01");
            pos__ = 0;
            size_t which_coef_zindex01_limit_0__ = sum_size_which_coef01;
            for (size_t i_0__ = 0; i_0__ < which_coef_zindex01_limit_0__; ++i_0__) {
                which_coef_zindex01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2017;
            validate_non_negative_index("which_coef_xindex01", "sum_size_which_coef01", sum_size_which_coef01);
            context__.validate_dims("data initialization", "which_coef_xindex01", "int", context__.to_vec(sum_size_which_coef01));
            validate_non_negative_index("which_coef_xindex01", "sum_size_which_coef01", sum_size_which_coef01);
            which_coef_xindex01 = std::vector<int>(sum_size_which_coef01,int(0));
            vals_i__ = context__.vals_i("which_coef_xindex01");
            pos__ = 0;
            size_t which_coef_xindex01_limit_0__ = sum_size_which_coef01;
            for (size_t i_0__ = 0; i_0__ < which_coef_xindex01_limit_0__; ++i_0__) {
                which_coef_xindex01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2020;
            context__.validate_dims("data initialization", "sum_size_which_interactions01", "int", context__.to_vec());
            sum_size_which_interactions01 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_interactions01");
            pos__ = 0;
            sum_size_which_interactions01 = vals_i__[pos__++];
            current_statement_begin__ = 2024;
            validate_non_negative_index("size_which_interactions01", "(M * 4)", (M * 4));
            context__.validate_dims("data initialization", "size_which_interactions01", "int", context__.to_vec((M * 4)));
            validate_non_negative_index("size_which_interactions01", "(M * 4)", (M * 4));
            size_which_interactions01 = std::vector<int>((M * 4),int(0));
            vals_i__ = context__.vals_i("size_which_interactions01");
            pos__ = 0;
            size_t size_which_interactions01_limit_0__ = (M * 4);
            for (size_t i_0__ = 0; i_0__ < size_which_interactions01_limit_0__; ++i_0__) {
                size_which_interactions01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2027;
            validate_non_negative_index("which_interactions01", "sum_size_which_interactions01", sum_size_which_interactions01);
            context__.validate_dims("data initialization", "which_interactions01", "int", context__.to_vec(sum_size_which_interactions01));
            validate_non_negative_index("which_interactions01", "sum_size_which_interactions01", sum_size_which_interactions01);
            which_interactions01 = std::vector<int>(sum_size_which_interactions01,int(0));
            vals_i__ = context__.vals_i("which_interactions01");
            pos__ = 0;
            size_t which_interactions01_limit_0__ = sum_size_which_interactions01;
            for (size_t i_0__ = 0; i_0__ < which_interactions01_limit_0__; ++i_0__) {
                which_interactions01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2030;
            validate_non_negative_index("y_qrows01", "3", 3);
            context__.validate_dims("data initialization", "y_qrows01", "int", context__.to_vec(3));
            validate_non_negative_index("y_qrows01", "3", 3);
            y_qrows01 = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("y_qrows01");
            pos__ = 0;
            size_t y_qrows01_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < y_qrows01_limit_0__; ++i_0__) {
                y_qrows01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2036;
            validate_non_negative_index("y1_x_eta_01", "(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y1_x_eta_01", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_eta_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_eta_01", "(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y1_x_eta_01", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_eta_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_eta_01");
            pos__ = 0;
            size_t y1_x_eta_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            size_t y1_x_eta_01_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_eta_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_eta_01_m_mat_lim__; ++m_mat__) {
                    y1_x_eta_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2037;
            validate_non_negative_index("y2_x_eta_01", "(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y2_x_eta_01", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_eta_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_eta_01", "(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y2_x_eta_01", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_eta_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_eta_01");
            pos__ = 0;
            size_t y2_x_eta_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            size_t y2_x_eta_01_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_eta_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_eta_01_m_mat_lim__; ++m_mat__) {
                    y2_x_eta_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2038;
            validate_non_negative_index("y3_x_eta_01", "(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y3_x_eta_01", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_eta_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_eta_01", "(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y3_x_eta_01", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_eta_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_eta_01");
            pos__ = 0;
            size_t y3_x_eta_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            size_t y3_x_eta_01_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_eta_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_eta_01_m_mat_lim__; ++m_mat__) {
                    y3_x_eta_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2042;
            validate_non_negative_index("y1_z1_eta_01", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_eta_01", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y1_z1_eta_01", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            y1_z1_eta_01 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_eta_01");
            pos__ = 0;
            size_t y1_z1_eta_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_eta_01_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_eta_01_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_eta_01_limit_0__; ++i_0__) {
                    y1_z1_eta_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2043;
            validate_non_negative_index("y2_z1_eta_01", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_eta_01", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y2_z1_eta_01", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            y2_z1_eta_01 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_eta_01");
            pos__ = 0;
            size_t y2_z1_eta_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_eta_01_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_eta_01_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_eta_01_limit_0__; ++i_0__) {
                    y2_z1_eta_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2044;
            validate_non_negative_index("y3_z1_eta_01", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_eta_01", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y3_z1_eta_01", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            y3_z1_eta_01 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_eta_01");
            pos__ = 0;
            size_t y3_z1_eta_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_eta_01_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_eta_01_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_eta_01_limit_0__; ++i_0__) {
                    y3_z1_eta_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2048;
            validate_non_negative_index("y1_z2_eta_01", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_eta_01", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y1_z2_eta_01", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            y1_z2_eta_01 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_eta_01");
            pos__ = 0;
            size_t y1_z2_eta_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_eta_01_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_eta_01_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_eta_01_limit_0__; ++i_0__) {
                    y1_z2_eta_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2049;
            validate_non_negative_index("y2_z2_eta_01", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_eta_01", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y2_z2_eta_01", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            y2_z2_eta_01 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_eta_01");
            pos__ = 0;
            size_t y2_z2_eta_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_eta_01_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_eta_01_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_eta_01_limit_0__; ++i_0__) {
                    y2_z2_eta_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2050;
            validate_non_negative_index("y3_z2_eta_01", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_eta_01", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y3_z2_eta_01", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            y3_z2_eta_01 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_eta_01");
            pos__ = 0;
            size_t y3_z2_eta_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_eta_01_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_eta_01_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_eta_01_limit_0__; ++i_0__) {
                    y3_z2_eta_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2054;
            validate_non_negative_index("y1_z1_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_eta_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y1_z1_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            y1_z1_id_eta_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_eta_01");
            pos__ = 0;
            size_t y1_z1_id_eta_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_eta_01_limit_0__; ++i_0__) {
                y1_z1_id_eta_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2055;
            validate_non_negative_index("y2_z1_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_eta_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y2_z1_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            y2_z1_id_eta_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_eta_01");
            pos__ = 0;
            size_t y2_z1_id_eta_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_eta_01_limit_0__; ++i_0__) {
                y2_z1_id_eta_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2056;
            validate_non_negative_index("y3_z1_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_eta_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y3_z1_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            y3_z1_id_eta_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_eta_01");
            pos__ = 0;
            size_t y3_z1_id_eta_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_eta_01_limit_0__; ++i_0__) {
                y3_z1_id_eta_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2060;
            validate_non_negative_index("y1_z2_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_eta_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y1_z2_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            y1_z2_id_eta_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_eta_01");
            pos__ = 0;
            size_t y1_z2_id_eta_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_eta_01_limit_0__; ++i_0__) {
                y1_z2_id_eta_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2061;
            validate_non_negative_index("y2_z2_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_eta_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y2_z2_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            y2_z2_id_eta_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_eta_01");
            pos__ = 0;
            size_t y2_z2_id_eta_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_eta_01_limit_0__; ++i_0__) {
                y2_z2_id_eta_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2062;
            validate_non_negative_index("y3_z2_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_eta_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y3_z2_id_eta_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            y3_z2_id_eta_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_eta_01");
            pos__ = 0;
            size_t y3_z2_id_eta_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_eta_01_limit_0__; ++i_0__) {
                y3_z2_id_eta_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2068;
            validate_non_negative_index("y1_x_eps_01", "(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y1_x_eps_01", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_eps_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_eps_01", "(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y1_x_eps_01", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_eps_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_eps_01");
            pos__ = 0;
            size_t y1_x_eps_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            size_t y1_x_eps_01_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_eps_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_eps_01_m_mat_lim__; ++m_mat__) {
                    y1_x_eps_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2069;
            validate_non_negative_index("y2_x_eps_01", "(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y2_x_eps_01", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_eps_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_eps_01", "(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y2_x_eps_01", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_eps_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_eps_01");
            pos__ = 0;
            size_t y2_x_eps_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            size_t y2_x_eps_01_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_eps_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_eps_01_m_mat_lim__; ++m_mat__) {
                    y2_x_eps_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2070;
            validate_non_negative_index("y3_x_eps_01", "(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y3_x_eps_01", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_eps_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_eps_01", "(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            validate_non_negative_index("y3_x_eps_01", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_eps_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_eps_01");
            pos__ = 0;
            size_t y3_x_eps_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            size_t y3_x_eps_01_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_eps_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_eps_01_m_mat_lim__; ++m_mat__) {
                    y3_x_eps_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2074;
            validate_non_negative_index("y1_z1_eps_01", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_eps_01", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y1_z1_eps_01", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            y1_z1_eps_01 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_eps_01");
            pos__ = 0;
            size_t y1_z1_eps_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_eps_01_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_eps_01_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_eps_01_limit_0__; ++i_0__) {
                    y1_z1_eps_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2075;
            validate_non_negative_index("y2_z1_eps_01", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_eps_01", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y2_z1_eps_01", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            y2_z1_eps_01 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_eps_01");
            pos__ = 0;
            size_t y2_z1_eps_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_eps_01_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_eps_01_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_eps_01_limit_0__; ++i_0__) {
                    y2_z1_eps_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2076;
            validate_non_negative_index("y3_z1_eps_01", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_eps_01", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y3_z1_eps_01", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            y3_z1_eps_01 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_eps_01");
            pos__ = 0;
            size_t y3_z1_eps_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_eps_01_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_eps_01_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_eps_01_limit_0__; ++i_0__) {
                    y3_z1_eps_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2080;
            validate_non_negative_index("y1_z2_eps_01", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_eps_01", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y1_z2_eps_01", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            y1_z2_eps_01 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_eps_01");
            pos__ = 0;
            size_t y1_z2_eps_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_eps_01_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_eps_01_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_eps_01_limit_0__; ++i_0__) {
                    y1_z2_eps_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2081;
            validate_non_negative_index("y2_z2_eps_01", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_eps_01", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y2_z2_eps_01", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            y2_z2_eps_01 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_eps_01");
            pos__ = 0;
            size_t y2_z2_eps_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_eps_01_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_eps_01_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_eps_01_limit_0__; ++i_0__) {
                    y2_z2_eps_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2082;
            validate_non_negative_index("y3_z2_eps_01", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_eps_01", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y3_z2_eps_01", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            y3_z2_eps_01 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_eps_01");
            pos__ = 0;
            size_t y3_z2_eps_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_eps_01_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_eps_01_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_eps_01_limit_0__; ++i_0__) {
                    y3_z2_eps_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2086;
            validate_non_negative_index("y1_z1_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_eps_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y1_z1_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            y1_z1_id_eps_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_eps_01");
            pos__ = 0;
            size_t y1_z1_id_eps_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_eps_01_limit_0__; ++i_0__) {
                y1_z1_id_eps_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2087;
            validate_non_negative_index("y2_z1_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_eps_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y2_z1_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            y2_z1_id_eps_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_eps_01");
            pos__ = 0;
            size_t y2_z1_id_eps_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_eps_01_limit_0__; ++i_0__) {
                y2_z1_id_eps_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2088;
            validate_non_negative_index("y3_z1_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_eps_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y3_z1_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            y3_z1_id_eps_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_eps_01");
            pos__ = 0;
            size_t y3_z1_id_eps_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_eps_01_limit_0__; ++i_0__) {
                y3_z1_id_eps_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2092;
            validate_non_negative_index("y1_z2_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_eps_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y1_z2_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows01,1,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ));
            y1_z2_id_eps_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_eps_01");
            pos__ = 0;
            size_t y1_z2_id_eps_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_eps_01_limit_0__; ++i_0__) {
                y1_z2_id_eps_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2093;
            validate_non_negative_index("y2_z2_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_eps_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y2_z2_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows01,2,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ));
            y2_z2_id_eps_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_eps_01");
            pos__ = 0;
            size_t y2_z2_id_eps_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_eps_01_limit_0__; ++i_0__) {
                y2_z2_id_eps_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2094;
            validate_non_negative_index("y3_z2_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_eps_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 )));
            validate_non_negative_index("y3_z2_id_eps_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows01,3,\"y_qrows01\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ));
            y3_z2_id_eps_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_eps_01");
            pos__ = 0;
            size_t y3_z2_id_eps_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_eps_01_limit_0__; ++i_0__) {
                y3_z2_id_eps_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2098;
            context__.validate_dims("data initialization", "auc_qnodes01", "int", context__.to_vec());
            auc_qnodes01 = int(0);
            vals_i__ = context__.vals_i("auc_qnodes01");
            pos__ = 0;
            auc_qnodes01 = vals_i__[pos__++];
            current_statement_begin__ = 2099;
            context__.validate_dims("data initialization", "y_qrows_for_auc01", "int", context__.to_vec());
            y_qrows_for_auc01 = int(0);
            vals_i__ = context__.vals_i("y_qrows_for_auc01");
            pos__ = 0;
            y_qrows_for_auc01 = vals_i__[pos__++];
            current_statement_begin__ = 2100;
            validate_non_negative_index("auc_qwts01", "(logical_gt(sum(stan::model::rvalue(assoc_uses01, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), \"assoc_uses01\")),0) ? y_qrows_for_auc01 : 0 )", (logical_gt(sum(stan::model::rvalue(assoc_uses01, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses01")),0) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "auc_qwts01", "vector_d", context__.to_vec((logical_gt(sum(stan::model::rvalue(assoc_uses01, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses01")),0) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("auc_qwts01", "(logical_gt(sum(stan::model::rvalue(assoc_uses01, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), \"assoc_uses01\")),0) ? y_qrows_for_auc01 : 0 )", (logical_gt(sum(stan::model::rvalue(assoc_uses01, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses01")),0) ? y_qrows_for_auc01 : 0 ));
            auc_qwts01 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(sum(stan::model::rvalue(assoc_uses01, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses01")),0) ? y_qrows_for_auc01 : 0 )));
            vals_r__ = context__.vals_r("auc_qwts01");
            pos__ = 0;
            size_t auc_qwts01_i_vec_lim__ = (logical_gt(sum(stan::model::rvalue(assoc_uses01, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses01")),0) ? y_qrows_for_auc01 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < auc_qwts01_i_vec_lim__; ++i_vec__) {
                auc_qwts01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2104;
            validate_non_negative_index("y1_x_auc_01", "(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1) ? y_qrows_for_auc01 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ));
            validate_non_negative_index("y1_x_auc_01", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_auc_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_auc_01", "(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1) ? y_qrows_for_auc01 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ));
            validate_non_negative_index("y1_x_auc_01", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_auc_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_auc_01");
            pos__ = 0;
            size_t y1_x_auc_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 );
            size_t y1_x_auc_01_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_auc_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_auc_01_m_mat_lim__; ++m_mat__) {
                    y1_x_auc_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2105;
            validate_non_negative_index("y2_x_auc_01", "(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1) ? y_qrows_for_auc01 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ));
            validate_non_negative_index("y2_x_auc_01", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_auc_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_auc_01", "(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1) ? y_qrows_for_auc01 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ));
            validate_non_negative_index("y2_x_auc_01", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_auc_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_auc_01");
            pos__ = 0;
            size_t y2_x_auc_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 );
            size_t y2_x_auc_01_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_auc_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_auc_01_m_mat_lim__; ++m_mat__) {
                    y2_x_auc_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2106;
            validate_non_negative_index("y3_x_auc_01", "(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1) ? y_qrows_for_auc01 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ));
            validate_non_negative_index("y3_x_auc_01", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_auc_01", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_auc_01", "(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1) ? y_qrows_for_auc01 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 ));
            validate_non_negative_index("y3_x_auc_01", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_auc_01 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_auc_01");
            pos__ = 0;
            size_t y3_x_auc_01_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1) ? y_qrows_for_auc01 : 0 );
            size_t y3_x_auc_01_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_auc_01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_auc_01_m_mat_lim__; ++m_mat__) {
                    y3_x_auc_01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2110;
            validate_non_negative_index("y1_z1_auc_01", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y1_z1_auc_01", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y1_z1_auc_01", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y1_z1_auc_01 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_auc_01");
            pos__ = 0;
            size_t y1_z1_auc_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_auc_01_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_auc_01_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_auc_01_limit_0__; ++i_0__) {
                    y1_z1_auc_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2111;
            validate_non_negative_index("y2_z1_auc_01", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y2_z1_auc_01", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y2_z1_auc_01", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y2_z1_auc_01 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_auc_01");
            pos__ = 0;
            size_t y2_z1_auc_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_auc_01_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_auc_01_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_auc_01_limit_0__; ++i_0__) {
                    y2_z1_auc_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2112;
            validate_non_negative_index("y3_z1_auc_01", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y3_z1_auc_01", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y3_z1_auc_01", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y3_z1_auc_01 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_auc_01");
            pos__ = 0;
            size_t y3_z1_auc_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_auc_01_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_auc_01_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_auc_01_limit_0__; ++i_0__) {
                    y3_z1_auc_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2116;
            validate_non_negative_index("y1_z2_auc_01", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y1_z2_auc_01", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y1_z2_auc_01", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y1_z2_auc_01 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_auc_01");
            pos__ = 0;
            size_t y1_z2_auc_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_auc_01_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_auc_01_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_auc_01_limit_0__; ++i_0__) {
                    y1_z2_auc_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2117;
            validate_non_negative_index("y2_z2_auc_01", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y2_z2_auc_01", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y2_z2_auc_01", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y2_z2_auc_01 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_auc_01");
            pos__ = 0;
            size_t y2_z2_auc_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_auc_01_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_auc_01_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_auc_01_limit_0__; ++i_0__) {
                    y2_z2_auc_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2118;
            validate_non_negative_index("y3_z2_auc_01", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y3_z2_auc_01", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y3_z2_auc_01", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y3_z2_auc_01 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_auc_01");
            pos__ = 0;
            size_t y3_z2_auc_01_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_auc_01_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_auc_01_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_auc_01_limit_0__; ++i_0__) {
                    y3_z2_auc_01[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2122;
            validate_non_negative_index("y1_z1_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_auc_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y1_z1_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y1_z1_id_auc_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_auc_01");
            pos__ = 0;
            size_t y1_z1_id_auc_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_auc_01_limit_0__; ++i_0__) {
                y1_z1_id_auc_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2123;
            validate_non_negative_index("y2_z1_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_auc_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y2_z1_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y2_z1_id_auc_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_auc_01");
            pos__ = 0;
            size_t y2_z1_id_auc_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_auc_01_limit_0__; ++i_0__) {
                y2_z1_id_auc_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2124;
            validate_non_negative_index("y3_z1_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_auc_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y3_z1_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y3_z1_id_auc_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_auc_01");
            pos__ = 0;
            size_t y3_z1_id_auc_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_auc_01_limit_0__; ++i_0__) {
                y3_z1_id_auc_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2128;
            validate_non_negative_index("y1_z2_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_auc_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y1_z2_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),1,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y1_z2_id_auc_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_auc_01");
            pos__ = 0;
            size_t y1_z2_id_auc_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_auc_01_limit_0__; ++i_0__) {
                y1_z2_id_auc_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2129;
            validate_non_negative_index("y2_z2_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_auc_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y2_z2_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),2,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y2_z2_id_auc_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_auc_01");
            pos__ = 0;
            size_t y2_z2_id_auc_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_auc_01_limit_0__; ++i_0__) {
                y2_z2_id_auc_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2130;
            validate_non_negative_index("y3_z2_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_auc_01", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 )));
            validate_non_negative_index("y3_z2_id_auc_01", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,\"assoc_uses01\",1),3,\"assoc_uses01\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc01 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ));
            y3_z2_id_auc_01 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_auc_01");
            pos__ = 0;
            size_t y3_z2_id_auc_01_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_auc_01_limit_0__; ++i_0__) {
                y3_z2_id_auc_01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2135;
            validate_non_negative_index("a_K_data01", "(M * 4)", (M * 4));
            context__.validate_dims("data initialization", "a_K_data01", "int", context__.to_vec((M * 4)));
            validate_non_negative_index("a_K_data01", "(M * 4)", (M * 4));
            a_K_data01 = std::vector<int>((M * 4),int(0));
            vals_i__ = context__.vals_i("a_K_data01");
            pos__ = 0;
            size_t a_K_data01_limit_0__ = (M * 4);
            for (size_t i_0__ = 0; i_0__ < a_K_data01_limit_0__; ++i_0__) {
                a_K_data01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2138;
            validate_non_negative_index("y_x_data01", "sum(stan::model::rvalue(y_qrows01, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), \"y_qrows01\"))", sum(stan::model::rvalue(y_qrows01, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows01")));
            validate_non_negative_index("y_x_data01", "sum(a_K_data01)", sum(a_K_data01));
            context__.validate_dims("data initialization", "y_x_data01", "matrix_d", context__.to_vec(sum(stan::model::rvalue(y_qrows01, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows01")),sum(a_K_data01)));
            validate_non_negative_index("y_x_data01", "sum(stan::model::rvalue(y_qrows01, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), \"y_qrows01\"))", sum(stan::model::rvalue(y_qrows01, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows01")));
            validate_non_negative_index("y_x_data01", "sum(a_K_data01)", sum(a_K_data01));
            y_x_data01 = matrix_d(static_cast<Eigen::VectorXd::Index>(sum(stan::model::rvalue(y_qrows01, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows01"))),static_cast<Eigen::VectorXd::Index>(sum(a_K_data01)));
            vals_r__ = context__.vals_r("y_x_data01");
            pos__ = 0;
            size_t y_x_data01_m_mat_lim__ = sum(stan::model::rvalue(y_qrows01, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows01"));
            size_t y_x_data01_n_mat_lim__ = sum(a_K_data01);
            for (size_t n_mat__ = 0; n_mat__ < y_x_data01_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y_x_data01_m_mat_lim__; ++m_mat__) {
                    y_x_data01(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2141;
            validate_non_negative_index("idx_data01", "3", 3);
            validate_non_negative_index("idx_data01", "2", 2);
            context__.validate_dims("data initialization", "idx_data01", "int", context__.to_vec(3,2));
            validate_non_negative_index("idx_data01", "3", 3);
            validate_non_negative_index("idx_data01", "2", 2);
            idx_data01 = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_data01");
            pos__ = 0;
            size_t idx_data01_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_data01_limit_1__; ++i_1__) {
                size_t idx_data01_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < idx_data01_limit_0__; ++i_0__) {
                    idx_data01[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2145;
            validate_non_negative_index("has_grp01", "M", M);
            context__.validate_dims("data initialization", "has_grp01", "int", context__.to_vec(M));
            validate_non_negative_index("has_grp01", "M", M);
            has_grp01 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("has_grp01");
            pos__ = 0;
            size_t has_grp01_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < has_grp01_limit_0__; ++i_0__) {
                has_grp01[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2146;
            context__.validate_dims("data initialization", "grp_assoc01", "int", context__.to_vec());
            grp_assoc01 = int(0);
            vals_i__ = context__.vals_i("grp_assoc01");
            pos__ = 0;
            grp_assoc01 = vals_i__[pos__++];
            current_statement_begin__ = 2147;
            validate_non_negative_index("idx_grp01", "len_cpts01", len_cpts01);
            validate_non_negative_index("idx_grp01", "2", 2);
            context__.validate_dims("data initialization", "idx_grp01", "int", context__.to_vec(len_cpts01,2));
            validate_non_negative_index("idx_grp01", "len_cpts01", len_cpts01);
            validate_non_negative_index("idx_grp01", "2", 2);
            idx_grp01 = std::vector<std::vector<int> >(len_cpts01,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_grp01");
            pos__ = 0;
            size_t idx_grp01_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_grp01_limit_1__; ++i_1__) {
                size_t idx_grp01_limit_0__ = len_cpts01;
                for (size_t i_0__ = 0; i_0__ < idx_grp01_limit_0__; ++i_0__) {
                    idx_grp01[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2157;
            context__.validate_dims("data initialization", "a_prior_dist02", "int", context__.to_vec());
            a_prior_dist02 = int(0);
            vals_i__ = context__.vals_i("a_prior_dist02");
            pos__ = 0;
            a_prior_dist02 = vals_i__[pos__++];
            current_statement_begin__ = 2162;
            context__.validate_dims("data initialization", "a_K02", "int", context__.to_vec());
            a_K02 = int(0);
            vals_i__ = context__.vals_i("a_K02");
            pos__ = 0;
            a_K02 = vals_i__[pos__++];
            current_statement_begin__ = 2165;
            validate_non_negative_index("a_xbar02", "a_K02", a_K02);
            context__.validate_dims("data initialization", "a_xbar02", "vector_d", context__.to_vec(a_K02));
            validate_non_negative_index("a_xbar02", "a_K02", a_K02);
            a_xbar02 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K02));
            vals_r__ = context__.vals_r("a_xbar02");
            pos__ = 0;
            size_t a_xbar02_i_vec_lim__ = a_K02;
            for (size_t i_vec__ = 0; i_vec__ < a_xbar02_i_vec_lim__; ++i_vec__) {
                a_xbar02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2168;
            context__.validate_dims("data initialization", "assoc02", "int", context__.to_vec());
            assoc02 = int(0);
            vals_i__ = context__.vals_i("assoc02");
            pos__ = 0;
            assoc02 = vals_i__[pos__++];
            current_statement_begin__ = 2171;
            validate_non_negative_index("assoc_uses02", "6", 6);
            validate_non_negative_index("assoc_uses02", "3", 3);
            context__.validate_dims("data initialization", "assoc_uses02", "int", context__.to_vec(6,3));
            validate_non_negative_index("assoc_uses02", "6", 6);
            validate_non_negative_index("assoc_uses02", "3", 3);
            assoc_uses02 = std::vector<std::vector<int> >(6,std::vector<int>(3,int(0)));
            vals_i__ = context__.vals_i("assoc_uses02");
            pos__ = 0;
            size_t assoc_uses02_limit_1__ = 3;
            for (size_t i_1__ = 0; i_1__ < assoc_uses02_limit_1__; ++i_1__) {
                size_t assoc_uses02_limit_0__ = 6;
                for (size_t i_0__ = 0; i_0__ < assoc_uses02_limit_0__; ++i_0__) {
                    assoc_uses02[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2174;
            validate_non_negative_index("has_assoc02", "16", 16);
            validate_non_negative_index("has_assoc02", "M", M);
            context__.validate_dims("data initialization", "has_assoc02", "int", context__.to_vec(16,M));
            validate_non_negative_index("has_assoc02", "16", 16);
            validate_non_negative_index("has_assoc02", "M", M);
            has_assoc02 = std::vector<std::vector<int> >(16,std::vector<int>(M,int(0)));
            vals_i__ = context__.vals_i("has_assoc02");
            pos__ = 0;
            size_t has_assoc02_limit_1__ = M;
            for (size_t i_1__ = 0; i_1__ < has_assoc02_limit_1__; ++i_1__) {
                size_t has_assoc02_limit_0__ = 16;
                for (size_t i_0__ = 0; i_0__ < has_assoc02_limit_0__; ++i_0__) {
                    has_assoc02[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2177;
            context__.validate_dims("data initialization", "sum_size_which_b02", "int", context__.to_vec());
            sum_size_which_b02 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_b02");
            pos__ = 0;
            sum_size_which_b02 = vals_i__[pos__++];
            current_statement_begin__ = 2180;
            validate_non_negative_index("size_which_b02", "M", M);
            context__.validate_dims("data initialization", "size_which_b02", "int", context__.to_vec(M));
            validate_non_negative_index("size_which_b02", "M", M);
            size_which_b02 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("size_which_b02");
            pos__ = 0;
            size_t size_which_b02_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < size_which_b02_limit_0__; ++i_0__) {
                size_which_b02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2183;
            validate_non_negative_index("which_b_zindex02", "sum_size_which_b02", sum_size_which_b02);
            context__.validate_dims("data initialization", "which_b_zindex02", "int", context__.to_vec(sum_size_which_b02));
            validate_non_negative_index("which_b_zindex02", "sum_size_which_b02", sum_size_which_b02);
            which_b_zindex02 = std::vector<int>(sum_size_which_b02,int(0));
            vals_i__ = context__.vals_i("which_b_zindex02");
            pos__ = 0;
            size_t which_b_zindex02_limit_0__ = sum_size_which_b02;
            for (size_t i_0__ = 0; i_0__ < which_b_zindex02_limit_0__; ++i_0__) {
                which_b_zindex02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2186;
            context__.validate_dims("data initialization", "sum_size_which_coef02", "int", context__.to_vec());
            sum_size_which_coef02 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_coef02");
            pos__ = 0;
            sum_size_which_coef02 = vals_i__[pos__++];
            current_statement_begin__ = 2189;
            validate_non_negative_index("size_which_coef02", "M", M);
            context__.validate_dims("data initialization", "size_which_coef02", "int", context__.to_vec(M));
            validate_non_negative_index("size_which_coef02", "M", M);
            size_which_coef02 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("size_which_coef02");
            pos__ = 0;
            size_t size_which_coef02_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < size_which_coef02_limit_0__; ++i_0__) {
                size_which_coef02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2192;
            validate_non_negative_index("which_coef_zindex02", "sum_size_which_coef02", sum_size_which_coef02);
            context__.validate_dims("data initialization", "which_coef_zindex02", "int", context__.to_vec(sum_size_which_coef02));
            validate_non_negative_index("which_coef_zindex02", "sum_size_which_coef02", sum_size_which_coef02);
            which_coef_zindex02 = std::vector<int>(sum_size_which_coef02,int(0));
            vals_i__ = context__.vals_i("which_coef_zindex02");
            pos__ = 0;
            size_t which_coef_zindex02_limit_0__ = sum_size_which_coef02;
            for (size_t i_0__ = 0; i_0__ < which_coef_zindex02_limit_0__; ++i_0__) {
                which_coef_zindex02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2195;
            validate_non_negative_index("which_coef_xindex02", "sum_size_which_coef02", sum_size_which_coef02);
            context__.validate_dims("data initialization", "which_coef_xindex02", "int", context__.to_vec(sum_size_which_coef02));
            validate_non_negative_index("which_coef_xindex02", "sum_size_which_coef02", sum_size_which_coef02);
            which_coef_xindex02 = std::vector<int>(sum_size_which_coef02,int(0));
            vals_i__ = context__.vals_i("which_coef_xindex02");
            pos__ = 0;
            size_t which_coef_xindex02_limit_0__ = sum_size_which_coef02;
            for (size_t i_0__ = 0; i_0__ < which_coef_xindex02_limit_0__; ++i_0__) {
                which_coef_xindex02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2198;
            context__.validate_dims("data initialization", "sum_size_which_interactions02", "int", context__.to_vec());
            sum_size_which_interactions02 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_interactions02");
            pos__ = 0;
            sum_size_which_interactions02 = vals_i__[pos__++];
            current_statement_begin__ = 2202;
            validate_non_negative_index("size_which_interactions02", "(M * 4)", (M * 4));
            context__.validate_dims("data initialization", "size_which_interactions02", "int", context__.to_vec((M * 4)));
            validate_non_negative_index("size_which_interactions02", "(M * 4)", (M * 4));
            size_which_interactions02 = std::vector<int>((M * 4),int(0));
            vals_i__ = context__.vals_i("size_which_interactions02");
            pos__ = 0;
            size_t size_which_interactions02_limit_0__ = (M * 4);
            for (size_t i_0__ = 0; i_0__ < size_which_interactions02_limit_0__; ++i_0__) {
                size_which_interactions02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2205;
            validate_non_negative_index("which_interactions02", "sum_size_which_interactions02", sum_size_which_interactions02);
            context__.validate_dims("data initialization", "which_interactions02", "int", context__.to_vec(sum_size_which_interactions02));
            validate_non_negative_index("which_interactions02", "sum_size_which_interactions02", sum_size_which_interactions02);
            which_interactions02 = std::vector<int>(sum_size_which_interactions02,int(0));
            vals_i__ = context__.vals_i("which_interactions02");
            pos__ = 0;
            size_t which_interactions02_limit_0__ = sum_size_which_interactions02;
            for (size_t i_0__ = 0; i_0__ < which_interactions02_limit_0__; ++i_0__) {
                which_interactions02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2208;
            validate_non_negative_index("y_qrows02", "3", 3);
            context__.validate_dims("data initialization", "y_qrows02", "int", context__.to_vec(3));
            validate_non_negative_index("y_qrows02", "3", 3);
            y_qrows02 = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("y_qrows02");
            pos__ = 0;
            size_t y_qrows02_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < y_qrows02_limit_0__; ++i_0__) {
                y_qrows02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2214;
            validate_non_negative_index("y1_x_eta_02", "(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y1_x_eta_02", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_eta_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_eta_02", "(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y1_x_eta_02", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_eta_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_eta_02");
            pos__ = 0;
            size_t y1_x_eta_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            size_t y1_x_eta_02_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_eta_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_eta_02_m_mat_lim__; ++m_mat__) {
                    y1_x_eta_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2215;
            validate_non_negative_index("y2_x_eta_02", "(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y2_x_eta_02", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_eta_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_eta_02", "(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y2_x_eta_02", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_eta_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_eta_02");
            pos__ = 0;
            size_t y2_x_eta_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            size_t y2_x_eta_02_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_eta_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_eta_02_m_mat_lim__; ++m_mat__) {
                    y2_x_eta_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2216;
            validate_non_negative_index("y3_x_eta_02", "(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y3_x_eta_02", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_eta_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_eta_02", "(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y3_x_eta_02", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_eta_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_eta_02");
            pos__ = 0;
            size_t y3_x_eta_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            size_t y3_x_eta_02_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_eta_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_eta_02_m_mat_lim__; ++m_mat__) {
                    y3_x_eta_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2220;
            validate_non_negative_index("y1_z1_eta_02", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_eta_02", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y1_z1_eta_02", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            y1_z1_eta_02 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_eta_02");
            pos__ = 0;
            size_t y1_z1_eta_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_eta_02_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_eta_02_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_eta_02_limit_0__; ++i_0__) {
                    y1_z1_eta_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2221;
            validate_non_negative_index("y2_z1_eta_02", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_eta_02", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y2_z1_eta_02", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            y2_z1_eta_02 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_eta_02");
            pos__ = 0;
            size_t y2_z1_eta_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_eta_02_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_eta_02_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_eta_02_limit_0__; ++i_0__) {
                    y2_z1_eta_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2222;
            validate_non_negative_index("y3_z1_eta_02", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_eta_02", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y3_z1_eta_02", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            y3_z1_eta_02 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_eta_02");
            pos__ = 0;
            size_t y3_z1_eta_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_eta_02_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_eta_02_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_eta_02_limit_0__; ++i_0__) {
                    y3_z1_eta_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2226;
            validate_non_negative_index("y1_z2_eta_02", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_eta_02", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y1_z2_eta_02", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            y1_z2_eta_02 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_eta_02");
            pos__ = 0;
            size_t y1_z2_eta_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_eta_02_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_eta_02_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_eta_02_limit_0__; ++i_0__) {
                    y1_z2_eta_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2227;
            validate_non_negative_index("y2_z2_eta_02", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_eta_02", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y2_z2_eta_02", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            y2_z2_eta_02 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_eta_02");
            pos__ = 0;
            size_t y2_z2_eta_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_eta_02_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_eta_02_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_eta_02_limit_0__; ++i_0__) {
                    y2_z2_eta_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2228;
            validate_non_negative_index("y3_z2_eta_02", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_eta_02", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y3_z2_eta_02", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            y3_z2_eta_02 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_eta_02");
            pos__ = 0;
            size_t y3_z2_eta_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_eta_02_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_eta_02_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_eta_02_limit_0__; ++i_0__) {
                    y3_z2_eta_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2232;
            validate_non_negative_index("y1_z1_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_eta_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y1_z1_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            y1_z1_id_eta_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_eta_02");
            pos__ = 0;
            size_t y1_z1_id_eta_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_eta_02_limit_0__; ++i_0__) {
                y1_z1_id_eta_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2233;
            validate_non_negative_index("y2_z1_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_eta_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y2_z1_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            y2_z1_id_eta_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_eta_02");
            pos__ = 0;
            size_t y2_z1_id_eta_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_eta_02_limit_0__; ++i_0__) {
                y2_z1_id_eta_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2234;
            validate_non_negative_index("y3_z1_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_eta_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y3_z1_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            y3_z1_id_eta_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_eta_02");
            pos__ = 0;
            size_t y3_z1_id_eta_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_eta_02_limit_0__; ++i_0__) {
                y3_z1_id_eta_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2238;
            validate_non_negative_index("y1_z2_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_eta_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y1_z2_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            y1_z2_id_eta_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_eta_02");
            pos__ = 0;
            size_t y1_z2_id_eta_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_eta_02_limit_0__; ++i_0__) {
                y1_z2_id_eta_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2239;
            validate_non_negative_index("y2_z2_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_eta_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y2_z2_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            y2_z2_id_eta_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_eta_02");
            pos__ = 0;
            size_t y2_z2_id_eta_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_eta_02_limit_0__; ++i_0__) {
                y2_z2_id_eta_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2240;
            validate_non_negative_index("y3_z2_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_eta_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y3_z2_id_eta_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            y3_z2_id_eta_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_eta_02");
            pos__ = 0;
            size_t y3_z2_id_eta_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_eta_02_limit_0__; ++i_0__) {
                y3_z2_id_eta_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2246;
            validate_non_negative_index("y1_x_eps_02", "(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y1_x_eps_02", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_eps_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_eps_02", "(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y1_x_eps_02", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_eps_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_eps_02");
            pos__ = 0;
            size_t y1_x_eps_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            size_t y1_x_eps_02_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_eps_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_eps_02_m_mat_lim__; ++m_mat__) {
                    y1_x_eps_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2247;
            validate_non_negative_index("y2_x_eps_02", "(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y2_x_eps_02", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_eps_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_eps_02", "(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y2_x_eps_02", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_eps_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_eps_02");
            pos__ = 0;
            size_t y2_x_eps_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            size_t y2_x_eps_02_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_eps_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_eps_02_m_mat_lim__; ++m_mat__) {
                    y2_x_eps_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2248;
            validate_non_negative_index("y3_x_eps_02", "(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y3_x_eps_02", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_eps_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_eps_02", "(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            validate_non_negative_index("y3_x_eps_02", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_eps_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_eps_02");
            pos__ = 0;
            size_t y3_x_eps_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            size_t y3_x_eps_02_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_eps_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_eps_02_m_mat_lim__; ++m_mat__) {
                    y3_x_eps_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2252;
            validate_non_negative_index("y1_z1_eps_02", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_eps_02", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y1_z1_eps_02", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            y1_z1_eps_02 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_eps_02");
            pos__ = 0;
            size_t y1_z1_eps_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_eps_02_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_eps_02_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_eps_02_limit_0__; ++i_0__) {
                    y1_z1_eps_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2253;
            validate_non_negative_index("y2_z1_eps_02", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_eps_02", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y2_z1_eps_02", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            y2_z1_eps_02 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_eps_02");
            pos__ = 0;
            size_t y2_z1_eps_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_eps_02_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_eps_02_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_eps_02_limit_0__; ++i_0__) {
                    y2_z1_eps_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2254;
            validate_non_negative_index("y3_z1_eps_02", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_eps_02", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y3_z1_eps_02", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            y3_z1_eps_02 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_eps_02");
            pos__ = 0;
            size_t y3_z1_eps_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_eps_02_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_eps_02_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_eps_02_limit_0__; ++i_0__) {
                    y3_z1_eps_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2258;
            validate_non_negative_index("y1_z2_eps_02", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_eps_02", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y1_z2_eps_02", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            y1_z2_eps_02 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_eps_02");
            pos__ = 0;
            size_t y1_z2_eps_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_eps_02_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_eps_02_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_eps_02_limit_0__; ++i_0__) {
                    y1_z2_eps_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2259;
            validate_non_negative_index("y2_z2_eps_02", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_eps_02", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y2_z2_eps_02", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            y2_z2_eps_02 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_eps_02");
            pos__ = 0;
            size_t y2_z2_eps_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_eps_02_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_eps_02_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_eps_02_limit_0__; ++i_0__) {
                    y2_z2_eps_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2260;
            validate_non_negative_index("y3_z2_eps_02", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_eps_02", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y3_z2_eps_02", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            y3_z2_eps_02 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_eps_02");
            pos__ = 0;
            size_t y3_z2_eps_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_eps_02_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_eps_02_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_eps_02_limit_0__; ++i_0__) {
                    y3_z2_eps_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2264;
            validate_non_negative_index("y1_z1_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_eps_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y1_z1_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            y1_z1_id_eps_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_eps_02");
            pos__ = 0;
            size_t y1_z1_id_eps_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_eps_02_limit_0__; ++i_0__) {
                y1_z1_id_eps_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2265;
            validate_non_negative_index("y2_z1_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_eps_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y2_z1_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            y2_z1_id_eps_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_eps_02");
            pos__ = 0;
            size_t y2_z1_id_eps_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_eps_02_limit_0__; ++i_0__) {
                y2_z1_id_eps_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2266;
            validate_non_negative_index("y3_z1_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_eps_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y3_z1_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            y3_z1_id_eps_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_eps_02");
            pos__ = 0;
            size_t y3_z1_id_eps_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_eps_02_limit_0__; ++i_0__) {
                y3_z1_id_eps_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2270;
            validate_non_negative_index("y1_z2_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_eps_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y1_z2_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows02,1,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ));
            y1_z2_id_eps_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_eps_02");
            pos__ = 0;
            size_t y1_z2_id_eps_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_eps_02_limit_0__; ++i_0__) {
                y1_z2_id_eps_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2271;
            validate_non_negative_index("y2_z2_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_eps_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y2_z2_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows02,2,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ));
            y2_z2_id_eps_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_eps_02");
            pos__ = 0;
            size_t y2_z2_id_eps_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_eps_02_limit_0__; ++i_0__) {
                y2_z2_id_eps_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2272;
            validate_non_negative_index("y3_z2_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_eps_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 )));
            validate_non_negative_index("y3_z2_id_eps_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows02,3,\"y_qrows02\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ));
            y3_z2_id_eps_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_eps_02");
            pos__ = 0;
            size_t y3_z2_id_eps_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_eps_02_limit_0__; ++i_0__) {
                y3_z2_id_eps_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2276;
            context__.validate_dims("data initialization", "auc_qnodes02", "int", context__.to_vec());
            auc_qnodes02 = int(0);
            vals_i__ = context__.vals_i("auc_qnodes02");
            pos__ = 0;
            auc_qnodes02 = vals_i__[pos__++];
            current_statement_begin__ = 2277;
            context__.validate_dims("data initialization", "y_qrows_for_auc02", "int", context__.to_vec());
            y_qrows_for_auc02 = int(0);
            vals_i__ = context__.vals_i("y_qrows_for_auc02");
            pos__ = 0;
            y_qrows_for_auc02 = vals_i__[pos__++];
            current_statement_begin__ = 2278;
            validate_non_negative_index("auc_qwts02", "(logical_gt(sum(stan::model::rvalue(assoc_uses02, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), \"assoc_uses02\")),0) ? y_qrows_for_auc02 : 0 )", (logical_gt(sum(stan::model::rvalue(assoc_uses02, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses02")),0) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "auc_qwts02", "vector_d", context__.to_vec((logical_gt(sum(stan::model::rvalue(assoc_uses02, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses02")),0) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("auc_qwts02", "(logical_gt(sum(stan::model::rvalue(assoc_uses02, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), \"assoc_uses02\")),0) ? y_qrows_for_auc02 : 0 )", (logical_gt(sum(stan::model::rvalue(assoc_uses02, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses02")),0) ? y_qrows_for_auc02 : 0 ));
            auc_qwts02 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(sum(stan::model::rvalue(assoc_uses02, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses02")),0) ? y_qrows_for_auc02 : 0 )));
            vals_r__ = context__.vals_r("auc_qwts02");
            pos__ = 0;
            size_t auc_qwts02_i_vec_lim__ = (logical_gt(sum(stan::model::rvalue(assoc_uses02, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses02")),0) ? y_qrows_for_auc02 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < auc_qwts02_i_vec_lim__; ++i_vec__) {
                auc_qwts02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2282;
            validate_non_negative_index("y1_x_auc_02", "(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1) ? y_qrows_for_auc02 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ));
            validate_non_negative_index("y1_x_auc_02", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_auc_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_auc_02", "(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1) ? y_qrows_for_auc02 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ));
            validate_non_negative_index("y1_x_auc_02", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_auc_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_auc_02");
            pos__ = 0;
            size_t y1_x_auc_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 );
            size_t y1_x_auc_02_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_auc_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_auc_02_m_mat_lim__; ++m_mat__) {
                    y1_x_auc_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2283;
            validate_non_negative_index("y2_x_auc_02", "(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1) ? y_qrows_for_auc02 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ));
            validate_non_negative_index("y2_x_auc_02", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_auc_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_auc_02", "(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1) ? y_qrows_for_auc02 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ));
            validate_non_negative_index("y2_x_auc_02", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_auc_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_auc_02");
            pos__ = 0;
            size_t y2_x_auc_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 );
            size_t y2_x_auc_02_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_auc_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_auc_02_m_mat_lim__; ++m_mat__) {
                    y2_x_auc_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2284;
            validate_non_negative_index("y3_x_auc_02", "(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1) ? y_qrows_for_auc02 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ));
            validate_non_negative_index("y3_x_auc_02", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_auc_02", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_auc_02", "(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1) ? y_qrows_for_auc02 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 ));
            validate_non_negative_index("y3_x_auc_02", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_auc_02 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_auc_02");
            pos__ = 0;
            size_t y3_x_auc_02_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1) ? y_qrows_for_auc02 : 0 );
            size_t y3_x_auc_02_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_auc_02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_auc_02_m_mat_lim__; ++m_mat__) {
                    y3_x_auc_02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2288;
            validate_non_negative_index("y1_z1_auc_02", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y1_z1_auc_02", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y1_z1_auc_02", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y1_z1_auc_02 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_auc_02");
            pos__ = 0;
            size_t y1_z1_auc_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_auc_02_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_auc_02_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_auc_02_limit_0__; ++i_0__) {
                    y1_z1_auc_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2289;
            validate_non_negative_index("y2_z1_auc_02", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y2_z1_auc_02", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y2_z1_auc_02", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y2_z1_auc_02 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_auc_02");
            pos__ = 0;
            size_t y2_z1_auc_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_auc_02_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_auc_02_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_auc_02_limit_0__; ++i_0__) {
                    y2_z1_auc_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2290;
            validate_non_negative_index("y3_z1_auc_02", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y3_z1_auc_02", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y3_z1_auc_02", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y3_z1_auc_02 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_auc_02");
            pos__ = 0;
            size_t y3_z1_auc_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_auc_02_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_auc_02_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_auc_02_limit_0__; ++i_0__) {
                    y3_z1_auc_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2294;
            validate_non_negative_index("y1_z2_auc_02", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y1_z2_auc_02", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y1_z2_auc_02", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y1_z2_auc_02 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_auc_02");
            pos__ = 0;
            size_t y1_z2_auc_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_auc_02_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_auc_02_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_auc_02_limit_0__; ++i_0__) {
                    y1_z2_auc_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2295;
            validate_non_negative_index("y2_z2_auc_02", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y2_z2_auc_02", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y2_z2_auc_02", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y2_z2_auc_02 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_auc_02");
            pos__ = 0;
            size_t y2_z2_auc_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_auc_02_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_auc_02_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_auc_02_limit_0__; ++i_0__) {
                    y2_z2_auc_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2296;
            validate_non_negative_index("y3_z2_auc_02", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y3_z2_auc_02", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y3_z2_auc_02", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y3_z2_auc_02 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_auc_02");
            pos__ = 0;
            size_t y3_z2_auc_02_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_auc_02_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_auc_02_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_auc_02_limit_0__; ++i_0__) {
                    y3_z2_auc_02[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2300;
            validate_non_negative_index("y1_z1_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_auc_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y1_z1_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y1_z1_id_auc_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_auc_02");
            pos__ = 0;
            size_t y1_z1_id_auc_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_auc_02_limit_0__; ++i_0__) {
                y1_z1_id_auc_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2301;
            validate_non_negative_index("y2_z1_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_auc_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y2_z1_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y2_z1_id_auc_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_auc_02");
            pos__ = 0;
            size_t y2_z1_id_auc_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_auc_02_limit_0__; ++i_0__) {
                y2_z1_id_auc_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2302;
            validate_non_negative_index("y3_z1_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_auc_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y3_z1_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y3_z1_id_auc_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_auc_02");
            pos__ = 0;
            size_t y3_z1_id_auc_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_auc_02_limit_0__; ++i_0__) {
                y3_z1_id_auc_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2306;
            validate_non_negative_index("y1_z2_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_auc_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y1_z2_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),1,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y1_z2_id_auc_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_auc_02");
            pos__ = 0;
            size_t y1_z2_id_auc_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_auc_02_limit_0__; ++i_0__) {
                y1_z2_id_auc_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2307;
            validate_non_negative_index("y2_z2_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_auc_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y2_z2_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),2,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y2_z2_id_auc_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_auc_02");
            pos__ = 0;
            size_t y2_z2_id_auc_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_auc_02_limit_0__; ++i_0__) {
                y2_z2_id_auc_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2308;
            validate_non_negative_index("y3_z2_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_auc_02", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 )));
            validate_non_negative_index("y3_z2_id_auc_02", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,\"assoc_uses02\",1),3,\"assoc_uses02\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc02 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ));
            y3_z2_id_auc_02 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_auc_02");
            pos__ = 0;
            size_t y3_z2_id_auc_02_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_auc_02_limit_0__; ++i_0__) {
                y3_z2_id_auc_02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2313;
            validate_non_negative_index("a_K_data02", "(M * 4)", (M * 4));
            context__.validate_dims("data initialization", "a_K_data02", "int", context__.to_vec((M * 4)));
            validate_non_negative_index("a_K_data02", "(M * 4)", (M * 4));
            a_K_data02 = std::vector<int>((M * 4),int(0));
            vals_i__ = context__.vals_i("a_K_data02");
            pos__ = 0;
            size_t a_K_data02_limit_0__ = (M * 4);
            for (size_t i_0__ = 0; i_0__ < a_K_data02_limit_0__; ++i_0__) {
                a_K_data02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2316;
            validate_non_negative_index("y_x_data02", "sum(stan::model::rvalue(y_qrows02, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), \"y_qrows02\"))", sum(stan::model::rvalue(y_qrows02, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows02")));
            validate_non_negative_index("y_x_data02", "sum(a_K_data02)", sum(a_K_data02));
            context__.validate_dims("data initialization", "y_x_data02", "matrix_d", context__.to_vec(sum(stan::model::rvalue(y_qrows02, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows02")),sum(a_K_data02)));
            validate_non_negative_index("y_x_data02", "sum(stan::model::rvalue(y_qrows02, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), \"y_qrows02\"))", sum(stan::model::rvalue(y_qrows02, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows02")));
            validate_non_negative_index("y_x_data02", "sum(a_K_data02)", sum(a_K_data02));
            y_x_data02 = matrix_d(static_cast<Eigen::VectorXd::Index>(sum(stan::model::rvalue(y_qrows02, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows02"))),static_cast<Eigen::VectorXd::Index>(sum(a_K_data02)));
            vals_r__ = context__.vals_r("y_x_data02");
            pos__ = 0;
            size_t y_x_data02_m_mat_lim__ = sum(stan::model::rvalue(y_qrows02, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows02"));
            size_t y_x_data02_n_mat_lim__ = sum(a_K_data02);
            for (size_t n_mat__ = 0; n_mat__ < y_x_data02_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y_x_data02_m_mat_lim__; ++m_mat__) {
                    y_x_data02(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2319;
            validate_non_negative_index("idx_data02", "3", 3);
            validate_non_negative_index("idx_data02", "2", 2);
            context__.validate_dims("data initialization", "idx_data02", "int", context__.to_vec(3,2));
            validate_non_negative_index("idx_data02", "3", 3);
            validate_non_negative_index("idx_data02", "2", 2);
            idx_data02 = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_data02");
            pos__ = 0;
            size_t idx_data02_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_data02_limit_1__; ++i_1__) {
                size_t idx_data02_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < idx_data02_limit_0__; ++i_0__) {
                    idx_data02[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2323;
            validate_non_negative_index("has_grp02", "M", M);
            context__.validate_dims("data initialization", "has_grp02", "int", context__.to_vec(M));
            validate_non_negative_index("has_grp02", "M", M);
            has_grp02 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("has_grp02");
            pos__ = 0;
            size_t has_grp02_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < has_grp02_limit_0__; ++i_0__) {
                has_grp02[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2324;
            context__.validate_dims("data initialization", "grp_assoc02", "int", context__.to_vec());
            grp_assoc02 = int(0);
            vals_i__ = context__.vals_i("grp_assoc02");
            pos__ = 0;
            grp_assoc02 = vals_i__[pos__++];
            current_statement_begin__ = 2325;
            validate_non_negative_index("idx_grp02", "len_cpts02", len_cpts02);
            validate_non_negative_index("idx_grp02", "2", 2);
            context__.validate_dims("data initialization", "idx_grp02", "int", context__.to_vec(len_cpts02,2));
            validate_non_negative_index("idx_grp02", "len_cpts02", len_cpts02);
            validate_non_negative_index("idx_grp02", "2", 2);
            idx_grp02 = std::vector<std::vector<int> >(len_cpts02,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_grp02");
            pos__ = 0;
            size_t idx_grp02_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_grp02_limit_1__; ++i_1__) {
                size_t idx_grp02_limit_0__ = len_cpts02;
                for (size_t i_0__ = 0; i_0__ < idx_grp02_limit_0__; ++i_0__) {
                    idx_grp02[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2335;
            context__.validate_dims("data initialization", "a_prior_dist12", "int", context__.to_vec());
            a_prior_dist12 = int(0);
            vals_i__ = context__.vals_i("a_prior_dist12");
            pos__ = 0;
            a_prior_dist12 = vals_i__[pos__++];
            current_statement_begin__ = 2340;
            context__.validate_dims("data initialization", "a_K12", "int", context__.to_vec());
            a_K12 = int(0);
            vals_i__ = context__.vals_i("a_K12");
            pos__ = 0;
            a_K12 = vals_i__[pos__++];
            current_statement_begin__ = 2343;
            validate_non_negative_index("a_xbar12", "a_K12", a_K12);
            context__.validate_dims("data initialization", "a_xbar12", "vector_d", context__.to_vec(a_K12));
            validate_non_negative_index("a_xbar12", "a_K12", a_K12);
            a_xbar12 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K12));
            vals_r__ = context__.vals_r("a_xbar12");
            pos__ = 0;
            size_t a_xbar12_i_vec_lim__ = a_K12;
            for (size_t i_vec__ = 0; i_vec__ < a_xbar12_i_vec_lim__; ++i_vec__) {
                a_xbar12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2346;
            context__.validate_dims("data initialization", "assoc12", "int", context__.to_vec());
            assoc12 = int(0);
            vals_i__ = context__.vals_i("assoc12");
            pos__ = 0;
            assoc12 = vals_i__[pos__++];
            current_statement_begin__ = 2349;
            validate_non_negative_index("assoc_uses12", "6", 6);
            validate_non_negative_index("assoc_uses12", "3", 3);
            context__.validate_dims("data initialization", "assoc_uses12", "int", context__.to_vec(6,3));
            validate_non_negative_index("assoc_uses12", "6", 6);
            validate_non_negative_index("assoc_uses12", "3", 3);
            assoc_uses12 = std::vector<std::vector<int> >(6,std::vector<int>(3,int(0)));
            vals_i__ = context__.vals_i("assoc_uses12");
            pos__ = 0;
            size_t assoc_uses12_limit_1__ = 3;
            for (size_t i_1__ = 0; i_1__ < assoc_uses12_limit_1__; ++i_1__) {
                size_t assoc_uses12_limit_0__ = 6;
                for (size_t i_0__ = 0; i_0__ < assoc_uses12_limit_0__; ++i_0__) {
                    assoc_uses12[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2352;
            validate_non_negative_index("has_assoc12", "16", 16);
            validate_non_negative_index("has_assoc12", "M", M);
            context__.validate_dims("data initialization", "has_assoc12", "int", context__.to_vec(16,M));
            validate_non_negative_index("has_assoc12", "16", 16);
            validate_non_negative_index("has_assoc12", "M", M);
            has_assoc12 = std::vector<std::vector<int> >(16,std::vector<int>(M,int(0)));
            vals_i__ = context__.vals_i("has_assoc12");
            pos__ = 0;
            size_t has_assoc12_limit_1__ = M;
            for (size_t i_1__ = 0; i_1__ < has_assoc12_limit_1__; ++i_1__) {
                size_t has_assoc12_limit_0__ = 16;
                for (size_t i_0__ = 0; i_0__ < has_assoc12_limit_0__; ++i_0__) {
                    has_assoc12[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2355;
            context__.validate_dims("data initialization", "sum_size_which_b12", "int", context__.to_vec());
            sum_size_which_b12 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_b12");
            pos__ = 0;
            sum_size_which_b12 = vals_i__[pos__++];
            current_statement_begin__ = 2358;
            validate_non_negative_index("size_which_b12", "M", M);
            context__.validate_dims("data initialization", "size_which_b12", "int", context__.to_vec(M));
            validate_non_negative_index("size_which_b12", "M", M);
            size_which_b12 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("size_which_b12");
            pos__ = 0;
            size_t size_which_b12_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < size_which_b12_limit_0__; ++i_0__) {
                size_which_b12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2361;
            validate_non_negative_index("which_b_zindex12", "sum_size_which_b12", sum_size_which_b12);
            context__.validate_dims("data initialization", "which_b_zindex12", "int", context__.to_vec(sum_size_which_b12));
            validate_non_negative_index("which_b_zindex12", "sum_size_which_b12", sum_size_which_b12);
            which_b_zindex12 = std::vector<int>(sum_size_which_b12,int(0));
            vals_i__ = context__.vals_i("which_b_zindex12");
            pos__ = 0;
            size_t which_b_zindex12_limit_0__ = sum_size_which_b12;
            for (size_t i_0__ = 0; i_0__ < which_b_zindex12_limit_0__; ++i_0__) {
                which_b_zindex12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2364;
            context__.validate_dims("data initialization", "sum_size_which_coef12", "int", context__.to_vec());
            sum_size_which_coef12 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_coef12");
            pos__ = 0;
            sum_size_which_coef12 = vals_i__[pos__++];
            current_statement_begin__ = 2367;
            validate_non_negative_index("size_which_coef12", "M", M);
            context__.validate_dims("data initialization", "size_which_coef12", "int", context__.to_vec(M));
            validate_non_negative_index("size_which_coef12", "M", M);
            size_which_coef12 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("size_which_coef12");
            pos__ = 0;
            size_t size_which_coef12_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < size_which_coef12_limit_0__; ++i_0__) {
                size_which_coef12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2370;
            validate_non_negative_index("which_coef_zindex12", "sum_size_which_coef12", sum_size_which_coef12);
            context__.validate_dims("data initialization", "which_coef_zindex12", "int", context__.to_vec(sum_size_which_coef12));
            validate_non_negative_index("which_coef_zindex12", "sum_size_which_coef12", sum_size_which_coef12);
            which_coef_zindex12 = std::vector<int>(sum_size_which_coef12,int(0));
            vals_i__ = context__.vals_i("which_coef_zindex12");
            pos__ = 0;
            size_t which_coef_zindex12_limit_0__ = sum_size_which_coef12;
            for (size_t i_0__ = 0; i_0__ < which_coef_zindex12_limit_0__; ++i_0__) {
                which_coef_zindex12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2373;
            validate_non_negative_index("which_coef_xindex12", "sum_size_which_coef12", sum_size_which_coef12);
            context__.validate_dims("data initialization", "which_coef_xindex12", "int", context__.to_vec(sum_size_which_coef12));
            validate_non_negative_index("which_coef_xindex12", "sum_size_which_coef12", sum_size_which_coef12);
            which_coef_xindex12 = std::vector<int>(sum_size_which_coef12,int(0));
            vals_i__ = context__.vals_i("which_coef_xindex12");
            pos__ = 0;
            size_t which_coef_xindex12_limit_0__ = sum_size_which_coef12;
            for (size_t i_0__ = 0; i_0__ < which_coef_xindex12_limit_0__; ++i_0__) {
                which_coef_xindex12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2376;
            context__.validate_dims("data initialization", "sum_size_which_interactions12", "int", context__.to_vec());
            sum_size_which_interactions12 = int(0);
            vals_i__ = context__.vals_i("sum_size_which_interactions12");
            pos__ = 0;
            sum_size_which_interactions12 = vals_i__[pos__++];
            current_statement_begin__ = 2380;
            validate_non_negative_index("size_which_interactions12", "(M * 4)", (M * 4));
            context__.validate_dims("data initialization", "size_which_interactions12", "int", context__.to_vec((M * 4)));
            validate_non_negative_index("size_which_interactions12", "(M * 4)", (M * 4));
            size_which_interactions12 = std::vector<int>((M * 4),int(0));
            vals_i__ = context__.vals_i("size_which_interactions12");
            pos__ = 0;
            size_t size_which_interactions12_limit_0__ = (M * 4);
            for (size_t i_0__ = 0; i_0__ < size_which_interactions12_limit_0__; ++i_0__) {
                size_which_interactions12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2383;
            validate_non_negative_index("which_interactions12", "sum_size_which_interactions12", sum_size_which_interactions12);
            context__.validate_dims("data initialization", "which_interactions12", "int", context__.to_vec(sum_size_which_interactions12));
            validate_non_negative_index("which_interactions12", "sum_size_which_interactions12", sum_size_which_interactions12);
            which_interactions12 = std::vector<int>(sum_size_which_interactions12,int(0));
            vals_i__ = context__.vals_i("which_interactions12");
            pos__ = 0;
            size_t which_interactions12_limit_0__ = sum_size_which_interactions12;
            for (size_t i_0__ = 0; i_0__ < which_interactions12_limit_0__; ++i_0__) {
                which_interactions12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2386;
            validate_non_negative_index("y_qrows12", "3", 3);
            context__.validate_dims("data initialization", "y_qrows12", "int", context__.to_vec(3));
            validate_non_negative_index("y_qrows12", "3", 3);
            y_qrows12 = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("y_qrows12");
            pos__ = 0;
            size_t y_qrows12_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < y_qrows12_limit_0__; ++i_0__) {
                y_qrows12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2392;
            validate_non_negative_index("y1_x_eta_12", "(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y1_x_eta_12", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_eta_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_eta_12", "(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y1_x_eta_12", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_eta_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_eta_12");
            pos__ = 0;
            size_t y1_x_eta_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            size_t y1_x_eta_12_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_eta_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_eta_12_m_mat_lim__; ++m_mat__) {
                    y1_x_eta_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2393;
            validate_non_negative_index("y2_x_eta_12", "(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y2_x_eta_12", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_eta_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_eta_12", "(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y2_x_eta_12", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_eta_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_eta_12");
            pos__ = 0;
            size_t y2_x_eta_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            size_t y2_x_eta_12_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_eta_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_eta_12_m_mat_lim__; ++m_mat__) {
                    y2_x_eta_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2394;
            validate_non_negative_index("y3_x_eta_12", "(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y3_x_eta_12", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_eta_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_eta_12", "(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y3_x_eta_12", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_eta_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_eta_12");
            pos__ = 0;
            size_t y3_x_eta_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            size_t y3_x_eta_12_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_eta_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_eta_12_m_mat_lim__; ++m_mat__) {
                    y3_x_eta_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2398;
            validate_non_negative_index("y1_z1_eta_12", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_eta_12", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y1_z1_eta_12", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            y1_z1_eta_12 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_eta_12");
            pos__ = 0;
            size_t y1_z1_eta_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_eta_12_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_eta_12_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_eta_12_limit_0__; ++i_0__) {
                    y1_z1_eta_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2399;
            validate_non_negative_index("y2_z1_eta_12", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_eta_12", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y2_z1_eta_12", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            y2_z1_eta_12 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_eta_12");
            pos__ = 0;
            size_t y2_z1_eta_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_eta_12_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_eta_12_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_eta_12_limit_0__; ++i_0__) {
                    y2_z1_eta_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2400;
            validate_non_negative_index("y3_z1_eta_12", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_eta_12", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y3_z1_eta_12", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            y3_z1_eta_12 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_eta_12");
            pos__ = 0;
            size_t y3_z1_eta_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_eta_12_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_eta_12_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_eta_12_limit_0__; ++i_0__) {
                    y3_z1_eta_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2404;
            validate_non_negative_index("y1_z2_eta_12", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_eta_12", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y1_z2_eta_12", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            y1_z2_eta_12 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_eta_12");
            pos__ = 0;
            size_t y1_z2_eta_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_eta_12_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_eta_12_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_eta_12_limit_0__; ++i_0__) {
                    y1_z2_eta_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2405;
            validate_non_negative_index("y2_z2_eta_12", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_eta_12", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y2_z2_eta_12", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            y2_z2_eta_12 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_eta_12");
            pos__ = 0;
            size_t y2_z2_eta_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_eta_12_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_eta_12_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_eta_12_limit_0__; ++i_0__) {
                    y2_z2_eta_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2406;
            validate_non_negative_index("y3_z2_eta_12", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_eta_12", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y3_z2_eta_12", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            y3_z2_eta_12 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_eta_12");
            pos__ = 0;
            size_t y3_z2_eta_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_eta_12_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_eta_12_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_eta_12_limit_0__; ++i_0__) {
                    y3_z2_eta_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2410;
            validate_non_negative_index("y1_z1_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_eta_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y1_z1_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            y1_z1_id_eta_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_eta_12");
            pos__ = 0;
            size_t y1_z1_id_eta_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_eta_12_limit_0__; ++i_0__) {
                y1_z1_id_eta_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2411;
            validate_non_negative_index("y2_z1_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_eta_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y2_z1_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            y2_z1_id_eta_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_eta_12");
            pos__ = 0;
            size_t y2_z1_id_eta_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_eta_12_limit_0__; ++i_0__) {
                y2_z1_id_eta_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2412;
            validate_non_negative_index("y3_z1_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_eta_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y3_z1_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            y3_z1_id_eta_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_eta_12");
            pos__ = 0;
            size_t y3_z1_id_eta_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_eta_12_limit_0__; ++i_0__) {
                y3_z1_id_eta_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2416;
            validate_non_negative_index("y1_z2_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_eta_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y1_z2_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            y1_z2_id_eta_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_eta_12");
            pos__ = 0;
            size_t y1_z2_id_eta_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_eta_12_limit_0__; ++i_0__) {
                y1_z2_id_eta_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2417;
            validate_non_negative_index("y2_z2_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_eta_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y2_z2_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            y2_z2_id_eta_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_eta_12");
            pos__ = 0;
            size_t y2_z2_id_eta_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_eta_12_limit_0__; ++i_0__) {
                y2_z2_id_eta_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2418;
            validate_non_negative_index("y3_z2_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_eta_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y3_z2_id_eta_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            y3_z2_id_eta_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_eta_12");
            pos__ = 0;
            size_t y3_z2_id_eta_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_eta_12_limit_0__; ++i_0__) {
                y3_z2_id_eta_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2424;
            validate_non_negative_index("y1_x_eps_12", "(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y1_x_eps_12", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_eps_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_eps_12", "(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y1_x_eps_12", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_eps_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_eps_12");
            pos__ = 0;
            size_t y1_x_eps_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            size_t y1_x_eps_12_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_eps_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_eps_12_m_mat_lim__; ++m_mat__) {
                    y1_x_eps_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2425;
            validate_non_negative_index("y2_x_eps_12", "(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y2_x_eps_12", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_eps_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_eps_12", "(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y2_x_eps_12", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_eps_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_eps_12");
            pos__ = 0;
            size_t y2_x_eps_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            size_t y2_x_eps_12_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_eps_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_eps_12_m_mat_lim__; ++m_mat__) {
                    y2_x_eps_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2426;
            validate_non_negative_index("y3_x_eps_12", "(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y3_x_eps_12", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_eps_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_eps_12", "(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            validate_non_negative_index("y3_x_eps_12", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_eps_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_eps_12");
            pos__ = 0;
            size_t y3_x_eps_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            size_t y3_x_eps_12_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_eps_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_eps_12_m_mat_lim__; ++m_mat__) {
                    y3_x_eps_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2430;
            validate_non_negative_index("y1_z1_eps_12", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_eps_12", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y1_z1_eps_12", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            y1_z1_eps_12 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_eps_12");
            pos__ = 0;
            size_t y1_z1_eps_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_eps_12_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_eps_12_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_eps_12_limit_0__; ++i_0__) {
                    y1_z1_eps_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2431;
            validate_non_negative_index("y2_z1_eps_12", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_eps_12", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y2_z1_eps_12", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            y2_z1_eps_12 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_eps_12");
            pos__ = 0;
            size_t y2_z1_eps_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_eps_12_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_eps_12_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_eps_12_limit_0__; ++i_0__) {
                    y2_z1_eps_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2432;
            validate_non_negative_index("y3_z1_eps_12", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_eps_12", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y3_z1_eps_12", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            y3_z1_eps_12 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_eps_12");
            pos__ = 0;
            size_t y3_z1_eps_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_eps_12_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_eps_12_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_eps_12_limit_0__; ++i_0__) {
                    y3_z1_eps_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2436;
            validate_non_negative_index("y1_z2_eps_12", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_eps_12", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y1_z2_eps_12", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            y1_z2_eps_12 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_eps_12");
            pos__ = 0;
            size_t y1_z2_eps_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_eps_12_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_eps_12_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_eps_12_limit_0__; ++i_0__) {
                    y1_z2_eps_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2437;
            validate_non_negative_index("y2_z2_eps_12", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_eps_12", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y2_z2_eps_12", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            y2_z2_eps_12 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_eps_12");
            pos__ = 0;
            size_t y2_z2_eps_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_eps_12_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_eps_12_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_eps_12_limit_0__; ++i_0__) {
                    y2_z2_eps_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2438;
            validate_non_negative_index("y3_z2_eps_12", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_eps_12", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y3_z2_eps_12", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            y3_z2_eps_12 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_eps_12");
            pos__ = 0;
            size_t y3_z2_eps_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_eps_12_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_eps_12_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_eps_12_limit_0__; ++i_0__) {
                    y3_z2_eps_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2442;
            validate_non_negative_index("y1_z1_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_eps_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y1_z1_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            y1_z1_id_eps_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_eps_12");
            pos__ = 0;
            size_t y1_z1_id_eps_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_eps_12_limit_0__; ++i_0__) {
                y1_z1_id_eps_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2443;
            validate_non_negative_index("y2_z1_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_eps_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y2_z1_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            y2_z1_id_eps_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_eps_12");
            pos__ = 0;
            size_t y2_z1_id_eps_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_eps_12_limit_0__; ++i_0__) {
                y2_z1_id_eps_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2444;
            validate_non_negative_index("y3_z1_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_eps_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y3_z1_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            y3_z1_id_eps_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_eps_12");
            pos__ = 0;
            size_t y3_z1_id_eps_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_eps_12_limit_0__; ++i_0__) {
                y3_z1_id_eps_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2448;
            validate_non_negative_index("y1_z2_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_eps_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y1_z2_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? get_base1(y_qrows12,1,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ));
            y1_z2_id_eps_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_eps_12");
            pos__ = 0;
            size_t y1_z2_id_eps_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_eps_12_limit_0__; ++i_0__) {
                y1_z2_id_eps_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2449;
            validate_non_negative_index("y2_z2_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_eps_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y2_z2_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? get_base1(y_qrows12,2,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ));
            y2_z2_id_eps_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_eps_12");
            pos__ = 0;
            size_t y2_z2_id_eps_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_eps_12_limit_0__; ++i_0__) {
                y2_z2_id_eps_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2450;
            validate_non_negative_index("y3_z2_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_eps_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 )));
            validate_non_negative_index("y3_z2_id_eps_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? get_base1(y_qrows12,3,\"y_qrows12\",1) : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ));
            y3_z2_id_eps_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_eps_12");
            pos__ = 0;
            size_t y3_z2_id_eps_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_eps_12_limit_0__; ++i_0__) {
                y3_z2_id_eps_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2454;
            context__.validate_dims("data initialization", "auc_qnodes12", "int", context__.to_vec());
            auc_qnodes12 = int(0);
            vals_i__ = context__.vals_i("auc_qnodes12");
            pos__ = 0;
            auc_qnodes12 = vals_i__[pos__++];
            current_statement_begin__ = 2455;
            context__.validate_dims("data initialization", "y_qrows_for_auc12", "int", context__.to_vec());
            y_qrows_for_auc12 = int(0);
            vals_i__ = context__.vals_i("y_qrows_for_auc12");
            pos__ = 0;
            y_qrows_for_auc12 = vals_i__[pos__++];
            current_statement_begin__ = 2456;
            validate_non_negative_index("auc_qwts12", "(logical_gt(sum(stan::model::rvalue(assoc_uses12, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), \"assoc_uses12\")),0) ? y_qrows_for_auc12 : 0 )", (logical_gt(sum(stan::model::rvalue(assoc_uses12, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses12")),0) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "auc_qwts12", "vector_d", context__.to_vec((logical_gt(sum(stan::model::rvalue(assoc_uses12, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses12")),0) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("auc_qwts12", "(logical_gt(sum(stan::model::rvalue(assoc_uses12, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), \"assoc_uses12\")),0) ? y_qrows_for_auc12 : 0 )", (logical_gt(sum(stan::model::rvalue(assoc_uses12, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses12")),0) ? y_qrows_for_auc12 : 0 ));
            auc_qwts12 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(sum(stan::model::rvalue(assoc_uses12, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses12")),0) ? y_qrows_for_auc12 : 0 )));
            vals_r__ = context__.vals_r("auc_qwts12");
            pos__ = 0;
            size_t auc_qwts12_i_vec_lim__ = (logical_gt(sum(stan::model::rvalue(assoc_uses12, stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "assoc_uses12")),0) ? y_qrows_for_auc12 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < auc_qwts12_i_vec_lim__; ++i_vec__) {
                auc_qwts12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2460;
            validate_non_negative_index("y1_x_auc_12", "(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1) ? y_qrows_for_auc12 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ));
            validate_non_negative_index("y1_x_auc_12", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y1_x_auc_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y1_x_auc_12", "(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1) ? y_qrows_for_auc12 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ));
            validate_non_negative_index("y1_x_auc_12", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y1_x_auc_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y1_x_auc_12");
            pos__ = 0;
            size_t y1_x_auc_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 );
            size_t y1_x_auc_12_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y1_x_auc_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_x_auc_12_m_mat_lim__; ++m_mat__) {
                    y1_x_auc_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2461;
            validate_non_negative_index("y2_x_auc_12", "(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1) ? y_qrows_for_auc12 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ));
            validate_non_negative_index("y2_x_auc_12", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y2_x_auc_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y2_x_auc_12", "(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1) ? y_qrows_for_auc12 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ));
            validate_non_negative_index("y2_x_auc_12", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y2_x_auc_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y2_x_auc_12");
            pos__ = 0;
            size_t y2_x_auc_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 );
            size_t y2_x_auc_12_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y2_x_auc_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_x_auc_12_m_mat_lim__; ++m_mat__) {
                    y2_x_auc_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2462;
            validate_non_negative_index("y3_x_auc_12", "(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1) ? y_qrows_for_auc12 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ));
            validate_non_negative_index("y3_x_auc_12", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y3_x_auc_12", "matrix_d", context__.to_vec((logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y3_x_auc_12", "(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1) ? y_qrows_for_auc12 : 0 )", (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 ));
            validate_non_negative_index("y3_x_auc_12", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y3_x_auc_12 = matrix_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 )),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y3_x_auc_12");
            pos__ = 0;
            size_t y3_x_auc_12_m_mat_lim__ = (logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1) ? y_qrows_for_auc12 : 0 );
            size_t y3_x_auc_12_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < y3_x_auc_12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y3_x_auc_12_m_mat_lim__; ++m_mat__) {
                    y3_x_auc_12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2466;
            validate_non_negative_index("y1_z1_auc_12", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y1_z1_auc_12", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y1_z1_auc_12", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_z1_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y1_z1_auc_12 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ))));
            vals_r__ = context__.vals_r("y1_z1_auc_12");
            pos__ = 0;
            size_t y1_z1_auc_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z1_auc_12_i_vec_lim__; ++i_vec__) {
                size_t y1_z1_auc_12_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z1_auc_12_limit_0__; ++i_0__) {
                    y1_z1_auc_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2467;
            validate_non_negative_index("y2_z1_auc_12", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y2_z1_auc_12", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y2_z1_auc_12", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_z1_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y2_z1_auc_12 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ))));
            vals_r__ = context__.vals_r("y2_z1_auc_12");
            pos__ = 0;
            size_t y2_z1_auc_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z1_auc_12_i_vec_lim__; ++i_vec__) {
                size_t y2_z1_auc_12_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z1_auc_12_limit_0__; ++i_0__) {
                    y2_z1_auc_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2468;
            validate_non_negative_index("y3_z1_auc_12", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y3_z1_auc_12", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y3_z1_auc_12", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_z1_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y3_z1_auc_12 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ))));
            vals_r__ = context__.vals_r("y3_z1_auc_12");
            pos__ = 0;
            size_t y3_z1_auc_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z1_auc_12_i_vec_lim__; ++i_vec__) {
                size_t y3_z1_auc_12_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z1_auc_12_limit_0__; ++i_0__) {
                    y3_z1_auc_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2472;
            validate_non_negative_index("y1_z2_auc_12", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y1_z2_auc_12", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y1_z2_auc_12", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_z2_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y1_z2_auc_12 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ))));
            vals_r__ = context__.vals_r("y1_z2_auc_12");
            pos__ = 0;
            size_t y1_z2_auc_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_z2_auc_12_i_vec_lim__; ++i_vec__) {
                size_t y1_z2_auc_12_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_z2_auc_12_limit_0__; ++i_0__) {
                    y1_z2_auc_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2473;
            validate_non_negative_index("y2_z2_auc_12", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y2_z2_auc_12", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y2_z2_auc_12", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_z2_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y2_z2_auc_12 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ))));
            vals_r__ = context__.vals_r("y2_z2_auc_12");
            pos__ = 0;
            size_t y2_z2_auc_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_z2_auc_12_i_vec_lim__; ++i_vec__) {
                size_t y2_z2_auc_12_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_z2_auc_12_limit_0__; ++i_0__) {
                    y2_z2_auc_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2474;
            validate_non_negative_index("y3_z2_auc_12", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y3_z2_auc_12", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y3_z2_auc_12", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_z2_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y3_z2_auc_12 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ))));
            vals_r__ = context__.vals_r("y3_z2_auc_12");
            pos__ = 0;
            size_t y3_z2_auc_12_i_vec_lim__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_z2_auc_12_i_vec_lim__; ++i_vec__) {
                size_t y3_z2_auc_12_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_z2_auc_12_limit_0__; ++i_0__) {
                    y3_z2_auc_12[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 2478;
            validate_non_negative_index("y1_z1_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y1_z1_id_auc_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y1_z1_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y1_z1_id_auc_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z1_id_auc_12");
            pos__ = 0;
            size_t y1_z1_id_auc_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z1_id_auc_12_limit_0__; ++i_0__) {
                y1_z1_id_auc_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2479;
            validate_non_negative_index("y2_z1_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y2_z1_id_auc_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y2_z1_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y2_z1_id_auc_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z1_id_auc_12");
            pos__ = 0;
            size_t y2_z1_id_auc_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z1_id_auc_12_limit_0__; ++i_0__) {
                y2_z1_id_auc_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2480;
            validate_non_negative_index("y3_z1_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y3_z1_id_auc_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y3_z1_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y3_z1_id_auc_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z1_id_auc_12");
            pos__ = 0;
            size_t y3_z1_id_auc_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z1_id_auc_12_limit_0__; ++i_0__) {
                y3_z1_id_auc_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2484;
            validate_non_negative_index("y1_z2_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y1_z2_id_auc_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y1_z2_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),1,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y1_z2_id_auc_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_z2_id_auc_12");
            pos__ = 0;
            size_t y1_z2_id_auc_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_z2_id_auc_12_limit_0__; ++i_0__) {
                y1_z2_id_auc_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2485;
            validate_non_negative_index("y2_z2_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y2_z2_id_auc_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y2_z2_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),2,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y2_z2_id_auc_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_z2_id_auc_12");
            pos__ = 0;
            size_t y2_z2_id_auc_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_z2_id_auc_12_limit_0__; ++i_0__) {
                y2_z2_id_auc_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2486;
            validate_non_negative_index("y3_z2_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            context__.validate_dims("data initialization", "y3_z2_id_auc_12", "int", context__.to_vec(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 )));
            validate_non_negative_index("y3_z2_id_auc_12", "((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,\"assoc_uses12\",1),3,\"assoc_uses12\",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0))) ? y_qrows_for_auc12 : 0 )", ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ));
            y3_z2_id_auc_12 = std::vector<int>(((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_z2_id_auc_12");
            pos__ = 0;
            size_t y3_z2_id_auc_12_limit_0__ = ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_z2_id_auc_12_limit_0__; ++i_0__) {
                y3_z2_id_auc_12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2491;
            validate_non_negative_index("a_K_data12", "(M * 4)", (M * 4));
            context__.validate_dims("data initialization", "a_K_data12", "int", context__.to_vec((M * 4)));
            validate_non_negative_index("a_K_data12", "(M * 4)", (M * 4));
            a_K_data12 = std::vector<int>((M * 4),int(0));
            vals_i__ = context__.vals_i("a_K_data12");
            pos__ = 0;
            size_t a_K_data12_limit_0__ = (M * 4);
            for (size_t i_0__ = 0; i_0__ < a_K_data12_limit_0__; ++i_0__) {
                a_K_data12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2494;
            validate_non_negative_index("y_x_data12", "sum(stan::model::rvalue(y_qrows12, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), \"y_qrows12\"))", sum(stan::model::rvalue(y_qrows12, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows12")));
            validate_non_negative_index("y_x_data12", "sum(a_K_data12)", sum(a_K_data12));
            context__.validate_dims("data initialization", "y_x_data12", "matrix_d", context__.to_vec(sum(stan::model::rvalue(y_qrows12, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows12")),sum(a_K_data12)));
            validate_non_negative_index("y_x_data12", "sum(stan::model::rvalue(y_qrows12, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), \"y_qrows12\"))", sum(stan::model::rvalue(y_qrows12, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows12")));
            validate_non_negative_index("y_x_data12", "sum(a_K_data12)", sum(a_K_data12));
            y_x_data12 = matrix_d(static_cast<Eigen::VectorXd::Index>(sum(stan::model::rvalue(y_qrows12, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows12"))),static_cast<Eigen::VectorXd::Index>(sum(a_K_data12)));
            vals_r__ = context__.vals_r("y_x_data12");
            pos__ = 0;
            size_t y_x_data12_m_mat_lim__ = sum(stan::model::rvalue(y_qrows12, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "y_qrows12"));
            size_t y_x_data12_n_mat_lim__ = sum(a_K_data12);
            for (size_t n_mat__ = 0; n_mat__ < y_x_data12_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y_x_data12_m_mat_lim__; ++m_mat__) {
                    y_x_data12(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 2497;
            validate_non_negative_index("idx_data12", "3", 3);
            validate_non_negative_index("idx_data12", "2", 2);
            context__.validate_dims("data initialization", "idx_data12", "int", context__.to_vec(3,2));
            validate_non_negative_index("idx_data12", "3", 3);
            validate_non_negative_index("idx_data12", "2", 2);
            idx_data12 = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_data12");
            pos__ = 0;
            size_t idx_data12_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_data12_limit_1__; ++i_1__) {
                size_t idx_data12_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < idx_data12_limit_0__; ++i_0__) {
                    idx_data12[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2501;
            validate_non_negative_index("has_grp12", "M", M);
            context__.validate_dims("data initialization", "has_grp12", "int", context__.to_vec(M));
            validate_non_negative_index("has_grp12", "M", M);
            has_grp12 = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("has_grp12");
            pos__ = 0;
            size_t has_grp12_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < has_grp12_limit_0__; ++i_0__) {
                has_grp12[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 2502;
            context__.validate_dims("data initialization", "grp_assoc12", "int", context__.to_vec());
            grp_assoc12 = int(0);
            vals_i__ = context__.vals_i("grp_assoc12");
            pos__ = 0;
            grp_assoc12 = vals_i__[pos__++];
            current_statement_begin__ = 2503;
            validate_non_negative_index("idx_grp12", "len_cpts12", len_cpts12);
            validate_non_negative_index("idx_grp12", "2", 2);
            context__.validate_dims("data initialization", "idx_grp12", "int", context__.to_vec(len_cpts12,2));
            validate_non_negative_index("idx_grp12", "len_cpts12", len_cpts12);
            validate_non_negative_index("idx_grp12", "2", 2);
            idx_grp12 = std::vector<std::vector<int> >(len_cpts12,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("idx_grp12");
            pos__ = 0;
            size_t idx_grp12_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < idx_grp12_limit_1__; ++i_1__) {
                size_t idx_grp12_limit_0__ = len_cpts12;
                for (size_t i_0__ = 0; i_0__ < idx_grp12_limit_0__; ++i_0__) {
                    idx_grp12[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 2512;
            validate_non_negative_index("y_prior_mean1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y_prior_mean1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y_prior_mean1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y_prior_mean1 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_mean1");
            pos__ = 0;
            size_t y_prior_mean1_i_vec_lim__ = get_base1(yK,1,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean1_i_vec_lim__; ++i_vec__) {
                y_prior_mean1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2513;
            validate_non_negative_index("y_prior_mean2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y_prior_mean2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y_prior_mean2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y_prior_mean2 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_mean2");
            pos__ = 0;
            size_t y_prior_mean2_i_vec_lim__ = get_base1(yK,2,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean2_i_vec_lim__; ++i_vec__) {
                y_prior_mean2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2514;
            validate_non_negative_index("y_prior_mean3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y_prior_mean3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y_prior_mean3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y_prior_mean3 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_mean3");
            pos__ = 0;
            size_t y_prior_mean3_i_vec_lim__ = get_base1(yK,3,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean3_i_vec_lim__; ++i_vec__) {
                y_prior_mean3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2515;
            validate_non_negative_index("y_prior_scale1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y_prior_scale1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y_prior_scale1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y_prior_scale1 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_scale1");
            pos__ = 0;
            size_t y_prior_scale1_i_vec_lim__ = get_base1(yK,1,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale1_i_vec_lim__; ++i_vec__) {
                y_prior_scale1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2516;
            validate_non_negative_index("y_prior_scale2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y_prior_scale2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y_prior_scale2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y_prior_scale2 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_scale2");
            pos__ = 0;
            size_t y_prior_scale2_i_vec_lim__ = get_base1(yK,2,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale2_i_vec_lim__; ++i_vec__) {
                y_prior_scale2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2517;
            validate_non_negative_index("y_prior_scale3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y_prior_scale3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y_prior_scale3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y_prior_scale3 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_scale3");
            pos__ = 0;
            size_t y_prior_scale3_i_vec_lim__ = get_base1(yK,3,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale3_i_vec_lim__; ++i_vec__) {
                y_prior_scale3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2518;
            validate_non_negative_index("y_prior_df1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y_prior_df1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y_prior_df1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y_prior_df1 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_df1");
            pos__ = 0;
            size_t y_prior_df1_i_vec_lim__ = get_base1(yK,1,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df1_i_vec_lim__; ++i_vec__) {
                y_prior_df1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2519;
            validate_non_negative_index("y_prior_df2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y_prior_df2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y_prior_df2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y_prior_df2 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_df2");
            pos__ = 0;
            size_t y_prior_df2_i_vec_lim__ = get_base1(yK,2,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df2_i_vec_lim__; ++i_vec__) {
                y_prior_df2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2520;
            validate_non_negative_index("y_prior_df3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y_prior_df3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y_prior_df3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y_prior_df3 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_df3");
            pos__ = 0;
            size_t y_prior_df3_i_vec_lim__ = get_base1(yK,3,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df3_i_vec_lim__; ++i_vec__) {
                y_prior_df3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2521;
            validate_non_negative_index("y_global_prior_df", "M", M);
            context__.validate_dims("data initialization", "y_global_prior_df", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_global_prior_df", "M", M);
            y_global_prior_df = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_global_prior_df");
            pos__ = 0;
            size_t y_global_prior_df_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_global_prior_df_i_vec_lim__; ++i_vec__) {
                y_global_prior_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2522;
            validate_non_negative_index("y_global_prior_scale", "M", M);
            context__.validate_dims("data initialization", "y_global_prior_scale", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_global_prior_scale", "M", M);
            y_global_prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_global_prior_scale");
            pos__ = 0;
            size_t y_global_prior_scale_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_global_prior_scale_i_vec_lim__; ++i_vec__) {
                y_global_prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2523;
            validate_non_negative_index("y_slab_df", "M", M);
            context__.validate_dims("data initialization", "y_slab_df", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_slab_df", "M", M);
            y_slab_df = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_slab_df");
            pos__ = 0;
            size_t y_slab_df_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_slab_df_i_vec_lim__; ++i_vec__) {
                y_slab_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2524;
            validate_non_negative_index("y_slab_scale", "M", M);
            context__.validate_dims("data initialization", "y_slab_scale", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_slab_scale", "M", M);
            y_slab_scale = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_slab_scale");
            pos__ = 0;
            size_t y_slab_scale_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_slab_scale_i_vec_lim__; ++i_vec__) {
                y_slab_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2527;
            validate_non_negative_index("y_prior_mean_for_intercept", "M", M);
            context__.validate_dims("data initialization", "y_prior_mean_for_intercept", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_mean_for_intercept", "M", M);
            y_prior_mean_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_mean_for_intercept");
            pos__ = 0;
            size_t y_prior_mean_for_intercept_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean_for_intercept_i_vec_lim__; ++i_vec__) {
                y_prior_mean_for_intercept[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2528;
            validate_non_negative_index("y_prior_scale_for_intercept", "M", M);
            context__.validate_dims("data initialization", "y_prior_scale_for_intercept", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_scale_for_intercept", "M", M);
            y_prior_scale_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_scale_for_intercept");
            pos__ = 0;
            size_t y_prior_scale_for_intercept_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale_for_intercept_i_vec_lim__; ++i_vec__) {
                y_prior_scale_for_intercept[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2529;
            validate_non_negative_index("y_prior_df_for_intercept", "M", M);
            context__.validate_dims("data initialization", "y_prior_df_for_intercept", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_df_for_intercept", "M", M);
            y_prior_df_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_df_for_intercept");
            pos__ = 0;
            size_t y_prior_df_for_intercept_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df_for_intercept_i_vec_lim__; ++i_vec__) {
                y_prior_df_for_intercept[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2532;
            validate_non_negative_index("y_prior_mean_for_aux", "M", M);
            context__.validate_dims("data initialization", "y_prior_mean_for_aux", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_mean_for_aux", "M", M);
            y_prior_mean_for_aux = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_mean_for_aux");
            pos__ = 0;
            size_t y_prior_mean_for_aux_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean_for_aux_i_vec_lim__; ++i_vec__) {
                y_prior_mean_for_aux[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2533;
            validate_non_negative_index("y_prior_scale_for_aux", "M", M);
            context__.validate_dims("data initialization", "y_prior_scale_for_aux", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_scale_for_aux", "M", M);
            y_prior_scale_for_aux = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_scale_for_aux");
            pos__ = 0;
            size_t y_prior_scale_for_aux_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale_for_aux_i_vec_lim__; ++i_vec__) {
                y_prior_scale_for_aux[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2534;
            validate_non_negative_index("y_prior_df_for_aux", "M", M);
            context__.validate_dims("data initialization", "y_prior_df_for_aux", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_df_for_aux", "M", M);
            y_prior_df_for_aux = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_df_for_aux");
            pos__ = 0;
            size_t y_prior_df_for_aux_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df_for_aux_i_vec_lim__; ++i_vec__) {
                y_prior_df_for_aux[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2537;
            context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
            len_concentration = int(0);
            vals_i__ = context__.vals_i("len_concentration");
            pos__ = 0;
            len_concentration = vals_i__[pos__++];
            current_statement_begin__ = 2538;
            context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
            len_regularization = int(0);
            vals_i__ = context__.vals_i("len_regularization");
            pos__ = 0;
            len_regularization = vals_i__[pos__++];
            current_statement_begin__ = 2539;
            validate_non_negative_index("b_prior_shape", "t", t);
            context__.validate_dims("data initialization", "b_prior_shape", "vector_d", context__.to_vec(t));
            validate_non_negative_index("b_prior_shape", "t", t);
            b_prior_shape = vector_d(static_cast<Eigen::VectorXd::Index>(t));
            vals_r__ = context__.vals_r("b_prior_shape");
            pos__ = 0;
            size_t b_prior_shape_i_vec_lim__ = t;
            for (size_t i_vec__ = 0; i_vec__ < b_prior_shape_i_vec_lim__; ++i_vec__) {
                b_prior_shape[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2540;
            validate_non_negative_index("b_prior_scale", "t", t);
            context__.validate_dims("data initialization", "b_prior_scale", "vector_d", context__.to_vec(t));
            validate_non_negative_index("b_prior_scale", "t", t);
            b_prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(t));
            vals_r__ = context__.vals_r("b_prior_scale");
            pos__ = 0;
            size_t b_prior_scale_i_vec_lim__ = t;
            for (size_t i_vec__ = 0; i_vec__ < b_prior_scale_i_vec_lim__; ++i_vec__) {
                b_prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2541;
            validate_non_negative_index("b_prior_concentration", "len_concentration", len_concentration);
            context__.validate_dims("data initialization", "b_prior_concentration", "double", context__.to_vec(len_concentration));
            validate_non_negative_index("b_prior_concentration", "len_concentration", len_concentration);
            b_prior_concentration = std::vector<double>(len_concentration,double(0));
            vals_r__ = context__.vals_r("b_prior_concentration");
            pos__ = 0;
            size_t b_prior_concentration_limit_0__ = len_concentration;
            for (size_t i_0__ = 0; i_0__ < b_prior_concentration_limit_0__; ++i_0__) {
                b_prior_concentration[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2542;
            validate_non_negative_index("b_prior_regularization", "len_regularization", len_regularization);
            context__.validate_dims("data initialization", "b_prior_regularization", "double", context__.to_vec(len_regularization));
            validate_non_negative_index("b_prior_regularization", "len_regularization", len_regularization);
            b_prior_regularization = std::vector<double>(len_regularization,double(0));
            vals_r__ = context__.vals_r("b_prior_regularization");
            pos__ = 0;
            size_t b_prior_regularization_limit_0__ = len_regularization;
            for (size_t i_0__ = 0; i_0__ < b_prior_regularization_limit_0__; ++i_0__) {
                b_prior_regularization[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2545;
            validate_non_negative_index("b1_prior_scale", "bK1", bK1);
            context__.validate_dims("data initialization", "b1_prior_scale", "vector_d", context__.to_vec(bK1));
            validate_non_negative_index("b1_prior_scale", "bK1", bK1);
            b1_prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(bK1));
            vals_r__ = context__.vals_r("b1_prior_scale");
            pos__ = 0;
            size_t b1_prior_scale_i_vec_lim__ = bK1;
            for (size_t i_vec__ = 0; i_vec__ < b1_prior_scale_i_vec_lim__; ++i_vec__) {
                b1_prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2546;
            validate_non_negative_index("b2_prior_scale", "bK2", bK2);
            context__.validate_dims("data initialization", "b2_prior_scale", "vector_d", context__.to_vec(bK2));
            validate_non_negative_index("b2_prior_scale", "bK2", bK2);
            b2_prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(bK2));
            vals_r__ = context__.vals_r("b2_prior_scale");
            pos__ = 0;
            size_t b2_prior_scale_i_vec_lim__ = bK2;
            for (size_t i_vec__ = 0; i_vec__ < b2_prior_scale_i_vec_lim__; ++i_vec__) {
                b2_prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2547;
            validate_non_negative_index("b1_prior_df", "bK1", bK1);
            context__.validate_dims("data initialization", "b1_prior_df", "vector_d", context__.to_vec(bK1));
            validate_non_negative_index("b1_prior_df", "bK1", bK1);
            b1_prior_df = vector_d(static_cast<Eigen::VectorXd::Index>(bK1));
            vals_r__ = context__.vals_r("b1_prior_df");
            pos__ = 0;
            size_t b1_prior_df_i_vec_lim__ = bK1;
            for (size_t i_vec__ = 0; i_vec__ < b1_prior_df_i_vec_lim__; ++i_vec__) {
                b1_prior_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2548;
            validate_non_negative_index("b2_prior_df", "bK2", bK2);
            context__.validate_dims("data initialization", "b2_prior_df", "vector_d", context__.to_vec(bK2));
            validate_non_negative_index("b2_prior_df", "bK2", bK2);
            b2_prior_df = vector_d(static_cast<Eigen::VectorXd::Index>(bK2));
            vals_r__ = context__.vals_r("b2_prior_df");
            pos__ = 0;
            size_t b2_prior_df_i_vec_lim__ = bK2;
            for (size_t i_vec__ = 0; i_vec__ < b2_prior_df_i_vec_lim__; ++i_vec__) {
                b2_prior_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2549;
            context__.validate_dims("data initialization", "b1_prior_regularization", "double", context__.to_vec());
            b1_prior_regularization = double(0);
            vals_r__ = context__.vals_r("b1_prior_regularization");
            pos__ = 0;
            b1_prior_regularization = vals_r__[pos__++];
            current_statement_begin__ = 2550;
            context__.validate_dims("data initialization", "b2_prior_regularization", "double", context__.to_vec());
            b2_prior_regularization = double(0);
            vals_r__ = context__.vals_r("b2_prior_regularization");
            pos__ = 0;
            b2_prior_regularization = vals_r__[pos__++];
            current_statement_begin__ = 2552;
            validate_non_negative_index("e_prior_mean01", "e_K01", e_K01);
            context__.validate_dims("data initialization", "e_prior_mean01", "vector_d", context__.to_vec(e_K01));
            validate_non_negative_index("e_prior_mean01", "e_K01", e_K01);
            e_prior_mean01 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K01));
            vals_r__ = context__.vals_r("e_prior_mean01");
            pos__ = 0;
            size_t e_prior_mean01_i_vec_lim__ = e_K01;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_mean01_i_vec_lim__; ++i_vec__) {
                e_prior_mean01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2553;
            context__.validate_dims("data initialization", "e_prior_mean_for_intercept01", "double", context__.to_vec());
            e_prior_mean_for_intercept01 = double(0);
            vals_r__ = context__.vals_r("e_prior_mean_for_intercept01");
            pos__ = 0;
            e_prior_mean_for_intercept01 = vals_r__[pos__++];
            current_statement_begin__ = 2554;
            validate_non_negative_index("e_prior_mean_for_aux01", "basehaz_nvars01", basehaz_nvars01);
            context__.validate_dims("data initialization", "e_prior_mean_for_aux01", "vector_d", context__.to_vec(basehaz_nvars01));
            validate_non_negative_index("e_prior_mean_for_aux01", "basehaz_nvars01", basehaz_nvars01);
            e_prior_mean_for_aux01 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
            vals_r__ = context__.vals_r("e_prior_mean_for_aux01");
            pos__ = 0;
            size_t e_prior_mean_for_aux01_i_vec_lim__ = basehaz_nvars01;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_mean_for_aux01_i_vec_lim__; ++i_vec__) {
                e_prior_mean_for_aux01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2555;
            validate_non_negative_index("e_prior_scale01", "e_K01", e_K01);
            context__.validate_dims("data initialization", "e_prior_scale01", "vector_d", context__.to_vec(e_K01));
            validate_non_negative_index("e_prior_scale01", "e_K01", e_K01);
            e_prior_scale01 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K01));
            vals_r__ = context__.vals_r("e_prior_scale01");
            pos__ = 0;
            size_t e_prior_scale01_i_vec_lim__ = e_K01;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_scale01_i_vec_lim__; ++i_vec__) {
                e_prior_scale01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2556;
            context__.validate_dims("data initialization", "e_prior_scale_for_intercept01", "double", context__.to_vec());
            e_prior_scale_for_intercept01 = double(0);
            vals_r__ = context__.vals_r("e_prior_scale_for_intercept01");
            pos__ = 0;
            e_prior_scale_for_intercept01 = vals_r__[pos__++];
            current_statement_begin__ = 2557;
            validate_non_negative_index("e_prior_scale_for_aux01", "basehaz_nvars01", basehaz_nvars01);
            context__.validate_dims("data initialization", "e_prior_scale_for_aux01", "vector_d", context__.to_vec(basehaz_nvars01));
            validate_non_negative_index("e_prior_scale_for_aux01", "basehaz_nvars01", basehaz_nvars01);
            e_prior_scale_for_aux01 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
            vals_r__ = context__.vals_r("e_prior_scale_for_aux01");
            pos__ = 0;
            size_t e_prior_scale_for_aux01_i_vec_lim__ = basehaz_nvars01;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_scale_for_aux01_i_vec_lim__; ++i_vec__) {
                e_prior_scale_for_aux01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2558;
            validate_non_negative_index("e_prior_df01", "e_K01", e_K01);
            context__.validate_dims("data initialization", "e_prior_df01", "vector_d", context__.to_vec(e_K01));
            validate_non_negative_index("e_prior_df01", "e_K01", e_K01);
            e_prior_df01 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K01));
            vals_r__ = context__.vals_r("e_prior_df01");
            pos__ = 0;
            size_t e_prior_df01_i_vec_lim__ = e_K01;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_df01_i_vec_lim__; ++i_vec__) {
                e_prior_df01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2559;
            context__.validate_dims("data initialization", "e_prior_df_for_intercept01", "double", context__.to_vec());
            e_prior_df_for_intercept01 = double(0);
            vals_r__ = context__.vals_r("e_prior_df_for_intercept01");
            pos__ = 0;
            e_prior_df_for_intercept01 = vals_r__[pos__++];
            current_statement_begin__ = 2560;
            validate_non_negative_index("e_prior_df_for_aux01", "basehaz_nvars01", basehaz_nvars01);
            context__.validate_dims("data initialization", "e_prior_df_for_aux01", "vector_d", context__.to_vec(basehaz_nvars01));
            validate_non_negative_index("e_prior_df_for_aux01", "basehaz_nvars01", basehaz_nvars01);
            e_prior_df_for_aux01 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
            vals_r__ = context__.vals_r("e_prior_df_for_aux01");
            pos__ = 0;
            size_t e_prior_df_for_aux01_i_vec_lim__ = basehaz_nvars01;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_df_for_aux01_i_vec_lim__; ++i_vec__) {
                e_prior_df_for_aux01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2561;
            context__.validate_dims("data initialization", "e_global_prior_scale01", "double", context__.to_vec());
            e_global_prior_scale01 = double(0);
            vals_r__ = context__.vals_r("e_global_prior_scale01");
            pos__ = 0;
            e_global_prior_scale01 = vals_r__[pos__++];
            current_statement_begin__ = 2562;
            context__.validate_dims("data initialization", "e_global_prior_df01", "double", context__.to_vec());
            e_global_prior_df01 = double(0);
            vals_r__ = context__.vals_r("e_global_prior_df01");
            pos__ = 0;
            e_global_prior_df01 = vals_r__[pos__++];
            current_statement_begin__ = 2563;
            context__.validate_dims("data initialization", "e_slab_df01", "double", context__.to_vec());
            e_slab_df01 = double(0);
            vals_r__ = context__.vals_r("e_slab_df01");
            pos__ = 0;
            e_slab_df01 = vals_r__[pos__++];
            current_statement_begin__ = 2564;
            context__.validate_dims("data initialization", "e_slab_scale01", "double", context__.to_vec());
            e_slab_scale01 = double(0);
            vals_r__ = context__.vals_r("e_slab_scale01");
            pos__ = 0;
            e_slab_scale01 = vals_r__[pos__++];
            current_statement_begin__ = 2567;
            validate_non_negative_index("e_prior_mean02", "e_K02", e_K02);
            context__.validate_dims("data initialization", "e_prior_mean02", "vector_d", context__.to_vec(e_K02));
            validate_non_negative_index("e_prior_mean02", "e_K02", e_K02);
            e_prior_mean02 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K02));
            vals_r__ = context__.vals_r("e_prior_mean02");
            pos__ = 0;
            size_t e_prior_mean02_i_vec_lim__ = e_K02;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_mean02_i_vec_lim__; ++i_vec__) {
                e_prior_mean02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2568;
            context__.validate_dims("data initialization", "e_prior_mean_for_intercept02", "double", context__.to_vec());
            e_prior_mean_for_intercept02 = double(0);
            vals_r__ = context__.vals_r("e_prior_mean_for_intercept02");
            pos__ = 0;
            e_prior_mean_for_intercept02 = vals_r__[pos__++];
            current_statement_begin__ = 2569;
            validate_non_negative_index("e_prior_mean_for_aux02", "basehaz_nvars02", basehaz_nvars02);
            context__.validate_dims("data initialization", "e_prior_mean_for_aux02", "vector_d", context__.to_vec(basehaz_nvars02));
            validate_non_negative_index("e_prior_mean_for_aux02", "basehaz_nvars02", basehaz_nvars02);
            e_prior_mean_for_aux02 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
            vals_r__ = context__.vals_r("e_prior_mean_for_aux02");
            pos__ = 0;
            size_t e_prior_mean_for_aux02_i_vec_lim__ = basehaz_nvars02;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_mean_for_aux02_i_vec_lim__; ++i_vec__) {
                e_prior_mean_for_aux02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2570;
            validate_non_negative_index("e_prior_scale02", "e_K02", e_K02);
            context__.validate_dims("data initialization", "e_prior_scale02", "vector_d", context__.to_vec(e_K02));
            validate_non_negative_index("e_prior_scale02", "e_K02", e_K02);
            e_prior_scale02 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K02));
            vals_r__ = context__.vals_r("e_prior_scale02");
            pos__ = 0;
            size_t e_prior_scale02_i_vec_lim__ = e_K02;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_scale02_i_vec_lim__; ++i_vec__) {
                e_prior_scale02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2571;
            context__.validate_dims("data initialization", "e_prior_scale_for_intercept02", "double", context__.to_vec());
            e_prior_scale_for_intercept02 = double(0);
            vals_r__ = context__.vals_r("e_prior_scale_for_intercept02");
            pos__ = 0;
            e_prior_scale_for_intercept02 = vals_r__[pos__++];
            current_statement_begin__ = 2572;
            validate_non_negative_index("e_prior_scale_for_aux02", "basehaz_nvars02", basehaz_nvars02);
            context__.validate_dims("data initialization", "e_prior_scale_for_aux02", "vector_d", context__.to_vec(basehaz_nvars02));
            validate_non_negative_index("e_prior_scale_for_aux02", "basehaz_nvars02", basehaz_nvars02);
            e_prior_scale_for_aux02 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
            vals_r__ = context__.vals_r("e_prior_scale_for_aux02");
            pos__ = 0;
            size_t e_prior_scale_for_aux02_i_vec_lim__ = basehaz_nvars02;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_scale_for_aux02_i_vec_lim__; ++i_vec__) {
                e_prior_scale_for_aux02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2573;
            validate_non_negative_index("e_prior_df02", "e_K02", e_K02);
            context__.validate_dims("data initialization", "e_prior_df02", "vector_d", context__.to_vec(e_K02));
            validate_non_negative_index("e_prior_df02", "e_K02", e_K02);
            e_prior_df02 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K02));
            vals_r__ = context__.vals_r("e_prior_df02");
            pos__ = 0;
            size_t e_prior_df02_i_vec_lim__ = e_K02;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_df02_i_vec_lim__; ++i_vec__) {
                e_prior_df02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2574;
            context__.validate_dims("data initialization", "e_prior_df_for_intercept02", "double", context__.to_vec());
            e_prior_df_for_intercept02 = double(0);
            vals_r__ = context__.vals_r("e_prior_df_for_intercept02");
            pos__ = 0;
            e_prior_df_for_intercept02 = vals_r__[pos__++];
            current_statement_begin__ = 2575;
            validate_non_negative_index("e_prior_df_for_aux02", "basehaz_nvars02", basehaz_nvars02);
            context__.validate_dims("data initialization", "e_prior_df_for_aux02", "vector_d", context__.to_vec(basehaz_nvars02));
            validate_non_negative_index("e_prior_df_for_aux02", "basehaz_nvars02", basehaz_nvars02);
            e_prior_df_for_aux02 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
            vals_r__ = context__.vals_r("e_prior_df_for_aux02");
            pos__ = 0;
            size_t e_prior_df_for_aux02_i_vec_lim__ = basehaz_nvars02;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_df_for_aux02_i_vec_lim__; ++i_vec__) {
                e_prior_df_for_aux02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2576;
            context__.validate_dims("data initialization", "e_global_prior_scale02", "double", context__.to_vec());
            e_global_prior_scale02 = double(0);
            vals_r__ = context__.vals_r("e_global_prior_scale02");
            pos__ = 0;
            e_global_prior_scale02 = vals_r__[pos__++];
            current_statement_begin__ = 2577;
            context__.validate_dims("data initialization", "e_global_prior_df02", "double", context__.to_vec());
            e_global_prior_df02 = double(0);
            vals_r__ = context__.vals_r("e_global_prior_df02");
            pos__ = 0;
            e_global_prior_df02 = vals_r__[pos__++];
            current_statement_begin__ = 2578;
            context__.validate_dims("data initialization", "e_slab_df02", "double", context__.to_vec());
            e_slab_df02 = double(0);
            vals_r__ = context__.vals_r("e_slab_df02");
            pos__ = 0;
            e_slab_df02 = vals_r__[pos__++];
            current_statement_begin__ = 2579;
            context__.validate_dims("data initialization", "e_slab_scale02", "double", context__.to_vec());
            e_slab_scale02 = double(0);
            vals_r__ = context__.vals_r("e_slab_scale02");
            pos__ = 0;
            e_slab_scale02 = vals_r__[pos__++];
            current_statement_begin__ = 2582;
            validate_non_negative_index("e_prior_mean12", "e_K12", e_K12);
            context__.validate_dims("data initialization", "e_prior_mean12", "vector_d", context__.to_vec(e_K12));
            validate_non_negative_index("e_prior_mean12", "e_K12", e_K12);
            e_prior_mean12 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K12));
            vals_r__ = context__.vals_r("e_prior_mean12");
            pos__ = 0;
            size_t e_prior_mean12_i_vec_lim__ = e_K12;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_mean12_i_vec_lim__; ++i_vec__) {
                e_prior_mean12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2583;
            context__.validate_dims("data initialization", "e_prior_mean_for_intercept12", "double", context__.to_vec());
            e_prior_mean_for_intercept12 = double(0);
            vals_r__ = context__.vals_r("e_prior_mean_for_intercept12");
            pos__ = 0;
            e_prior_mean_for_intercept12 = vals_r__[pos__++];
            current_statement_begin__ = 2584;
            validate_non_negative_index("e_prior_mean_for_aux12", "basehaz_nvars12", basehaz_nvars12);
            context__.validate_dims("data initialization", "e_prior_mean_for_aux12", "vector_d", context__.to_vec(basehaz_nvars12));
            validate_non_negative_index("e_prior_mean_for_aux12", "basehaz_nvars12", basehaz_nvars12);
            e_prior_mean_for_aux12 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
            vals_r__ = context__.vals_r("e_prior_mean_for_aux12");
            pos__ = 0;
            size_t e_prior_mean_for_aux12_i_vec_lim__ = basehaz_nvars12;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_mean_for_aux12_i_vec_lim__; ++i_vec__) {
                e_prior_mean_for_aux12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2585;
            validate_non_negative_index("e_prior_scale12", "e_K12", e_K12);
            context__.validate_dims("data initialization", "e_prior_scale12", "vector_d", context__.to_vec(e_K12));
            validate_non_negative_index("e_prior_scale12", "e_K12", e_K12);
            e_prior_scale12 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K12));
            vals_r__ = context__.vals_r("e_prior_scale12");
            pos__ = 0;
            size_t e_prior_scale12_i_vec_lim__ = e_K12;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_scale12_i_vec_lim__; ++i_vec__) {
                e_prior_scale12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2586;
            context__.validate_dims("data initialization", "e_prior_scale_for_intercept12", "double", context__.to_vec());
            e_prior_scale_for_intercept12 = double(0);
            vals_r__ = context__.vals_r("e_prior_scale_for_intercept12");
            pos__ = 0;
            e_prior_scale_for_intercept12 = vals_r__[pos__++];
            current_statement_begin__ = 2587;
            validate_non_negative_index("e_prior_scale_for_aux12", "basehaz_nvars12", basehaz_nvars12);
            context__.validate_dims("data initialization", "e_prior_scale_for_aux12", "vector_d", context__.to_vec(basehaz_nvars12));
            validate_non_negative_index("e_prior_scale_for_aux12", "basehaz_nvars12", basehaz_nvars12);
            e_prior_scale_for_aux12 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
            vals_r__ = context__.vals_r("e_prior_scale_for_aux12");
            pos__ = 0;
            size_t e_prior_scale_for_aux12_i_vec_lim__ = basehaz_nvars12;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_scale_for_aux12_i_vec_lim__; ++i_vec__) {
                e_prior_scale_for_aux12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2588;
            validate_non_negative_index("e_prior_df12", "e_K12", e_K12);
            context__.validate_dims("data initialization", "e_prior_df12", "vector_d", context__.to_vec(e_K12));
            validate_non_negative_index("e_prior_df12", "e_K12", e_K12);
            e_prior_df12 = vector_d(static_cast<Eigen::VectorXd::Index>(e_K12));
            vals_r__ = context__.vals_r("e_prior_df12");
            pos__ = 0;
            size_t e_prior_df12_i_vec_lim__ = e_K12;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_df12_i_vec_lim__; ++i_vec__) {
                e_prior_df12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2589;
            context__.validate_dims("data initialization", "e_prior_df_for_intercept12", "double", context__.to_vec());
            e_prior_df_for_intercept12 = double(0);
            vals_r__ = context__.vals_r("e_prior_df_for_intercept12");
            pos__ = 0;
            e_prior_df_for_intercept12 = vals_r__[pos__++];
            current_statement_begin__ = 2590;
            validate_non_negative_index("e_prior_df_for_aux12", "basehaz_nvars12", basehaz_nvars12);
            context__.validate_dims("data initialization", "e_prior_df_for_aux12", "vector_d", context__.to_vec(basehaz_nvars12));
            validate_non_negative_index("e_prior_df_for_aux12", "basehaz_nvars12", basehaz_nvars12);
            e_prior_df_for_aux12 = vector_d(static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
            vals_r__ = context__.vals_r("e_prior_df_for_aux12");
            pos__ = 0;
            size_t e_prior_df_for_aux12_i_vec_lim__ = basehaz_nvars12;
            for (size_t i_vec__ = 0; i_vec__ < e_prior_df_for_aux12_i_vec_lim__; ++i_vec__) {
                e_prior_df_for_aux12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2591;
            context__.validate_dims("data initialization", "e_global_prior_scale12", "double", context__.to_vec());
            e_global_prior_scale12 = double(0);
            vals_r__ = context__.vals_r("e_global_prior_scale12");
            pos__ = 0;
            e_global_prior_scale12 = vals_r__[pos__++];
            current_statement_begin__ = 2592;
            context__.validate_dims("data initialization", "e_global_prior_df12", "double", context__.to_vec());
            e_global_prior_df12 = double(0);
            vals_r__ = context__.vals_r("e_global_prior_df12");
            pos__ = 0;
            e_global_prior_df12 = vals_r__[pos__++];
            current_statement_begin__ = 2593;
            context__.validate_dims("data initialization", "e_slab_df12", "double", context__.to_vec());
            e_slab_df12 = double(0);
            vals_r__ = context__.vals_r("e_slab_df12");
            pos__ = 0;
            e_slab_df12 = vals_r__[pos__++];
            current_statement_begin__ = 2594;
            context__.validate_dims("data initialization", "e_slab_scale12", "double", context__.to_vec());
            e_slab_scale12 = double(0);
            vals_r__ = context__.vals_r("e_slab_scale12");
            pos__ = 0;
            e_slab_scale12 = vals_r__[pos__++];
            current_statement_begin__ = 2601;
            validate_non_negative_index("a_prior_mean01", "a_K01", a_K01);
            context__.validate_dims("data initialization", "a_prior_mean01", "vector_d", context__.to_vec(a_K01));
            validate_non_negative_index("a_prior_mean01", "a_K01", a_K01);
            a_prior_mean01 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K01));
            vals_r__ = context__.vals_r("a_prior_mean01");
            pos__ = 0;
            size_t a_prior_mean01_i_vec_lim__ = a_K01;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_mean01_i_vec_lim__; ++i_vec__) {
                a_prior_mean01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2602;
            validate_non_negative_index("a_prior_scale01", "a_K01", a_K01);
            context__.validate_dims("data initialization", "a_prior_scale01", "vector_d", context__.to_vec(a_K01));
            validate_non_negative_index("a_prior_scale01", "a_K01", a_K01);
            a_prior_scale01 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K01));
            vals_r__ = context__.vals_r("a_prior_scale01");
            pos__ = 0;
            size_t a_prior_scale01_i_vec_lim__ = a_K01;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_scale01_i_vec_lim__; ++i_vec__) {
                a_prior_scale01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2603;
            validate_non_negative_index("a_prior_df01", "a_K01", a_K01);
            context__.validate_dims("data initialization", "a_prior_df01", "vector_d", context__.to_vec(a_K01));
            validate_non_negative_index("a_prior_df01", "a_K01", a_K01);
            a_prior_df01 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K01));
            vals_r__ = context__.vals_r("a_prior_df01");
            pos__ = 0;
            size_t a_prior_df01_i_vec_lim__ = a_K01;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_df01_i_vec_lim__; ++i_vec__) {
                a_prior_df01[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2604;
            context__.validate_dims("data initialization", "a_global_prior_scale01", "double", context__.to_vec());
            a_global_prior_scale01 = double(0);
            vals_r__ = context__.vals_r("a_global_prior_scale01");
            pos__ = 0;
            a_global_prior_scale01 = vals_r__[pos__++];
            current_statement_begin__ = 2605;
            context__.validate_dims("data initialization", "a_global_prior_df01", "double", context__.to_vec());
            a_global_prior_df01 = double(0);
            vals_r__ = context__.vals_r("a_global_prior_df01");
            pos__ = 0;
            a_global_prior_df01 = vals_r__[pos__++];
            current_statement_begin__ = 2606;
            context__.validate_dims("data initialization", "a_slab_df01", "double", context__.to_vec());
            a_slab_df01 = double(0);
            vals_r__ = context__.vals_r("a_slab_df01");
            pos__ = 0;
            a_slab_df01 = vals_r__[pos__++];
            current_statement_begin__ = 2607;
            context__.validate_dims("data initialization", "a_slab_scale01", "double", context__.to_vec());
            a_slab_scale01 = double(0);
            vals_r__ = context__.vals_r("a_slab_scale01");
            pos__ = 0;
            a_slab_scale01 = vals_r__[pos__++];
            current_statement_begin__ = 2610;
            validate_non_negative_index("a_prior_mean02", "a_K02", a_K02);
            context__.validate_dims("data initialization", "a_prior_mean02", "vector_d", context__.to_vec(a_K02));
            validate_non_negative_index("a_prior_mean02", "a_K02", a_K02);
            a_prior_mean02 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K02));
            vals_r__ = context__.vals_r("a_prior_mean02");
            pos__ = 0;
            size_t a_prior_mean02_i_vec_lim__ = a_K02;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_mean02_i_vec_lim__; ++i_vec__) {
                a_prior_mean02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2611;
            validate_non_negative_index("a_prior_scale02", "a_K02", a_K02);
            context__.validate_dims("data initialization", "a_prior_scale02", "vector_d", context__.to_vec(a_K02));
            validate_non_negative_index("a_prior_scale02", "a_K02", a_K02);
            a_prior_scale02 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K02));
            vals_r__ = context__.vals_r("a_prior_scale02");
            pos__ = 0;
            size_t a_prior_scale02_i_vec_lim__ = a_K02;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_scale02_i_vec_lim__; ++i_vec__) {
                a_prior_scale02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2612;
            validate_non_negative_index("a_prior_df02", "a_K02", a_K02);
            context__.validate_dims("data initialization", "a_prior_df02", "vector_d", context__.to_vec(a_K02));
            validate_non_negative_index("a_prior_df02", "a_K02", a_K02);
            a_prior_df02 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K02));
            vals_r__ = context__.vals_r("a_prior_df02");
            pos__ = 0;
            size_t a_prior_df02_i_vec_lim__ = a_K02;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_df02_i_vec_lim__; ++i_vec__) {
                a_prior_df02[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2613;
            context__.validate_dims("data initialization", "a_global_prior_scale02", "double", context__.to_vec());
            a_global_prior_scale02 = double(0);
            vals_r__ = context__.vals_r("a_global_prior_scale02");
            pos__ = 0;
            a_global_prior_scale02 = vals_r__[pos__++];
            current_statement_begin__ = 2614;
            context__.validate_dims("data initialization", "a_global_prior_df02", "double", context__.to_vec());
            a_global_prior_df02 = double(0);
            vals_r__ = context__.vals_r("a_global_prior_df02");
            pos__ = 0;
            a_global_prior_df02 = vals_r__[pos__++];
            current_statement_begin__ = 2615;
            context__.validate_dims("data initialization", "a_slab_df02", "double", context__.to_vec());
            a_slab_df02 = double(0);
            vals_r__ = context__.vals_r("a_slab_df02");
            pos__ = 0;
            a_slab_df02 = vals_r__[pos__++];
            current_statement_begin__ = 2616;
            context__.validate_dims("data initialization", "a_slab_scale02", "double", context__.to_vec());
            a_slab_scale02 = double(0);
            vals_r__ = context__.vals_r("a_slab_scale02");
            pos__ = 0;
            a_slab_scale02 = vals_r__[pos__++];
            current_statement_begin__ = 2619;
            validate_non_negative_index("a_prior_mean12", "a_K12", a_K12);
            context__.validate_dims("data initialization", "a_prior_mean12", "vector_d", context__.to_vec(a_K12));
            validate_non_negative_index("a_prior_mean12", "a_K12", a_K12);
            a_prior_mean12 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K12));
            vals_r__ = context__.vals_r("a_prior_mean12");
            pos__ = 0;
            size_t a_prior_mean12_i_vec_lim__ = a_K12;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_mean12_i_vec_lim__; ++i_vec__) {
                a_prior_mean12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2620;
            validate_non_negative_index("a_prior_scale12", "a_K12", a_K12);
            context__.validate_dims("data initialization", "a_prior_scale12", "vector_d", context__.to_vec(a_K12));
            validate_non_negative_index("a_prior_scale12", "a_K12", a_K12);
            a_prior_scale12 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K12));
            vals_r__ = context__.vals_r("a_prior_scale12");
            pos__ = 0;
            size_t a_prior_scale12_i_vec_lim__ = a_K12;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_scale12_i_vec_lim__; ++i_vec__) {
                a_prior_scale12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2621;
            validate_non_negative_index("a_prior_df12", "a_K12", a_K12);
            context__.validate_dims("data initialization", "a_prior_df12", "vector_d", context__.to_vec(a_K12));
            validate_non_negative_index("a_prior_df12", "a_K12", a_K12);
            a_prior_df12 = vector_d(static_cast<Eigen::VectorXd::Index>(a_K12));
            vals_r__ = context__.vals_r("a_prior_df12");
            pos__ = 0;
            size_t a_prior_df12_i_vec_lim__ = a_K12;
            for (size_t i_vec__ = 0; i_vec__ < a_prior_df12_i_vec_lim__; ++i_vec__) {
                a_prior_df12[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 2622;
            context__.validate_dims("data initialization", "a_global_prior_scale12", "double", context__.to_vec());
            a_global_prior_scale12 = double(0);
            vals_r__ = context__.vals_r("a_global_prior_scale12");
            pos__ = 0;
            a_global_prior_scale12 = vals_r__[pos__++];
            current_statement_begin__ = 2623;
            context__.validate_dims("data initialization", "a_global_prior_df12", "double", context__.to_vec());
            a_global_prior_df12 = double(0);
            vals_r__ = context__.vals_r("a_global_prior_df12");
            pos__ = 0;
            a_global_prior_df12 = vals_r__[pos__++];
            current_statement_begin__ = 2624;
            context__.validate_dims("data initialization", "a_slab_df12", "double", context__.to_vec());
            a_slab_df12 = double(0);
            vals_r__ = context__.vals_r("a_slab_df12");
            pos__ = 0;
            a_slab_df12 = vals_r__[pos__++];
            current_statement_begin__ = 2625;
            context__.validate_dims("data initialization", "a_slab_scale12", "double", context__.to_vec());
            a_slab_scale12 = double(0);
            vals_r__ = context__.vals_r("a_slab_scale12");
            pos__ = 0;
            a_slab_scale12 = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 1673;
            check_greater_or_equal(function__,"M",M,1);
            check_less_or_equal(function__,"M",M,3);
            current_statement_begin__ = 1674;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"has_aux[k0__]",has_aux[k0__],0);
                check_less_or_equal(function__,"has_aux[k0__]",has_aux[k0__],1);
            }
            current_statement_begin__ = 1675;
            check_greater_or_equal(function__,"has_weights",has_weights,0);
            check_less_or_equal(function__,"has_weights",has_weights,1);
            current_statement_begin__ = 1676;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"resp_type[k0__]",resp_type[k0__],0);
                check_less_or_equal(function__,"resp_type[k0__]",resp_type[k0__],2);
            }
            current_statement_begin__ = 1677;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"intercept_type[k0__]",intercept_type[k0__],0);
                check_less_or_equal(function__,"intercept_type[k0__]",intercept_type[k0__],3);
            }
            current_statement_begin__ = 1678;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"yNobs[k0__]",yNobs[k0__],0);
            }
            current_statement_begin__ = 1679;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"yNeta[k0__]",yNeta[k0__],0);
            }
            current_statement_begin__ = 1680;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"yK[k0__]",yK[k0__],0);
            }
            current_statement_begin__ = 1683;
            check_greater_or_equal(function__,"t",t,0);
            current_statement_begin__ = 1684;
            for (int k0__ = 0; k0__ < t; ++k0__) {
                check_greater_or_equal(function__,"p[k0__]",p[k0__],1);
            }
            current_statement_begin__ = 1685;
            for (int k0__ = 0; k0__ < t; ++k0__) {
                check_greater_or_equal(function__,"l[k0__]",l[k0__],1);
            }
            current_statement_begin__ = 1686;
            check_greater_or_equal(function__,"q",q,0);
            current_statement_begin__ = 1687;
            check_greater_or_equal(function__,"len_theta_L",len_theta_L,0);
            current_statement_begin__ = 1692;
            check_greater_or_equal(function__,"bN1",bN1,0);
            current_statement_begin__ = 1693;
            check_greater_or_equal(function__,"bK1",bK1,0);
            current_statement_begin__ = 1694;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"bK1_len[k0__]",bK1_len[k0__],0);
            }
            current_statement_begin__ = 1695;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"bK1_idx[k0__][k1__]",bK1_idx[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 1698;
            check_greater_or_equal(function__,"bN2",bN2,0);
            current_statement_begin__ = 1699;
            check_greater_or_equal(function__,"bK2",bK2,0);
            current_statement_begin__ = 1700;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"bK2_len[k0__]",bK2_len[k0__],0);
            }
            current_statement_begin__ = 1701;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"bK2_idx[k0__][k1__]",bK2_idx[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 1715;
            for (int k0__ = 0; k0__ < (logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"yInt1[k0__]",yInt1[k0__],0);
            }
            current_statement_begin__ = 1716;
            for (int k0__ = 0; k0__ < (logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"yInt2[k0__]",yInt2[k0__],0);
            }
            current_statement_begin__ = 1717;
            for (int k0__ = 0; k0__ < (logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"yInt3[k0__]",yInt3[k0__],0);
            }
            current_statement_begin__ = 1718;
            current_statement_begin__ = 1719;
            current_statement_begin__ = 1720;
            current_statement_begin__ = 1721;
            current_statement_begin__ = 1722;
            current_statement_begin__ = 1723;
            current_statement_begin__ = 1724;
            current_statement_begin__ = 1725;
            current_statement_begin__ = 1726;
            current_statement_begin__ = 1736;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"family[k0__]",family[k0__],0);
            }
            current_statement_begin__ = 1737;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"link[k0__]",link[k0__],0);
            }
            current_statement_begin__ = 1740;
            current_statement_begin__ = 1741;
            current_statement_begin__ = 1742;
            current_statement_begin__ = 1743;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_Z1_id[k0__]",y1_Z1_id[k0__],0);
            }
            current_statement_begin__ = 1744;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_Z1_id[k0__]",y2_Z1_id[k0__],0);
            }
            current_statement_begin__ = 1745;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_Z1_id[k0__]",y3_Z1_id[k0__],0);
            }
            current_statement_begin__ = 1748;
            current_statement_begin__ = 1749;
            current_statement_begin__ = 1750;
            current_statement_begin__ = 1751;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_Z2_id[k0__]",y1_Z2_id[k0__],0);
            }
            current_statement_begin__ = 1752;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_Z2_id[k0__]",y2_Z2_id[k0__],0);
            }
            current_statement_begin__ = 1753;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_Z2_id[k0__]",y3_Z2_id[k0__],0);
            }
            current_statement_begin__ = 1757;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"y_prior_dist[k0__]",y_prior_dist[k0__],0);
                check_less_or_equal(function__,"y_prior_dist[k0__]",y_prior_dist[k0__],7);
            }
            current_statement_begin__ = 1758;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"y_prior_dist_for_intercept[k0__]",y_prior_dist_for_intercept[k0__],0);
                check_less_or_equal(function__,"y_prior_dist_for_intercept[k0__]",y_prior_dist_for_intercept[k0__],2);
            }
            current_statement_begin__ = 1761;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"y_prior_dist_for_aux[k0__]",y_prior_dist_for_aux[k0__],0);
                check_less_or_equal(function__,"y_prior_dist_for_aux[k0__]",y_prior_dist_for_aux[k0__],3);
            }
            current_statement_begin__ = 1764;
            check_greater_or_equal(function__,"prior_dist_for_cov",prior_dist_for_cov,1);
            check_less_or_equal(function__,"prior_dist_for_cov",prior_dist_for_cov,2);
            current_statement_begin__ = 1767;
            check_greater_or_equal(function__,"prior_PD",prior_PD,0);
            check_less_or_equal(function__,"prior_PD",prior_PD,1);
            current_statement_begin__ = 1788;
            check_greater_or_equal(function__,"e_prior_dist01",e_prior_dist01,0);
            check_less_or_equal(function__,"e_prior_dist01",e_prior_dist01,6);
            current_statement_begin__ = 1789;
            check_greater_or_equal(function__,"e_prior_dist_for_intercept01",e_prior_dist_for_intercept01,0);
            check_less_or_equal(function__,"e_prior_dist_for_intercept01",e_prior_dist_for_intercept01,2);
            current_statement_begin__ = 1796;
            check_greater_or_equal(function__,"e_prior_dist_for_aux01",e_prior_dist_for_aux01,0);
            check_less_or_equal(function__,"e_prior_dist_for_aux01",e_prior_dist_for_aux01,3);
            current_statement_begin__ = 1802;
            check_greater_or_equal(function__,"basehaz_type01",basehaz_type01,1);
            check_less_or_equal(function__,"basehaz_type01",basehaz_type01,3);
            current_statement_begin__ = 1805;
            check_greater_or_equal(function__,"e_K01",e_K01,0);
            current_statement_begin__ = 1806;
            check_greater_or_equal(function__,"basehaz_nvars01",basehaz_nvars01,0);
            current_statement_begin__ = 1807;
            check_greater_or_equal(function__,"qnodes01",qnodes01,0);
            current_statement_begin__ = 1808;
            check_greater_or_equal(function__,"len_epts01",len_epts01,0);
            current_statement_begin__ = 1809;
            check_greater_or_equal(function__,"len_qpts01",len_qpts01,0);
            current_statement_begin__ = 1810;
            check_greater_or_equal(function__,"len_ipts01",len_ipts01,0);
            current_statement_begin__ = 1811;
            check_greater_or_equal(function__,"len_cpts01",len_cpts01,0);
            current_statement_begin__ = 1812;
            current_statement_begin__ = 1815;
            current_statement_begin__ = 1816;
            current_statement_begin__ = 1817;
            current_statement_begin__ = 1820;
            current_statement_begin__ = 1821;
            current_statement_begin__ = 1824;
            current_statement_begin__ = 1825;
            current_statement_begin__ = 1826;
            current_statement_begin__ = 1829;
            current_statement_begin__ = 1830;
            current_statement_begin__ = 1833;
            current_statement_begin__ = 1836;
            check_greater_or_equal(function__,"e_has_intercept01",e_has_intercept01,0);
            check_less_or_equal(function__,"e_has_intercept01",e_has_intercept01,1);
            current_statement_begin__ = 1846;
            check_greater_or_equal(function__,"e_prior_dist02",e_prior_dist02,0);
            check_less_or_equal(function__,"e_prior_dist02",e_prior_dist02,6);
            current_statement_begin__ = 1847;
            check_greater_or_equal(function__,"e_prior_dist_for_intercept02",e_prior_dist_for_intercept02,0);
            check_less_or_equal(function__,"e_prior_dist_for_intercept02",e_prior_dist_for_intercept02,2);
            current_statement_begin__ = 1854;
            check_greater_or_equal(function__,"e_prior_dist_for_aux02",e_prior_dist_for_aux02,0);
            check_less_or_equal(function__,"e_prior_dist_for_aux02",e_prior_dist_for_aux02,3);
            current_statement_begin__ = 1860;
            check_greater_or_equal(function__,"basehaz_type02",basehaz_type02,1);
            check_less_or_equal(function__,"basehaz_type02",basehaz_type02,3);
            current_statement_begin__ = 1863;
            check_greater_or_equal(function__,"e_K02",e_K02,0);
            current_statement_begin__ = 1864;
            check_greater_or_equal(function__,"basehaz_nvars02",basehaz_nvars02,0);
            current_statement_begin__ = 1865;
            check_greater_or_equal(function__,"qnodes02",qnodes02,0);
            current_statement_begin__ = 1866;
            check_greater_or_equal(function__,"len_epts02",len_epts02,0);
            current_statement_begin__ = 1867;
            check_greater_or_equal(function__,"len_qpts02",len_qpts02,0);
            current_statement_begin__ = 1868;
            check_greater_or_equal(function__,"len_ipts02",len_ipts02,0);
            current_statement_begin__ = 1869;
            check_greater_or_equal(function__,"len_cpts02",len_cpts02,0);
            current_statement_begin__ = 1870;
            current_statement_begin__ = 1873;
            current_statement_begin__ = 1874;
            current_statement_begin__ = 1875;
            current_statement_begin__ = 1878;
            current_statement_begin__ = 1879;
            current_statement_begin__ = 1882;
            current_statement_begin__ = 1883;
            current_statement_begin__ = 1884;
            current_statement_begin__ = 1887;
            current_statement_begin__ = 1888;
            current_statement_begin__ = 1891;
            current_statement_begin__ = 1894;
            check_greater_or_equal(function__,"e_has_intercept02",e_has_intercept02,0);
            check_less_or_equal(function__,"e_has_intercept02",e_has_intercept02,1);
            current_statement_begin__ = 1904;
            check_greater_or_equal(function__,"e_prior_dist12",e_prior_dist12,0);
            check_less_or_equal(function__,"e_prior_dist12",e_prior_dist12,6);
            current_statement_begin__ = 1905;
            check_greater_or_equal(function__,"e_prior_dist_for_intercept12",e_prior_dist_for_intercept12,0);
            check_less_or_equal(function__,"e_prior_dist_for_intercept12",e_prior_dist_for_intercept12,2);
            current_statement_begin__ = 1912;
            check_greater_or_equal(function__,"e_prior_dist_for_aux12",e_prior_dist_for_aux12,0);
            check_less_or_equal(function__,"e_prior_dist_for_aux12",e_prior_dist_for_aux12,3);
            current_statement_begin__ = 1918;
            check_greater_or_equal(function__,"basehaz_type12",basehaz_type12,1);
            check_less_or_equal(function__,"basehaz_type12",basehaz_type12,3);
            current_statement_begin__ = 1921;
            check_greater_or_equal(function__,"e_K12",e_K12,0);
            current_statement_begin__ = 1922;
            check_greater_or_equal(function__,"basehaz_nvars12",basehaz_nvars12,0);
            current_statement_begin__ = 1923;
            check_greater_or_equal(function__,"qnodes12",qnodes12,0);
            current_statement_begin__ = 1924;
            check_greater_or_equal(function__,"len_epts12",len_epts12,0);
            current_statement_begin__ = 1925;
            check_greater_or_equal(function__,"len_qpts12",len_qpts12,0);
            current_statement_begin__ = 1926;
            check_greater_or_equal(function__,"len_ipts12",len_ipts12,0);
            current_statement_begin__ = 1927;
            check_greater_or_equal(function__,"len_cpts12",len_cpts12,0);
            current_statement_begin__ = 1928;
            current_statement_begin__ = 1931;
            current_statement_begin__ = 1932;
            current_statement_begin__ = 1933;
            current_statement_begin__ = 1936;
            current_statement_begin__ = 1937;
            current_statement_begin__ = 1940;
            current_statement_begin__ = 1941;
            current_statement_begin__ = 1942;
            current_statement_begin__ = 1945;
            current_statement_begin__ = 1946;
            current_statement_begin__ = 1949;
            current_statement_begin__ = 1952;
            check_greater_or_equal(function__,"e_has_intercept12",e_has_intercept12,0);
            check_less_or_equal(function__,"e_has_intercept12",e_has_intercept12,1);
            current_statement_begin__ = 1979;
            check_greater_or_equal(function__,"a_prior_dist01",a_prior_dist01,0);
            check_less_or_equal(function__,"a_prior_dist01",a_prior_dist01,6);
            current_statement_begin__ = 1984;
            check_greater_or_equal(function__,"a_K01",a_K01,0);
            current_statement_begin__ = 1987;
            current_statement_begin__ = 1990;
            check_greater_or_equal(function__,"assoc01",assoc01,0);
            check_less_or_equal(function__,"assoc01",assoc01,1);
            current_statement_begin__ = 1993;
            for (int k0__ = 0; k0__ < 6; ++k0__) {
                for (int k1__ = 0; k1__ < 3; ++k1__) {
                    check_greater_or_equal(function__,"assoc_uses01[k0__][k1__]",assoc_uses01[k0__][k1__],0);
                    check_less_or_equal(function__,"assoc_uses01[k0__][k1__]",assoc_uses01[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 1996;
            for (int k0__ = 0; k0__ < 16; ++k0__) {
                for (int k1__ = 0; k1__ < M; ++k1__) {
                    check_greater_or_equal(function__,"has_assoc01[k0__][k1__]",has_assoc01[k0__][k1__],0);
                    check_less_or_equal(function__,"has_assoc01[k0__][k1__]",has_assoc01[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 1999;
            check_greater_or_equal(function__,"sum_size_which_b01",sum_size_which_b01,0);
            current_statement_begin__ = 2002;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"size_which_b01[k0__]",size_which_b01[k0__],0);
            }
            current_statement_begin__ = 2005;
            for (int k0__ = 0; k0__ < sum_size_which_b01; ++k0__) {
                check_greater_or_equal(function__,"which_b_zindex01[k0__]",which_b_zindex01[k0__],1);
            }
            current_statement_begin__ = 2008;
            check_greater_or_equal(function__,"sum_size_which_coef01",sum_size_which_coef01,0);
            current_statement_begin__ = 2011;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"size_which_coef01[k0__]",size_which_coef01[k0__],0);
            }
            current_statement_begin__ = 2014;
            for (int k0__ = 0; k0__ < sum_size_which_coef01; ++k0__) {
                check_greater_or_equal(function__,"which_coef_zindex01[k0__]",which_coef_zindex01[k0__],1);
            }
            current_statement_begin__ = 2017;
            for (int k0__ = 0; k0__ < sum_size_which_coef01; ++k0__) {
                check_greater_or_equal(function__,"which_coef_xindex01[k0__]",which_coef_xindex01[k0__],1);
            }
            current_statement_begin__ = 2020;
            check_greater_or_equal(function__,"sum_size_which_interactions01",sum_size_which_interactions01,0);
            current_statement_begin__ = 2024;
            for (int k0__ = 0; k0__ < (M * 4); ++k0__) {
                check_greater_or_equal(function__,"size_which_interactions01[k0__]",size_which_interactions01[k0__],0);
                check_less_or_equal(function__,"size_which_interactions01[k0__]",size_which_interactions01[k0__],sum_size_which_interactions01);
            }
            current_statement_begin__ = 2027;
            for (int k0__ = 0; k0__ < sum_size_which_interactions01; ++k0__) {
                check_greater_or_equal(function__,"which_interactions01[k0__]",which_interactions01[k0__],1);
            }
            current_statement_begin__ = 2030;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"y_qrows01[k0__]",y_qrows01[k0__],0);
            }
            current_statement_begin__ = 2036;
            current_statement_begin__ = 2037;
            current_statement_begin__ = 2038;
            current_statement_begin__ = 2042;
            current_statement_begin__ = 2043;
            current_statement_begin__ = 2044;
            current_statement_begin__ = 2048;
            current_statement_begin__ = 2049;
            current_statement_begin__ = 2050;
            current_statement_begin__ = 2054;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_eta_01[k0__]",y1_z1_id_eta_01[k0__],0);
            }
            current_statement_begin__ = 2055;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_eta_01[k0__]",y2_z1_id_eta_01[k0__],0);
            }
            current_statement_begin__ = 2056;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_eta_01[k0__]",y3_z1_id_eta_01[k0__],0);
            }
            current_statement_begin__ = 2060;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_eta_01[k0__]",y1_z2_id_eta_01[k0__],0);
            }
            current_statement_begin__ = 2061;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_eta_01[k0__]",y2_z2_id_eta_01[k0__],0);
            }
            current_statement_begin__ = 2062;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,1,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_eta_01[k0__]",y3_z2_id_eta_01[k0__],0);
            }
            current_statement_begin__ = 2068;
            current_statement_begin__ = 2069;
            current_statement_begin__ = 2070;
            current_statement_begin__ = 2074;
            current_statement_begin__ = 2075;
            current_statement_begin__ = 2076;
            current_statement_begin__ = 2080;
            current_statement_begin__ = 2081;
            current_statement_begin__ = 2082;
            current_statement_begin__ = 2086;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_eps_01[k0__]",y1_z1_id_eps_01[k0__],0);
            }
            current_statement_begin__ = 2087;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_eps_01[k0__]",y2_z1_id_eps_01[k0__],0);
            }
            current_statement_begin__ = 2088;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_eps_01[k0__]",y3_z1_id_eps_01[k0__],0);
            }
            current_statement_begin__ = 2092;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows01,1,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_eps_01[k0__]",y1_z2_id_eps_01[k0__],0);
            }
            current_statement_begin__ = 2093;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows01,2,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_eps_01[k0__]",y2_z2_id_eps_01[k0__],0);
            }
            current_statement_begin__ = 2094;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,2,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows01,3,"y_qrows01",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_eps_01[k0__]",y3_z2_id_eps_01[k0__],0);
            }
            current_statement_begin__ = 2098;
            check_greater_or_equal(function__,"auc_qnodes01",auc_qnodes01,0);
            current_statement_begin__ = 2099;
            check_greater_or_equal(function__,"y_qrows_for_auc01",y_qrows_for_auc01,0);
            current_statement_begin__ = 2100;
            current_statement_begin__ = 2104;
            current_statement_begin__ = 2105;
            current_statement_begin__ = 2106;
            current_statement_begin__ = 2110;
            current_statement_begin__ = 2111;
            current_statement_begin__ = 2112;
            current_statement_begin__ = 2116;
            current_statement_begin__ = 2117;
            current_statement_begin__ = 2118;
            current_statement_begin__ = 2122;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_auc_01[k0__]",y1_z1_id_auc_01[k0__],0);
            }
            current_statement_begin__ = 2123;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_auc_01[k0__]",y2_z1_id_auc_01[k0__],0);
            }
            current_statement_begin__ = 2124;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc01 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_auc_01[k0__]",y3_z1_id_auc_01[k0__],0);
            }
            current_statement_begin__ = 2128;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),1,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_auc_01[k0__]",y1_z2_id_auc_01[k0__],0);
            }
            current_statement_begin__ = 2129;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),2,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_auc_01[k0__]",y2_z2_id_auc_01[k0__],0);
            }
            current_statement_begin__ = 2130;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses01,3,"assoc_uses01",1),3,"assoc_uses01",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc01 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_auc_01[k0__]",y3_z2_id_auc_01[k0__],0);
            }
            current_statement_begin__ = 2135;
            for (int k0__ = 0; k0__ < (M * 4); ++k0__) {
                check_greater_or_equal(function__,"a_K_data01[k0__]",a_K_data01[k0__],0);
                check_less_or_equal(function__,"a_K_data01[k0__]",a_K_data01[k0__],a_K01);
            }
            current_statement_begin__ = 2138;
            current_statement_begin__ = 2141;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"idx_data01[k0__][k1__]",idx_data01[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 2145;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"has_grp01[k0__]",has_grp01[k0__],0);
                check_less_or_equal(function__,"has_grp01[k0__]",has_grp01[k0__],1);
            }
            current_statement_begin__ = 2146;
            check_greater_or_equal(function__,"grp_assoc01",grp_assoc01,0);
            check_less_or_equal(function__,"grp_assoc01",grp_assoc01,4);
            current_statement_begin__ = 2147;
            for (int k0__ = 0; k0__ < len_cpts01; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"idx_grp01[k0__][k1__]",idx_grp01[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 2157;
            check_greater_or_equal(function__,"a_prior_dist02",a_prior_dist02,0);
            check_less_or_equal(function__,"a_prior_dist02",a_prior_dist02,6);
            current_statement_begin__ = 2162;
            check_greater_or_equal(function__,"a_K02",a_K02,0);
            current_statement_begin__ = 2165;
            current_statement_begin__ = 2168;
            check_greater_or_equal(function__,"assoc02",assoc02,0);
            check_less_or_equal(function__,"assoc02",assoc02,1);
            current_statement_begin__ = 2171;
            for (int k0__ = 0; k0__ < 6; ++k0__) {
                for (int k1__ = 0; k1__ < 3; ++k1__) {
                    check_greater_or_equal(function__,"assoc_uses02[k0__][k1__]",assoc_uses02[k0__][k1__],0);
                    check_less_or_equal(function__,"assoc_uses02[k0__][k1__]",assoc_uses02[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 2174;
            for (int k0__ = 0; k0__ < 16; ++k0__) {
                for (int k1__ = 0; k1__ < M; ++k1__) {
                    check_greater_or_equal(function__,"has_assoc02[k0__][k1__]",has_assoc02[k0__][k1__],0);
                    check_less_or_equal(function__,"has_assoc02[k0__][k1__]",has_assoc02[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 2177;
            check_greater_or_equal(function__,"sum_size_which_b02",sum_size_which_b02,0);
            current_statement_begin__ = 2180;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"size_which_b02[k0__]",size_which_b02[k0__],0);
            }
            current_statement_begin__ = 2183;
            for (int k0__ = 0; k0__ < sum_size_which_b02; ++k0__) {
                check_greater_or_equal(function__,"which_b_zindex02[k0__]",which_b_zindex02[k0__],1);
            }
            current_statement_begin__ = 2186;
            check_greater_or_equal(function__,"sum_size_which_coef02",sum_size_which_coef02,0);
            current_statement_begin__ = 2189;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"size_which_coef02[k0__]",size_which_coef02[k0__],0);
            }
            current_statement_begin__ = 2192;
            for (int k0__ = 0; k0__ < sum_size_which_coef02; ++k0__) {
                check_greater_or_equal(function__,"which_coef_zindex02[k0__]",which_coef_zindex02[k0__],1);
            }
            current_statement_begin__ = 2195;
            for (int k0__ = 0; k0__ < sum_size_which_coef02; ++k0__) {
                check_greater_or_equal(function__,"which_coef_xindex02[k0__]",which_coef_xindex02[k0__],1);
            }
            current_statement_begin__ = 2198;
            check_greater_or_equal(function__,"sum_size_which_interactions02",sum_size_which_interactions02,0);
            current_statement_begin__ = 2202;
            for (int k0__ = 0; k0__ < (M * 4); ++k0__) {
                check_greater_or_equal(function__,"size_which_interactions02[k0__]",size_which_interactions02[k0__],0);
                check_less_or_equal(function__,"size_which_interactions02[k0__]",size_which_interactions02[k0__],sum_size_which_interactions02);
            }
            current_statement_begin__ = 2205;
            for (int k0__ = 0; k0__ < sum_size_which_interactions02; ++k0__) {
                check_greater_or_equal(function__,"which_interactions02[k0__]",which_interactions02[k0__],1);
            }
            current_statement_begin__ = 2208;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"y_qrows02[k0__]",y_qrows02[k0__],0);
            }
            current_statement_begin__ = 2214;
            current_statement_begin__ = 2215;
            current_statement_begin__ = 2216;
            current_statement_begin__ = 2220;
            current_statement_begin__ = 2221;
            current_statement_begin__ = 2222;
            current_statement_begin__ = 2226;
            current_statement_begin__ = 2227;
            current_statement_begin__ = 2228;
            current_statement_begin__ = 2232;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_eta_02[k0__]",y1_z1_id_eta_02[k0__],0);
            }
            current_statement_begin__ = 2233;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_eta_02[k0__]",y2_z1_id_eta_02[k0__],0);
            }
            current_statement_begin__ = 2234;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_eta_02[k0__]",y3_z1_id_eta_02[k0__],0);
            }
            current_statement_begin__ = 2238;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_eta_02[k0__]",y1_z2_id_eta_02[k0__],0);
            }
            current_statement_begin__ = 2239;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_eta_02[k0__]",y2_z2_id_eta_02[k0__],0);
            }
            current_statement_begin__ = 2240;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,1,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_eta_02[k0__]",y3_z2_id_eta_02[k0__],0);
            }
            current_statement_begin__ = 2246;
            current_statement_begin__ = 2247;
            current_statement_begin__ = 2248;
            current_statement_begin__ = 2252;
            current_statement_begin__ = 2253;
            current_statement_begin__ = 2254;
            current_statement_begin__ = 2258;
            current_statement_begin__ = 2259;
            current_statement_begin__ = 2260;
            current_statement_begin__ = 2264;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_eps_02[k0__]",y1_z1_id_eps_02[k0__],0);
            }
            current_statement_begin__ = 2265;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_eps_02[k0__]",y2_z1_id_eps_02[k0__],0);
            }
            current_statement_begin__ = 2266;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_eps_02[k0__]",y3_z1_id_eps_02[k0__],0);
            }
            current_statement_begin__ = 2270;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows02,1,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_eps_02[k0__]",y1_z2_id_eps_02[k0__],0);
            }
            current_statement_begin__ = 2271;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows02,2,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_eps_02[k0__]",y2_z2_id_eps_02[k0__],0);
            }
            current_statement_begin__ = 2272;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,2,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows02,3,"y_qrows02",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_eps_02[k0__]",y3_z2_id_eps_02[k0__],0);
            }
            current_statement_begin__ = 2276;
            check_greater_or_equal(function__,"auc_qnodes02",auc_qnodes02,0);
            current_statement_begin__ = 2277;
            check_greater_or_equal(function__,"y_qrows_for_auc02",y_qrows_for_auc02,0);
            current_statement_begin__ = 2278;
            current_statement_begin__ = 2282;
            current_statement_begin__ = 2283;
            current_statement_begin__ = 2284;
            current_statement_begin__ = 2288;
            current_statement_begin__ = 2289;
            current_statement_begin__ = 2290;
            current_statement_begin__ = 2294;
            current_statement_begin__ = 2295;
            current_statement_begin__ = 2296;
            current_statement_begin__ = 2300;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_auc_02[k0__]",y1_z1_id_auc_02[k0__],0);
            }
            current_statement_begin__ = 2301;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_auc_02[k0__]",y2_z1_id_auc_02[k0__],0);
            }
            current_statement_begin__ = 2302;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc02 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_auc_02[k0__]",y3_z1_id_auc_02[k0__],0);
            }
            current_statement_begin__ = 2306;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),1,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_auc_02[k0__]",y1_z2_id_auc_02[k0__],0);
            }
            current_statement_begin__ = 2307;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),2,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_auc_02[k0__]",y2_z2_id_auc_02[k0__],0);
            }
            current_statement_begin__ = 2308;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses02,3,"assoc_uses02",1),3,"assoc_uses02",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc02 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_auc_02[k0__]",y3_z2_id_auc_02[k0__],0);
            }
            current_statement_begin__ = 2313;
            for (int k0__ = 0; k0__ < (M * 4); ++k0__) {
                check_greater_or_equal(function__,"a_K_data02[k0__]",a_K_data02[k0__],0);
                check_less_or_equal(function__,"a_K_data02[k0__]",a_K_data02[k0__],a_K02);
            }
            current_statement_begin__ = 2316;
            current_statement_begin__ = 2319;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"idx_data02[k0__][k1__]",idx_data02[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 2323;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"has_grp02[k0__]",has_grp02[k0__],0);
                check_less_or_equal(function__,"has_grp02[k0__]",has_grp02[k0__],1);
            }
            current_statement_begin__ = 2324;
            check_greater_or_equal(function__,"grp_assoc02",grp_assoc02,0);
            check_less_or_equal(function__,"grp_assoc02",grp_assoc02,4);
            current_statement_begin__ = 2325;
            for (int k0__ = 0; k0__ < len_cpts02; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"idx_grp02[k0__][k1__]",idx_grp02[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 2335;
            check_greater_or_equal(function__,"a_prior_dist12",a_prior_dist12,0);
            check_less_or_equal(function__,"a_prior_dist12",a_prior_dist12,6);
            current_statement_begin__ = 2340;
            check_greater_or_equal(function__,"a_K12",a_K12,0);
            current_statement_begin__ = 2343;
            current_statement_begin__ = 2346;
            check_greater_or_equal(function__,"assoc12",assoc12,0);
            check_less_or_equal(function__,"assoc12",assoc12,1);
            current_statement_begin__ = 2349;
            for (int k0__ = 0; k0__ < 6; ++k0__) {
                for (int k1__ = 0; k1__ < 3; ++k1__) {
                    check_greater_or_equal(function__,"assoc_uses12[k0__][k1__]",assoc_uses12[k0__][k1__],0);
                    check_less_or_equal(function__,"assoc_uses12[k0__][k1__]",assoc_uses12[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 2352;
            for (int k0__ = 0; k0__ < 16; ++k0__) {
                for (int k1__ = 0; k1__ < M; ++k1__) {
                    check_greater_or_equal(function__,"has_assoc12[k0__][k1__]",has_assoc12[k0__][k1__],0);
                    check_less_or_equal(function__,"has_assoc12[k0__][k1__]",has_assoc12[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 2355;
            check_greater_or_equal(function__,"sum_size_which_b12",sum_size_which_b12,0);
            current_statement_begin__ = 2358;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"size_which_b12[k0__]",size_which_b12[k0__],0);
            }
            current_statement_begin__ = 2361;
            for (int k0__ = 0; k0__ < sum_size_which_b12; ++k0__) {
                check_greater_or_equal(function__,"which_b_zindex12[k0__]",which_b_zindex12[k0__],1);
            }
            current_statement_begin__ = 2364;
            check_greater_or_equal(function__,"sum_size_which_coef12",sum_size_which_coef12,0);
            current_statement_begin__ = 2367;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"size_which_coef12[k0__]",size_which_coef12[k0__],0);
            }
            current_statement_begin__ = 2370;
            for (int k0__ = 0; k0__ < sum_size_which_coef12; ++k0__) {
                check_greater_or_equal(function__,"which_coef_zindex12[k0__]",which_coef_zindex12[k0__],1);
            }
            current_statement_begin__ = 2373;
            for (int k0__ = 0; k0__ < sum_size_which_coef12; ++k0__) {
                check_greater_or_equal(function__,"which_coef_xindex12[k0__]",which_coef_xindex12[k0__],1);
            }
            current_statement_begin__ = 2376;
            check_greater_or_equal(function__,"sum_size_which_interactions12",sum_size_which_interactions12,0);
            current_statement_begin__ = 2380;
            for (int k0__ = 0; k0__ < (M * 4); ++k0__) {
                check_greater_or_equal(function__,"size_which_interactions12[k0__]",size_which_interactions12[k0__],0);
                check_less_or_equal(function__,"size_which_interactions12[k0__]",size_which_interactions12[k0__],sum_size_which_interactions12);
            }
            current_statement_begin__ = 2383;
            for (int k0__ = 0; k0__ < sum_size_which_interactions12; ++k0__) {
                check_greater_or_equal(function__,"which_interactions12[k0__]",which_interactions12[k0__],1);
            }
            current_statement_begin__ = 2386;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"y_qrows12[k0__]",y_qrows12[k0__],0);
            }
            current_statement_begin__ = 2392;
            current_statement_begin__ = 2393;
            current_statement_begin__ = 2394;
            current_statement_begin__ = 2398;
            current_statement_begin__ = 2399;
            current_statement_begin__ = 2400;
            current_statement_begin__ = 2404;
            current_statement_begin__ = 2405;
            current_statement_begin__ = 2406;
            current_statement_begin__ = 2410;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_eta_12[k0__]",y1_z1_id_eta_12[k0__],0);
            }
            current_statement_begin__ = 2411;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_eta_12[k0__]",y2_z1_id_eta_12[k0__],0);
            }
            current_statement_begin__ = 2412;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_eta_12[k0__]",y3_z1_id_eta_12[k0__],0);
            }
            current_statement_begin__ = 2416;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_eta_12[k0__]",y1_z2_id_eta_12[k0__],0);
            }
            current_statement_begin__ = 2417;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_eta_12[k0__]",y2_z2_id_eta_12[k0__],0);
            }
            current_statement_begin__ = 2418;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,1,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_eta_12[k0__]",y3_z2_id_eta_12[k0__],0);
            }
            current_statement_begin__ = 2424;
            current_statement_begin__ = 2425;
            current_statement_begin__ = 2426;
            current_statement_begin__ = 2430;
            current_statement_begin__ = 2431;
            current_statement_begin__ = 2432;
            current_statement_begin__ = 2436;
            current_statement_begin__ = 2437;
            current_statement_begin__ = 2438;
            current_statement_begin__ = 2442;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_eps_12[k0__]",y1_z1_id_eps_12[k0__],0);
            }
            current_statement_begin__ = 2443;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_eps_12[k0__]",y2_z1_id_eps_12[k0__],0);
            }
            current_statement_begin__ = 2444;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_eps_12[k0__]",y3_z1_id_eps_12[k0__],0);
            }
            current_statement_begin__ = 2448;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? get_base1(y_qrows12,1,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_eps_12[k0__]",y1_z2_id_eps_12[k0__],0);
            }
            current_statement_begin__ = 2449;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? get_base1(y_qrows12,2,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_eps_12[k0__]",y2_z2_id_eps_12[k0__],0);
            }
            current_statement_begin__ = 2450;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,2,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? get_base1(y_qrows12,3,"y_qrows12",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_eps_12[k0__]",y3_z2_id_eps_12[k0__],0);
            }
            current_statement_begin__ = 2454;
            check_greater_or_equal(function__,"auc_qnodes12",auc_qnodes12,0);
            current_statement_begin__ = 2455;
            check_greater_or_equal(function__,"y_qrows_for_auc12",y_qrows_for_auc12,0);
            current_statement_begin__ = 2456;
            current_statement_begin__ = 2460;
            current_statement_begin__ = 2461;
            current_statement_begin__ = 2462;
            current_statement_begin__ = 2466;
            current_statement_begin__ = 2467;
            current_statement_begin__ = 2468;
            current_statement_begin__ = 2472;
            current_statement_begin__ = 2473;
            current_statement_begin__ = 2474;
            current_statement_begin__ = 2478;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z1_id_auc_12[k0__]",y1_z1_id_auc_12[k0__],0);
            }
            current_statement_begin__ = 2479;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z1_id_auc_12[k0__]",y2_z1_id_auc_12[k0__],0);
            }
            current_statement_begin__ = 2480;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0))) ? y_qrows_for_auc12 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z1_id_auc_12[k0__]",y3_z1_id_auc_12[k0__],0);
            }
            current_statement_begin__ = 2484;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),1,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_z2_id_auc_12[k0__]",y1_z2_id_auc_12[k0__],0);
            }
            current_statement_begin__ = 2485;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),2,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_z2_id_auc_12[k0__]",y2_z2_id_auc_12[k0__],0);
            }
            current_statement_begin__ = 2486;
            for (int k0__ = 0; k0__ < ((primitive_value(logical_eq(get_base1(get_base1(assoc_uses12,3,"assoc_uses12",1),3,"assoc_uses12",2),1)) && primitive_value(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0))) ? y_qrows_for_auc12 : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_z2_id_auc_12[k0__]",y3_z2_id_auc_12[k0__],0);
            }
            current_statement_begin__ = 2491;
            for (int k0__ = 0; k0__ < (M * 4); ++k0__) {
                check_greater_or_equal(function__,"a_K_data12[k0__]",a_K_data12[k0__],0);
                check_less_or_equal(function__,"a_K_data12[k0__]",a_K_data12[k0__],a_K12);
            }
            current_statement_begin__ = 2494;
            current_statement_begin__ = 2497;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"idx_data12[k0__][k1__]",idx_data12[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 2501;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"has_grp12[k0__]",has_grp12[k0__],0);
                check_less_or_equal(function__,"has_grp12[k0__]",has_grp12[k0__],1);
            }
            current_statement_begin__ = 2502;
            check_greater_or_equal(function__,"grp_assoc12",grp_assoc12,0);
            check_less_or_equal(function__,"grp_assoc12",grp_assoc12,4);
            current_statement_begin__ = 2503;
            for (int k0__ = 0; k0__ < len_cpts12; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"idx_grp12[k0__][k1__]",idx_grp12[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 2512;
            current_statement_begin__ = 2513;
            current_statement_begin__ = 2514;
            current_statement_begin__ = 2515;
            check_greater_or_equal(function__,"y_prior_scale1",y_prior_scale1,0);
            current_statement_begin__ = 2516;
            check_greater_or_equal(function__,"y_prior_scale2",y_prior_scale2,0);
            current_statement_begin__ = 2517;
            check_greater_or_equal(function__,"y_prior_scale3",y_prior_scale3,0);
            current_statement_begin__ = 2518;
            check_greater_or_equal(function__,"y_prior_df1",y_prior_df1,0);
            current_statement_begin__ = 2519;
            check_greater_or_equal(function__,"y_prior_df2",y_prior_df2,0);
            current_statement_begin__ = 2520;
            check_greater_or_equal(function__,"y_prior_df3",y_prior_df3,0);
            current_statement_begin__ = 2521;
            check_greater_or_equal(function__,"y_global_prior_df",y_global_prior_df,0);
            current_statement_begin__ = 2522;
            check_greater_or_equal(function__,"y_global_prior_scale",y_global_prior_scale,0);
            current_statement_begin__ = 2523;
            check_greater_or_equal(function__,"y_slab_df",y_slab_df,0);
            current_statement_begin__ = 2524;
            check_greater_or_equal(function__,"y_slab_scale",y_slab_scale,0);
            current_statement_begin__ = 2527;
            current_statement_begin__ = 2528;
            check_greater_or_equal(function__,"y_prior_scale_for_intercept",y_prior_scale_for_intercept,0);
            current_statement_begin__ = 2529;
            check_greater_or_equal(function__,"y_prior_df_for_intercept",y_prior_df_for_intercept,0);
            current_statement_begin__ = 2532;
            check_greater_or_equal(function__,"y_prior_mean_for_aux",y_prior_mean_for_aux,0);
            current_statement_begin__ = 2533;
            check_greater_or_equal(function__,"y_prior_scale_for_aux",y_prior_scale_for_aux,0);
            current_statement_begin__ = 2534;
            check_greater_or_equal(function__,"y_prior_df_for_aux",y_prior_df_for_aux,0);
            current_statement_begin__ = 2537;
            check_greater_or_equal(function__,"len_concentration",len_concentration,0);
            current_statement_begin__ = 2538;
            check_greater_or_equal(function__,"len_regularization",len_regularization,0);
            current_statement_begin__ = 2539;
            check_greater_or_equal(function__,"b_prior_shape",b_prior_shape,0);
            current_statement_begin__ = 2540;
            check_greater_or_equal(function__,"b_prior_scale",b_prior_scale,0);
            current_statement_begin__ = 2541;
            for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
                check_greater_or_equal(function__,"b_prior_concentration[k0__]",b_prior_concentration[k0__],0);
            }
            current_statement_begin__ = 2542;
            for (int k0__ = 0; k0__ < len_regularization; ++k0__) {
                check_greater_or_equal(function__,"b_prior_regularization[k0__]",b_prior_regularization[k0__],0);
            }
            current_statement_begin__ = 2545;
            check_greater_or_equal(function__,"b1_prior_scale",b1_prior_scale,0);
            current_statement_begin__ = 2546;
            check_greater_or_equal(function__,"b2_prior_scale",b2_prior_scale,0);
            current_statement_begin__ = 2547;
            check_greater_or_equal(function__,"b1_prior_df",b1_prior_df,0);
            current_statement_begin__ = 2548;
            check_greater_or_equal(function__,"b2_prior_df",b2_prior_df,0);
            current_statement_begin__ = 2549;
            check_greater_or_equal(function__,"b1_prior_regularization",b1_prior_regularization,0);
            current_statement_begin__ = 2550;
            check_greater_or_equal(function__,"b2_prior_regularization",b2_prior_regularization,0);
            current_statement_begin__ = 2552;
            current_statement_begin__ = 2553;
            current_statement_begin__ = 2554;
            current_statement_begin__ = 2555;
            check_greater_or_equal(function__,"e_prior_scale01",e_prior_scale01,0);
            current_statement_begin__ = 2556;
            check_greater_or_equal(function__,"e_prior_scale_for_intercept01",e_prior_scale_for_intercept01,0);
            current_statement_begin__ = 2557;
            check_greater_or_equal(function__,"e_prior_scale_for_aux01",e_prior_scale_for_aux01,0);
            current_statement_begin__ = 2558;
            check_greater_or_equal(function__,"e_prior_df01",e_prior_df01,0);
            current_statement_begin__ = 2559;
            check_greater_or_equal(function__,"e_prior_df_for_intercept01",e_prior_df_for_intercept01,0);
            current_statement_begin__ = 2560;
            check_greater_or_equal(function__,"e_prior_df_for_aux01",e_prior_df_for_aux01,0);
            current_statement_begin__ = 2561;
            check_greater_or_equal(function__,"e_global_prior_scale01",e_global_prior_scale01,0);
            current_statement_begin__ = 2562;
            check_greater_or_equal(function__,"e_global_prior_df01",e_global_prior_df01,0);
            current_statement_begin__ = 2563;
            check_greater_or_equal(function__,"e_slab_df01",e_slab_df01,0);
            current_statement_begin__ = 2564;
            check_greater_or_equal(function__,"e_slab_scale01",e_slab_scale01,0);
            current_statement_begin__ = 2567;
            current_statement_begin__ = 2568;
            current_statement_begin__ = 2569;
            current_statement_begin__ = 2570;
            check_greater_or_equal(function__,"e_prior_scale02",e_prior_scale02,0);
            current_statement_begin__ = 2571;
            check_greater_or_equal(function__,"e_prior_scale_for_intercept02",e_prior_scale_for_intercept02,0);
            current_statement_begin__ = 2572;
            check_greater_or_equal(function__,"e_prior_scale_for_aux02",e_prior_scale_for_aux02,0);
            current_statement_begin__ = 2573;
            check_greater_or_equal(function__,"e_prior_df02",e_prior_df02,0);
            current_statement_begin__ = 2574;
            check_greater_or_equal(function__,"e_prior_df_for_intercept02",e_prior_df_for_intercept02,0);
            current_statement_begin__ = 2575;
            check_greater_or_equal(function__,"e_prior_df_for_aux02",e_prior_df_for_aux02,0);
            current_statement_begin__ = 2576;
            check_greater_or_equal(function__,"e_global_prior_scale02",e_global_prior_scale02,0);
            current_statement_begin__ = 2577;
            check_greater_or_equal(function__,"e_global_prior_df02",e_global_prior_df02,0);
            current_statement_begin__ = 2578;
            check_greater_or_equal(function__,"e_slab_df02",e_slab_df02,0);
            current_statement_begin__ = 2579;
            check_greater_or_equal(function__,"e_slab_scale02",e_slab_scale02,0);
            current_statement_begin__ = 2582;
            current_statement_begin__ = 2583;
            current_statement_begin__ = 2584;
            current_statement_begin__ = 2585;
            check_greater_or_equal(function__,"e_prior_scale12",e_prior_scale12,0);
            current_statement_begin__ = 2586;
            check_greater_or_equal(function__,"e_prior_scale_for_intercept12",e_prior_scale_for_intercept12,0);
            current_statement_begin__ = 2587;
            check_greater_or_equal(function__,"e_prior_scale_for_aux12",e_prior_scale_for_aux12,0);
            current_statement_begin__ = 2588;
            check_greater_or_equal(function__,"e_prior_df12",e_prior_df12,0);
            current_statement_begin__ = 2589;
            check_greater_or_equal(function__,"e_prior_df_for_intercept12",e_prior_df_for_intercept12,0);
            current_statement_begin__ = 2590;
            check_greater_or_equal(function__,"e_prior_df_for_aux12",e_prior_df_for_aux12,0);
            current_statement_begin__ = 2591;
            check_greater_or_equal(function__,"e_global_prior_scale12",e_global_prior_scale12,0);
            current_statement_begin__ = 2592;
            check_greater_or_equal(function__,"e_global_prior_df12",e_global_prior_df12,0);
            current_statement_begin__ = 2593;
            check_greater_or_equal(function__,"e_slab_df12",e_slab_df12,0);
            current_statement_begin__ = 2594;
            check_greater_or_equal(function__,"e_slab_scale12",e_slab_scale12,0);
            current_statement_begin__ = 2601;
            current_statement_begin__ = 2602;
            check_greater_or_equal(function__,"a_prior_scale01",a_prior_scale01,0);
            current_statement_begin__ = 2603;
            check_greater_or_equal(function__,"a_prior_df01",a_prior_df01,0);
            current_statement_begin__ = 2604;
            check_greater_or_equal(function__,"a_global_prior_scale01",a_global_prior_scale01,0);
            current_statement_begin__ = 2605;
            check_greater_or_equal(function__,"a_global_prior_df01",a_global_prior_df01,0);
            current_statement_begin__ = 2606;
            check_greater_or_equal(function__,"a_slab_df01",a_slab_df01,0);
            current_statement_begin__ = 2607;
            check_greater_or_equal(function__,"a_slab_scale01",a_slab_scale01,0);
            current_statement_begin__ = 2610;
            current_statement_begin__ = 2611;
            check_greater_or_equal(function__,"a_prior_scale02",a_prior_scale02,0);
            current_statement_begin__ = 2612;
            check_greater_or_equal(function__,"a_prior_df02",a_prior_df02,0);
            current_statement_begin__ = 2613;
            check_greater_or_equal(function__,"a_global_prior_scale02",a_global_prior_scale02,0);
            current_statement_begin__ = 2614;
            check_greater_or_equal(function__,"a_global_prior_df02",a_global_prior_df02,0);
            current_statement_begin__ = 2615;
            check_greater_or_equal(function__,"a_slab_df02",a_slab_df02,0);
            current_statement_begin__ = 2616;
            check_greater_or_equal(function__,"a_slab_scale02",a_slab_scale02,0);
            current_statement_begin__ = 2619;
            current_statement_begin__ = 2620;
            check_greater_or_equal(function__,"a_prior_scale12",a_prior_scale12,0);
            current_statement_begin__ = 2621;
            check_greater_or_equal(function__,"a_prior_df12",a_prior_df12,0);
            current_statement_begin__ = 2622;
            check_greater_or_equal(function__,"a_global_prior_scale12",a_global_prior_scale12,0);
            current_statement_begin__ = 2623;
            check_greater_or_equal(function__,"a_global_prior_df12",a_global_prior_df12,0);
            current_statement_begin__ = 2624;
            check_greater_or_equal(function__,"a_slab_df12",a_slab_df12,0);
            current_statement_begin__ = 2625;
            check_greater_or_equal(function__,"a_slab_scale12",a_slab_scale12,0);
            // initialize data variables
            current_statement_begin__ = 2634;
            e_hs01 = int(0);
            stan::math::fill(e_hs01, std::numeric_limits<int>::min());
            stan::math::assign(e_hs01,get_nvars_for_hs(e_prior_dist01, pstream__));
            current_statement_begin__ = 2635;
            a_hs01 = int(0);
            stan::math::fill(a_hs01, std::numeric_limits<int>::min());
            stan::math::assign(a_hs01,get_nvars_for_hs(a_prior_dist01, pstream__));
            current_statement_begin__ = 2636;
            e_hs02 = int(0);
            stan::math::fill(e_hs02, std::numeric_limits<int>::min());
            stan::math::assign(e_hs02,get_nvars_for_hs(e_prior_dist02, pstream__));
            current_statement_begin__ = 2637;
            a_hs02 = int(0);
            stan::math::fill(a_hs02, std::numeric_limits<int>::min());
            stan::math::assign(a_hs02,get_nvars_for_hs(a_prior_dist02, pstream__));
            current_statement_begin__ = 2638;
            e_hs12 = int(0);
            stan::math::fill(e_hs12, std::numeric_limits<int>::min());
            stan::math::assign(e_hs12,get_nvars_for_hs(e_prior_dist12, pstream__));
            current_statement_begin__ = 2639;
            a_hs12 = int(0);
            stan::math::fill(a_hs12, std::numeric_limits<int>::min());
            stan::math::assign(a_hs12,get_nvars_for_hs(a_prior_dist12, pstream__));
            current_statement_begin__ = 2641;
            validate_non_negative_index("log_epts01", "len_epts01", len_epts01);
            log_epts01 = vector_d(static_cast<Eigen::VectorXd::Index>(len_epts01));
            stan::math::fill(log_epts01,DUMMY_VAR__);
            stan::math::assign(log_epts01,stan::math::log(epts01));
            current_statement_begin__ = 2642;
            validate_non_negative_index("log_epts02", "len_epts02", len_epts02);
            log_epts02 = vector_d(static_cast<Eigen::VectorXd::Index>(len_epts02));
            stan::math::fill(log_epts02,DUMMY_VAR__);
            stan::math::assign(log_epts02,stan::math::log(epts02));
            current_statement_begin__ = 2643;
            validate_non_negative_index("log_epts12", "len_epts12", len_epts12);
            log_epts12 = vector_d(static_cast<Eigen::VectorXd::Index>(len_epts12));
            stan::math::fill(log_epts12,DUMMY_VAR__);
            stan::math::assign(log_epts12,stan::math::log(epts12));
            current_statement_begin__ = 2645;
            validate_non_negative_index("log_qpts01", "len_qpts01", len_qpts01);
            log_qpts01 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts01));
            stan::math::fill(log_qpts01,DUMMY_VAR__);
            stan::math::assign(log_qpts01,stan::math::log(qpts01));
            current_statement_begin__ = 2646;
            validate_non_negative_index("log_qpts02", "len_qpts02", len_qpts02);
            log_qpts02 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts02));
            stan::math::fill(log_qpts02,DUMMY_VAR__);
            stan::math::assign(log_qpts02,stan::math::log(qpts02));
            current_statement_begin__ = 2647;
            validate_non_negative_index("log_qpts12", "len_qpts12", len_qpts12);
            log_qpts12 = vector_d(static_cast<Eigen::VectorXd::Index>(len_qpts12));
            stan::math::fill(log_qpts12,DUMMY_VAR__);
            stan::math::assign(log_qpts12,stan::math::log(qpts12));
            current_statement_begin__ = 2649;
            validate_non_negative_index("log_ipts01", "len_ipts01", len_ipts01);
            log_ipts01 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts01));
            stan::math::fill(log_ipts01,DUMMY_VAR__);
            stan::math::assign(log_ipts01,stan::math::log(ipts01));
            current_statement_begin__ = 2650;
            validate_non_negative_index("log_ipts02", "len_ipts02", len_ipts02);
            log_ipts02 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts02));
            stan::math::fill(log_ipts02,DUMMY_VAR__);
            stan::math::assign(log_ipts02,stan::math::log(ipts02));
            current_statement_begin__ = 2651;
            validate_non_negative_index("log_ipts12", "len_ipts12", len_ipts12);
            log_ipts12 = vector_d(static_cast<Eigen::VectorXd::Index>(len_ipts12));
            stan::math::fill(log_ipts12,DUMMY_VAR__);
            stan::math::assign(log_ipts12,stan::math::log(ipts12));
            current_statement_begin__ = 2653;
            sum_epts01 = double(0);
            stan::math::fill(sum_epts01,DUMMY_VAR__);
            stan::math::assign(sum_epts01,sum(epts01));
            current_statement_begin__ = 2654;
            sum_epts02 = double(0);
            stan::math::fill(sum_epts02,DUMMY_VAR__);
            stan::math::assign(sum_epts02,sum(epts02));
            current_statement_begin__ = 2655;
            sum_epts12 = double(0);
            stan::math::fill(sum_epts12,DUMMY_VAR__);
            stan::math::assign(sum_epts12,sum(epts12));
            current_statement_begin__ = 2657;
            sum_log_epts01 = double(0);
            stan::math::fill(sum_log_epts01,DUMMY_VAR__);
            stan::math::assign(sum_log_epts01,sum(log_epts01));
            current_statement_begin__ = 2658;
            sum_log_epts02 = double(0);
            stan::math::fill(sum_log_epts02,DUMMY_VAR__);
            stan::math::assign(sum_log_epts02,sum(log_epts02));
            current_statement_begin__ = 2659;
            sum_log_epts12 = double(0);
            stan::math::fill(sum_log_epts12,DUMMY_VAR__);
            stan::math::assign(sum_log_epts12,sum(log_epts12));
            current_statement_begin__ = 2669;
            yHs1 = int(0);
            stan::math::fill(yHs1, std::numeric_limits<int>::min());
            stan::math::assign(yHs1,get_nvars_for_hs((logical_gt(M,0) ? get_base1(y_prior_dist,1,"y_prior_dist",1) : 0 ), pstream__));
            current_statement_begin__ = 2670;
            yHs2 = int(0);
            stan::math::fill(yHs2, std::numeric_limits<int>::min());
            stan::math::assign(yHs2,get_nvars_for_hs((logical_gt(M,1) ? get_base1(y_prior_dist,2,"y_prior_dist",1) : 0 ), pstream__));
            current_statement_begin__ = 2671;
            yHs3 = int(0);
            stan::math::fill(yHs3, std::numeric_limits<int>::min());
            stan::math::assign(yHs3,get_nvars_for_hs((logical_gt(M,2) ? get_base1(y_prior_dist,3,"y_prior_dist",1) : 0 ), pstream__));
            current_statement_begin__ = 2674;
            len_z_T = int(0);
            stan::math::fill(len_z_T, std::numeric_limits<int>::min());
            stan::math::assign(len_z_T,0);
            current_statement_begin__ = 2675;
            len_var_group = int(0);
            stan::math::fill(len_var_group, std::numeric_limits<int>::min());
            stan::math::assign(len_var_group,(sum(p) * logical_gt(t,0)));
            current_statement_begin__ = 2676;
            len_rho = int(0);
            stan::math::fill(len_rho, std::numeric_limits<int>::min());
            stan::math::assign(len_rho,(sum(p) - t));
            current_statement_begin__ = 2677;
            pos = int(0);
            stan::math::fill(pos, std::numeric_limits<int>::min());
            stan::math::assign(pos,1);
            current_statement_begin__ = 2678;
            validate_non_negative_index("delta", "len_concentration", len_concentration);
            delta = std::vector<double>(len_concentration,double(0));
            stan::math::fill(delta,DUMMY_VAR__);
            current_statement_begin__ = 2681;
            validate_non_negative_index("bCov1_idx", "(logical_eq(prior_dist_for_cov,2) ? (bK1 + choose(bK1,2)) : 0 )", (logical_eq(prior_dist_for_cov,2) ? (bK1 + choose(bK1,2)) : 0 ));
            bCov1_idx = std::vector<int>((logical_eq(prior_dist_for_cov,2) ? (bK1 + choose(bK1,2)) : 0 ),int(0));
            stan::math::fill(bCov1_idx, std::numeric_limits<int>::min());
            current_statement_begin__ = 2682;
            validate_non_negative_index("bCov2_idx", "(logical_eq(prior_dist_for_cov,2) ? (bK2 + choose(bK2,2)) : 0 )", (logical_eq(prior_dist_for_cov,2) ? (bK2 + choose(bK2,2)) : 0 ));
            bCov2_idx = std::vector<int>((logical_eq(prior_dist_for_cov,2) ? (bK2 + choose(bK2,2)) : 0 ),int(0));
            stan::math::fill(bCov2_idx, std::numeric_limits<int>::min());
            current_statement_begin__ = 2685;
            sum_log_y1 = double(0);
            stan::math::fill(sum_log_y1,DUMMY_VAR__);
            stan::math::assign(sum_log_y1,((primitive_value(logical_gt(M,0)) && primitive_value((primitive_value(logical_eq(get_base1(family,1,"family",1),2)) || primitive_value(logical_eq(get_base1(family,1,"family",1),3))))) ? sum(stan::math::log(yReal1)) : stan::math::not_a_number() ));
            current_statement_begin__ = 2687;
            sum_log_y2 = double(0);
            stan::math::fill(sum_log_y2,DUMMY_VAR__);
            stan::math::assign(sum_log_y2,((primitive_value(logical_gt(M,1)) && primitive_value((primitive_value(logical_eq(get_base1(family,2,"family",1),2)) || primitive_value(logical_eq(get_base1(family,2,"family",1),3))))) ? sum(stan::math::log(yReal2)) : stan::math::not_a_number() ));
            current_statement_begin__ = 2689;
            sum_log_y3 = double(0);
            stan::math::fill(sum_log_y3,DUMMY_VAR__);
            stan::math::assign(sum_log_y3,((primitive_value(logical_gt(M,2)) && primitive_value((primitive_value(logical_eq(get_base1(family,3,"family",1),2)) || primitive_value(logical_eq(get_base1(family,3,"family",1),3))))) ? sum(stan::math::log(yReal3)) : stan::math::not_a_number() ));
            current_statement_begin__ = 2691;
            validate_non_negative_index("sqrt_y1", "((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,\"family\",1),3))) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            sqrt_y1 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            stan::math::fill(sqrt_y1,DUMMY_VAR__);
            current_statement_begin__ = 2692;
            validate_non_negative_index("sqrt_y2", "((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,\"family\",1),3))) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            sqrt_y2 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            stan::math::fill(sqrt_y2,DUMMY_VAR__);
            current_statement_begin__ = 2693;
            validate_non_negative_index("sqrt_y3", "((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,\"family\",1),3))) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            sqrt_y3 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            stan::math::fill(sqrt_y3,DUMMY_VAR__);
            current_statement_begin__ = 2694;
            validate_non_negative_index("log_y1", "((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,\"family\",1),3))) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            log_y1 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            stan::math::fill(log_y1,DUMMY_VAR__);
            current_statement_begin__ = 2695;
            validate_non_negative_index("log_y2", "((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,\"family\",1),3))) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            log_y2 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            stan::math::fill(log_y2,DUMMY_VAR__);
            current_statement_begin__ = 2696;
            validate_non_negative_index("log_y3", "((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,\"family\",1),3))) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            log_y3 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            stan::math::fill(log_y3,DUMMY_VAR__);

            current_statement_begin__ = 2697;
            if (as_bool((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))))) {

                current_statement_begin__ = 2698;
                stan::math::assign(sqrt_y1, stan::math::sqrt(yReal1));
                current_statement_begin__ = 2699;
                stan::math::assign(log_y1, stan::math::log(yReal1));
            }
            current_statement_begin__ = 2701;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))))) {

                current_statement_begin__ = 2702;
                stan::math::assign(sqrt_y2, stan::math::sqrt(yReal2));
                current_statement_begin__ = 2703;
                stan::math::assign(log_y2, stan::math::log(yReal2));
            }
            current_statement_begin__ = 2705;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))))) {

                current_statement_begin__ = 2706;
                stan::math::assign(sqrt_y3, stan::math::sqrt(yReal3));
                current_statement_begin__ = 2707;
                stan::math::assign(log_y3, stan::math::log(yReal3));
            }
            current_statement_begin__ = 2711;
            if (as_bool(logical_eq(prior_dist_for_cov,1))) {

                current_statement_begin__ = 2712;
                for (int i = 1; i <= t; ++i) {

                    current_statement_begin__ = 2713;
                    if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {

                        current_statement_begin__ = 2714;
                        for (int j = 1; j <= get_base1(p,i,"p",1); ++j) {

                            current_statement_begin__ = 2715;
                            stan::model::assign(delta, 
                                        stan::model::cons_list(stan::model::index_uni(pos), stan::model::nil_index_list()), 
                                        get_base1(b_prior_concentration,j,"b_prior_concentration",1), 
                                        "assigning variable delta");
                            current_statement_begin__ = 2716;
                            stan::math::assign(pos, (pos + 1));
                        }
                    }
                    current_statement_begin__ = 2719;
                    for (int j = 3; j <= get_base1(p,i,"p",1); ++j) {
                        current_statement_begin__ = 2719;
                        stan::math::assign(len_z_T, (len_z_T + (get_base1(p,i,"p",1) - 1)));
                    }
                }
            }
            current_statement_begin__ = 2724;
            if (as_bool(logical_eq(prior_dist_for_cov,2))) {

                current_statement_begin__ = 2725;
                if (as_bool(logical_gt(bK1,0))) {
                    current_statement_begin__ = 2726;
                    stan::math::assign(bCov1_idx, lower_tri_indices(bK1, pstream__));
                }
                current_statement_begin__ = 2727;
                if (as_bool(logical_gt(bK2,0))) {
                    current_statement_begin__ = 2728;
                    stan::math::assign(bCov2_idx, lower_tri_indices(bK2, pstream__));
                }
            }

            // validate transformed data
            current_statement_begin__ = 2634;
            check_greater_or_equal(function__,"e_hs01",e_hs01,0);
            current_statement_begin__ = 2635;
            check_greater_or_equal(function__,"a_hs01",a_hs01,0);
            current_statement_begin__ = 2636;
            check_greater_or_equal(function__,"e_hs02",e_hs02,0);
            current_statement_begin__ = 2637;
            check_greater_or_equal(function__,"a_hs02",a_hs02,0);
            current_statement_begin__ = 2638;
            check_greater_or_equal(function__,"e_hs12",e_hs12,0);
            current_statement_begin__ = 2639;
            check_greater_or_equal(function__,"a_hs12",a_hs12,0);
            current_statement_begin__ = 2641;
            current_statement_begin__ = 2642;
            current_statement_begin__ = 2643;
            current_statement_begin__ = 2645;
            current_statement_begin__ = 2646;
            current_statement_begin__ = 2647;
            current_statement_begin__ = 2649;
            current_statement_begin__ = 2650;
            current_statement_begin__ = 2651;
            current_statement_begin__ = 2653;
            current_statement_begin__ = 2654;
            current_statement_begin__ = 2655;
            current_statement_begin__ = 2657;
            current_statement_begin__ = 2658;
            current_statement_begin__ = 2659;
            current_statement_begin__ = 2669;
            check_greater_or_equal(function__,"yHs1",yHs1,0);
            current_statement_begin__ = 2670;
            check_greater_or_equal(function__,"yHs2",yHs2,0);
            current_statement_begin__ = 2671;
            check_greater_or_equal(function__,"yHs3",yHs3,0);
            current_statement_begin__ = 2674;
            check_greater_or_equal(function__,"len_z_T",len_z_T,0);
            current_statement_begin__ = 2675;
            check_greater_or_equal(function__,"len_var_group",len_var_group,0);
            current_statement_begin__ = 2676;
            check_greater_or_equal(function__,"len_rho",len_rho,0);
            current_statement_begin__ = 2677;
            check_greater_or_equal(function__,"pos",pos,1);
            current_statement_begin__ = 2678;
            for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
                check_greater_or_equal(function__,"delta[k0__]",delta[k0__],0);
            }
            current_statement_begin__ = 2681;
            current_statement_begin__ = 2682;
            current_statement_begin__ = 2685;
            current_statement_begin__ = 2687;
            current_statement_begin__ = 2689;
            current_statement_begin__ = 2691;
            current_statement_begin__ = 2692;
            current_statement_begin__ = 2693;
            current_statement_begin__ = 2694;
            current_statement_begin__ = 2695;
            current_statement_begin__ = 2696;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 2751;
            validate_non_negative_index("yGamma1", "logical_gt(get_base1(intercept_type,1,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
            num_params_r__ += logical_gt(get_base1(intercept_type,1,"intercept_type",1),0);
            current_statement_begin__ = 2753;
            validate_non_negative_index("yGamma2", "logical_gt(get_base1(intercept_type,2,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
            num_params_r__ += logical_gt(get_base1(intercept_type,2,"intercept_type",1),0);
            current_statement_begin__ = 2755;
            validate_non_negative_index("yGamma3", "logical_gt(get_base1(intercept_type,3,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
            num_params_r__ += logical_gt(get_base1(intercept_type,3,"intercept_type",1),0);
            current_statement_begin__ = 2759;
            validate_non_negative_index("z_yBeta1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            num_params_r__ += get_base1(yK,1,"yK",1);
            current_statement_begin__ = 2760;
            validate_non_negative_index("z_yBeta2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            num_params_r__ += get_base1(yK,2,"yK",1);
            current_statement_begin__ = 2761;
            validate_non_negative_index("z_yBeta3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            num_params_r__ += get_base1(yK,3,"yK",1);
            current_statement_begin__ = 2764;
            validate_non_negative_index("z_b", "(logical_eq(prior_dist_for_cov,1) ? q : 0 )", (logical_eq(prior_dist_for_cov,1) ? q : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? q : 0 );
            current_statement_begin__ = 2765;
            validate_non_negative_index("z_T", "(logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 );
            current_statement_begin__ = 2766;
            validate_non_negative_index("rho", "(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 );
            current_statement_begin__ = 2767;
            validate_non_negative_index("zeta", "(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 );
            current_statement_begin__ = 2768;
            validate_non_negative_index("tau", "(logical_eq(prior_dist_for_cov,1) ? t : 0 )", (logical_eq(prior_dist_for_cov,1) ? t : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? t : 0 );
            current_statement_begin__ = 2772;
            validate_non_negative_index("bSd1", "(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 )", (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 );
            current_statement_begin__ = 2774;
        validate_non_negative_index("z_bMat1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ));
            validate_non_negative_index("z_bMat1", "(logical_gt(bK1,0) ? bN1 : 0 )", (logical_gt(bK1,0) ? bN1 : 0 ));
            num_params_r__ += ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ) * (logical_gt(bK1,0) ? bN1 : 0 );
            current_statement_begin__ = 2776;
            validate_non_negative_index("bCholesky1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
            num_params_r__ += ((((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ) * (((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ) - 1)) / 2);
            current_statement_begin__ = 2780;
            validate_non_negative_index("bSd2", "(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 )", (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 );
            current_statement_begin__ = 2782;
        validate_non_negative_index("z_bMat2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ));
            validate_non_negative_index("z_bMat2", "(logical_gt(bK2,0) ? bN2 : 0 )", (logical_gt(bK2,0) ? bN2 : 0 ));
            num_params_r__ += ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ) * (logical_gt(bK2,0) ? bN2 : 0 );
            current_statement_begin__ = 2784;
            validate_non_negative_index("bCholesky2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
            num_params_r__ += ((((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ) * (((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ) - 1)) / 2);
            current_statement_begin__ = 2787;
            validate_non_negative_index("yAux1_unscaled", "get_base1(has_aux,1,\"has_aux\",1)", get_base1(has_aux,1,"has_aux",1));
            num_params_r__ += get_base1(has_aux,1,"has_aux",1);
            current_statement_begin__ = 2788;
            validate_non_negative_index("yAux2_unscaled", "get_base1(has_aux,2,\"has_aux\",1)", get_base1(has_aux,2,"has_aux",1));
            num_params_r__ += get_base1(has_aux,2,"has_aux",1);
            current_statement_begin__ = 2789;
            validate_non_negative_index("yAux3_unscaled", "get_base1(has_aux,3,\"has_aux\",1)", get_base1(has_aux,3,"has_aux",1));
            num_params_r__ += get_base1(has_aux,3,"has_aux",1);
            current_statement_begin__ = 2792;
            validate_non_negative_index("yGlobal1", "yHs1", yHs1);
            num_params_r__ += yHs1;
            current_statement_begin__ = 2793;
            validate_non_negative_index("yGlobal2", "yHs2", yHs2);
            num_params_r__ += yHs2;
            current_statement_begin__ = 2794;
            validate_non_negative_index("yGlobal3", "yHs3", yHs3);
            num_params_r__ += yHs3;
            current_statement_begin__ = 2795;
            validate_non_negative_index("yLocal1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            validate_non_negative_index("yLocal1", "yHs1", yHs1);
            num_params_r__ += get_base1(yK,1,"yK",1) * yHs1;
            current_statement_begin__ = 2796;
            validate_non_negative_index("yLocal2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            validate_non_negative_index("yLocal2", "yHs2", yHs2);
            num_params_r__ += get_base1(yK,2,"yK",1) * yHs2;
            current_statement_begin__ = 2797;
            validate_non_negative_index("yLocal3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            validate_non_negative_index("yLocal3", "yHs3", yHs3);
            num_params_r__ += get_base1(yK,3,"yK",1) * yHs3;
            current_statement_begin__ = 2798;
            validate_non_negative_index("y_caux1", "logical_gt(yHs1,0)", logical_gt(yHs1,0));
            num_params_r__ += logical_gt(yHs1,0);
            current_statement_begin__ = 2799;
            validate_non_negative_index("y_caux2", "logical_gt(yHs2,0)", logical_gt(yHs2,0));
            num_params_r__ += logical_gt(yHs2,0);
            current_statement_begin__ = 2800;
            validate_non_negative_index("y_caux3", "logical_gt(yHs3,0)", logical_gt(yHs3,0));
            num_params_r__ += logical_gt(yHs3,0);
            current_statement_begin__ = 2801;
            validate_non_negative_index("yOol1", "logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6));
            num_params_r__ += logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6);
            current_statement_begin__ = 2802;
            validate_non_negative_index("yOol2", "logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6));
            num_params_r__ += logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6);
            current_statement_begin__ = 2803;
            validate_non_negative_index("yOol3", "logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6));
            num_params_r__ += logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6);
            current_statement_begin__ = 2804;
            validate_non_negative_index("yMix1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            validate_non_negative_index("yMix1", "(primitive_value(logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))));
            num_params_r__ += get_base1(yK,1,"yK",1) * (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6)));
            current_statement_begin__ = 2805;
            validate_non_negative_index("yMix2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            validate_non_negative_index("yMix2", "(primitive_value(logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))));
            num_params_r__ += get_base1(yK,2,"yK",1) * (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6)));
            current_statement_begin__ = 2806;
            validate_non_negative_index("yMix3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            validate_non_negative_index("yMix3", "(primitive_value(logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))));
            num_params_r__ += get_base1(yK,3,"yK",1) * (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6)));
            current_statement_begin__ = 2813;
            validate_non_negative_index("e_z_beta01", "e_K01", e_K01);
            num_params_r__ += e_K01;
            current_statement_begin__ = 2816;
            validate_non_negative_index("e_gamma01", "logical_eq(e_has_intercept01,1)", logical_eq(e_has_intercept01,1));
            num_params_r__ += logical_eq(e_has_intercept01,1);
            current_statement_begin__ = 2824;
            validate_non_negative_index("e_aux_unscaled01", "basehaz_nvars01", basehaz_nvars01);
            num_params_r__ += basehaz_nvars01;
            current_statement_begin__ = 2827;
            validate_non_negative_index("e_global01", "e_hs01", e_hs01);
            num_params_r__ += e_hs01;
            current_statement_begin__ = 2828;
            validate_non_negative_index("e_local01", "(logical_gt(e_hs01,0) * e_K01)", (logical_gt(e_hs01,0) * e_K01));
            validate_non_negative_index("e_local01", "e_hs01", e_hs01);
            num_params_r__ += (logical_gt(e_hs01,0) * e_K01) * e_hs01;
            current_statement_begin__ = 2829;
            validate_non_negative_index("e_caux01", "logical_gt(e_hs01,0)", logical_gt(e_hs01,0));
            num_params_r__ += logical_gt(e_hs01,0);
            current_statement_begin__ = 2830;
            validate_non_negative_index("e_mix01", "e_K01", e_K01);
            validate_non_negative_index("e_mix01", "(primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6)))", (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))));
            num_params_r__ += e_K01 * (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6)));
            current_statement_begin__ = 2831;
            validate_non_negative_index("e_ool01", "logical_eq(e_prior_dist01,6)", logical_eq(e_prior_dist01,6));
            num_params_r__ += logical_eq(e_prior_dist01,6);
            current_statement_begin__ = 2833;
            validate_non_negative_index("e_z_beta02", "e_K02", e_K02);
            num_params_r__ += e_K02;
            current_statement_begin__ = 2836;
            validate_non_negative_index("e_gamma02", "logical_eq(e_has_intercept02,1)", logical_eq(e_has_intercept02,1));
            num_params_r__ += logical_eq(e_has_intercept02,1);
            current_statement_begin__ = 2844;
            validate_non_negative_index("e_aux_unscaled02", "basehaz_nvars02", basehaz_nvars02);
            num_params_r__ += basehaz_nvars02;
            current_statement_begin__ = 2847;
            validate_non_negative_index("e_global02", "e_hs02", e_hs02);
            num_params_r__ += e_hs02;
            current_statement_begin__ = 2848;
            validate_non_negative_index("e_local02", "(logical_gt(e_hs02,0) * e_K02)", (logical_gt(e_hs02,0) * e_K02));
            validate_non_negative_index("e_local02", "e_hs02", e_hs02);
            num_params_r__ += (logical_gt(e_hs02,0) * e_K02) * e_hs02;
            current_statement_begin__ = 2849;
            validate_non_negative_index("e_caux02", "logical_gt(e_hs02,0)", logical_gt(e_hs02,0));
            num_params_r__ += logical_gt(e_hs02,0);
            current_statement_begin__ = 2850;
            validate_non_negative_index("e_mix02", "e_K02", e_K02);
            validate_non_negative_index("e_mix02", "(primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6)))", (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))));
            num_params_r__ += e_K02 * (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6)));
            current_statement_begin__ = 2851;
            validate_non_negative_index("e_ool02", "logical_eq(e_prior_dist02,6)", logical_eq(e_prior_dist02,6));
            num_params_r__ += logical_eq(e_prior_dist02,6);
            current_statement_begin__ = 2854;
            validate_non_negative_index("e_z_beta12", "e_K12", e_K12);
            num_params_r__ += e_K12;
            current_statement_begin__ = 2857;
            validate_non_negative_index("e_gamma12", "logical_eq(e_has_intercept12,1)", logical_eq(e_has_intercept12,1));
            num_params_r__ += logical_eq(e_has_intercept12,1);
            current_statement_begin__ = 2865;
            validate_non_negative_index("e_aux_unscaled12", "basehaz_nvars12", basehaz_nvars12);
            num_params_r__ += basehaz_nvars12;
            current_statement_begin__ = 2868;
            validate_non_negative_index("e_global12", "e_hs12", e_hs12);
            num_params_r__ += e_hs12;
            current_statement_begin__ = 2869;
            validate_non_negative_index("e_local12", "(logical_gt(e_hs12,0) * e_K12)", (logical_gt(e_hs12,0) * e_K12));
            validate_non_negative_index("e_local12", "e_hs12", e_hs12);
            num_params_r__ += (logical_gt(e_hs12,0) * e_K12) * e_hs12;
            current_statement_begin__ = 2870;
            validate_non_negative_index("e_caux12", "logical_gt(e_hs12,0)", logical_gt(e_hs12,0));
            num_params_r__ += logical_gt(e_hs12,0);
            current_statement_begin__ = 2871;
            validate_non_negative_index("e_mix12", "e_K12", e_K12);
            validate_non_negative_index("e_mix12", "(primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6)))", (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))));
            num_params_r__ += e_K12 * (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6)));
            current_statement_begin__ = 2872;
            validate_non_negative_index("e_ool12", "logical_eq(e_prior_dist12,6)", logical_eq(e_prior_dist12,6));
            num_params_r__ += logical_eq(e_prior_dist12,6);
            current_statement_begin__ = 2877;
            validate_non_negative_index("a_z_beta01", "a_K01", a_K01);
            num_params_r__ += a_K01;
            current_statement_begin__ = 2880;
            validate_non_negative_index("a_global01", "a_hs01", a_hs01);
            num_params_r__ += a_hs01;
            current_statement_begin__ = 2881;
            validate_non_negative_index("a_local01", "(logical_gt(a_hs01,0) * a_K01)", (logical_gt(a_hs01,0) * a_K01));
            validate_non_negative_index("a_local01", "a_hs01", a_hs01);
            num_params_r__ += (logical_gt(a_hs01,0) * a_K01) * a_hs01;
            current_statement_begin__ = 2882;
            validate_non_negative_index("a_caux01", "logical_gt(a_hs01,0)", logical_gt(a_hs01,0));
            num_params_r__ += logical_gt(a_hs01,0);
            current_statement_begin__ = 2883;
            validate_non_negative_index("a_mix01", "a_K01", a_K01);
            validate_non_negative_index("a_mix01", "(primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6)))", (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))));
            num_params_r__ += a_K01 * (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6)));
            current_statement_begin__ = 2884;
            validate_non_negative_index("a_ool01", "logical_eq(a_prior_dist01,6)", logical_eq(a_prior_dist01,6));
            num_params_r__ += logical_eq(a_prior_dist01,6);
            current_statement_begin__ = 2887;
            validate_non_negative_index("a_z_beta02", "a_K02", a_K02);
            num_params_r__ += a_K02;
            current_statement_begin__ = 2890;
            validate_non_negative_index("a_global02", "a_hs02", a_hs02);
            num_params_r__ += a_hs02;
            current_statement_begin__ = 2891;
            validate_non_negative_index("a_local02", "(logical_gt(a_hs02,0) * a_K02)", (logical_gt(a_hs02,0) * a_K02));
            validate_non_negative_index("a_local02", "a_hs02", a_hs02);
            num_params_r__ += (logical_gt(a_hs02,0) * a_K02) * a_hs02;
            current_statement_begin__ = 2892;
            validate_non_negative_index("a_caux02", "logical_gt(a_hs02,0)", logical_gt(a_hs02,0));
            num_params_r__ += logical_gt(a_hs02,0);
            current_statement_begin__ = 2893;
            validate_non_negative_index("a_mix02", "a_K02", a_K02);
            validate_non_negative_index("a_mix02", "(primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6)))", (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))));
            num_params_r__ += a_K02 * (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6)));
            current_statement_begin__ = 2894;
            validate_non_negative_index("a_ool02", "logical_eq(a_prior_dist02,6)", logical_eq(a_prior_dist02,6));
            num_params_r__ += logical_eq(a_prior_dist02,6);
            current_statement_begin__ = 2897;
            validate_non_negative_index("a_z_beta12", "a_K12", a_K12);
            num_params_r__ += a_K12;
            current_statement_begin__ = 2900;
            validate_non_negative_index("a_global12", "a_hs12", a_hs12);
            num_params_r__ += a_hs12;
            current_statement_begin__ = 2901;
            validate_non_negative_index("a_local12", "(logical_gt(a_hs12,0) * a_K12)", (logical_gt(a_hs12,0) * a_K12));
            validate_non_negative_index("a_local12", "a_hs12", a_hs12);
            num_params_r__ += (logical_gt(a_hs12,0) * a_K12) * a_hs12;
            current_statement_begin__ = 2902;
            validate_non_negative_index("a_caux12", "logical_gt(a_hs12,0)", logical_gt(a_hs12,0));
            num_params_r__ += logical_gt(a_hs12,0);
            current_statement_begin__ = 2903;
            validate_non_negative_index("a_mix12", "a_K12", a_K12);
            validate_non_negative_index("a_mix12", "(primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6)))", (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))));
            num_params_r__ += a_K12 * (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6)));
            current_statement_begin__ = 2904;
            validate_non_negative_index("a_ool12", "logical_eq(a_prior_dist12,6)", logical_eq(a_prior_dist12,6));
            num_params_r__ += logical_eq(a_prior_dist12,6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_msjm() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("yGamma1")))
            throw std::runtime_error("variable yGamma1 missing");
        vals_r__ = context__.vals_r("yGamma1");
        pos__ = 0U;
        validate_non_negative_index("yGamma1", "logical_gt(get_base1(intercept_type,1,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
        context__.validate_dims("initialization", "yGamma1", "double", context__.to_vec(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0)));
        std::vector<double> yGamma1(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++i0__)
            yGamma1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(lb(get_base1(intercept_type,1,"intercept_type",1), pstream__),ub(get_base1(intercept_type,1,"intercept_type",1), pstream__),yGamma1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGamma1: ") + e.what());
        }

        if (!(context__.contains_r("yGamma2")))
            throw std::runtime_error("variable yGamma2 missing");
        vals_r__ = context__.vals_r("yGamma2");
        pos__ = 0U;
        validate_non_negative_index("yGamma2", "logical_gt(get_base1(intercept_type,2,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
        context__.validate_dims("initialization", "yGamma2", "double", context__.to_vec(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0)));
        std::vector<double> yGamma2(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++i0__)
            yGamma2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(lb(get_base1(intercept_type,2,"intercept_type",1), pstream__),ub(get_base1(intercept_type,2,"intercept_type",1), pstream__),yGamma2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGamma2: ") + e.what());
        }

        if (!(context__.contains_r("yGamma3")))
            throw std::runtime_error("variable yGamma3 missing");
        vals_r__ = context__.vals_r("yGamma3");
        pos__ = 0U;
        validate_non_negative_index("yGamma3", "logical_gt(get_base1(intercept_type,3,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
        context__.validate_dims("initialization", "yGamma3", "double", context__.to_vec(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0)));
        std::vector<double> yGamma3(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++i0__)
            yGamma3[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(lb(get_base1(intercept_type,3,"intercept_type",1), pstream__),ub(get_base1(intercept_type,3,"intercept_type",1), pstream__),yGamma3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGamma3: ") + e.what());
        }

        if (!(context__.contains_r("z_yBeta1")))
            throw std::runtime_error("variable z_yBeta1 missing");
        vals_r__ = context__.vals_r("z_yBeta1");
        pos__ = 0U;
        validate_non_negative_index("z_yBeta1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
        context__.validate_dims("initialization", "z_yBeta1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
        vector_d z_yBeta1(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
        for (int j1__ = 0U; j1__ < get_base1(yK,1,"yK",1); ++j1__)
            z_yBeta1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_yBeta1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_yBeta1: ") + e.what());
        }

        if (!(context__.contains_r("z_yBeta2")))
            throw std::runtime_error("variable z_yBeta2 missing");
        vals_r__ = context__.vals_r("z_yBeta2");
        pos__ = 0U;
        validate_non_negative_index("z_yBeta2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
        context__.validate_dims("initialization", "z_yBeta2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
        vector_d z_yBeta2(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
        for (int j1__ = 0U; j1__ < get_base1(yK,2,"yK",1); ++j1__)
            z_yBeta2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_yBeta2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_yBeta2: ") + e.what());
        }

        if (!(context__.contains_r("z_yBeta3")))
            throw std::runtime_error("variable z_yBeta3 missing");
        vals_r__ = context__.vals_r("z_yBeta3");
        pos__ = 0U;
        validate_non_negative_index("z_yBeta3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
        context__.validate_dims("initialization", "z_yBeta3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
        vector_d z_yBeta3(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
        for (int j1__ = 0U; j1__ < get_base1(yK,3,"yK",1); ++j1__)
            z_yBeta3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_yBeta3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_yBeta3: ") + e.what());
        }

        if (!(context__.contains_r("z_b")))
            throw std::runtime_error("variable z_b missing");
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        validate_non_negative_index("z_b", "(logical_eq(prior_dist_for_cov,1) ? q : 0 )", (logical_eq(prior_dist_for_cov,1) ? q : 0 ));
        context__.validate_dims("initialization", "z_b", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? q : 0 )));
        vector_d z_b(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? q : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? q : 0 ); ++j1__)
            z_b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_b: ") + e.what());
        }

        if (!(context__.contains_r("z_T")))
            throw std::runtime_error("variable z_T missing");
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        validate_non_negative_index("z_T", "(logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));
        context__.validate_dims("initialization", "z_T", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 )));
        vector_d z_T(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ); ++j1__)
            z_T(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_T: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));
        context__.validate_dims("initialization", "rho", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? len_rho : 0 )));
        vector_d rho(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? len_rho : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ); ++j1__)
            rho(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        validate_non_negative_index("zeta", "(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));
        context__.validate_dims("initialization", "zeta", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 )));
        vector_d zeta(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ); ++j1__)
            zeta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "(logical_eq(prior_dist_for_cov,1) ? t : 0 )", (logical_eq(prior_dist_for_cov,1) ? t : 0 ));
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? t : 0 )));
        vector_d tau(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? t : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? t : 0 ); ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("bSd1")))
            throw std::runtime_error("variable bSd1 missing");
        vals_r__ = context__.vals_r("bSd1");
        pos__ = 0U;
        validate_non_negative_index("bSd1", "(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 )", (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));
        context__.validate_dims("initialization", "bSd1", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,2) ? bK1 : 0 )));
        vector_d bSd1(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,2) ? bK1 : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ); ++j1__)
            bSd1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,bSd1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bSd1: ") + e.what());
        }

        if (!(context__.contains_r("z_bMat1")))
            throw std::runtime_error("variable z_bMat1 missing");
        vals_r__ = context__.vals_r("z_bMat1");
        pos__ = 0U;
        validate_non_negative_index("z_bMat1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ));
        validate_non_negative_index("z_bMat1", "(logical_gt(bK1,0) ? bN1 : 0 )", (logical_gt(bK1,0) ? bN1 : 0 ));
        context__.validate_dims("initialization", "z_bMat1", "matrix_d", context__.to_vec(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ),(logical_gt(bK1,0) ? bN1 : 0 )));
        matrix_d z_bMat1(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 )),static_cast<Eigen::VectorXd::Index>((logical_gt(bK1,0) ? bN1 : 0 )));
        for (int j2__ = 0U; j2__ < (logical_gt(bK1,0) ? bN1 : 0 ); ++j2__)
            for (int j1__ = 0U; j1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ); ++j1__)
                z_bMat1(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(z_bMat1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_bMat1: ") + e.what());
        }

        if (!(context__.contains_r("bCholesky1")))
            throw std::runtime_error("variable bCholesky1 missing");
        vals_r__ = context__.vals_r("bCholesky1");
        pos__ = 0U;
        validate_non_negative_index("bCholesky1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        validate_non_negative_index("bCholesky1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        context__.validate_dims("initialization", "bCholesky1", "matrix_d", context__.to_vec(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ),((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )));
        matrix_d bCholesky1(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )),static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )));
        for (int j2__ = 0U; j2__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++j2__)
            for (int j1__ = 0U; j1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++j1__)
                bCholesky1(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(bCholesky1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bCholesky1: ") + e.what());
        }

        if (!(context__.contains_r("bSd2")))
            throw std::runtime_error("variable bSd2 missing");
        vals_r__ = context__.vals_r("bSd2");
        pos__ = 0U;
        validate_non_negative_index("bSd2", "(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 )", (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));
        context__.validate_dims("initialization", "bSd2", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,2) ? bK2 : 0 )));
        vector_d bSd2(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,2) ? bK2 : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ); ++j1__)
            bSd2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,bSd2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bSd2: ") + e.what());
        }

        if (!(context__.contains_r("z_bMat2")))
            throw std::runtime_error("variable z_bMat2 missing");
        vals_r__ = context__.vals_r("z_bMat2");
        pos__ = 0U;
        validate_non_negative_index("z_bMat2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ));
        validate_non_negative_index("z_bMat2", "(logical_gt(bK2,0) ? bN2 : 0 )", (logical_gt(bK2,0) ? bN2 : 0 ));
        context__.validate_dims("initialization", "z_bMat2", "matrix_d", context__.to_vec(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ),(logical_gt(bK2,0) ? bN2 : 0 )));
        matrix_d z_bMat2(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 )),static_cast<Eigen::VectorXd::Index>((logical_gt(bK2,0) ? bN2 : 0 )));
        for (int j2__ = 0U; j2__ < (logical_gt(bK2,0) ? bN2 : 0 ); ++j2__)
            for (int j1__ = 0U; j1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ); ++j1__)
                z_bMat2(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(z_bMat2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_bMat2: ") + e.what());
        }

        if (!(context__.contains_r("bCholesky2")))
            throw std::runtime_error("variable bCholesky2 missing");
        vals_r__ = context__.vals_r("bCholesky2");
        pos__ = 0U;
        validate_non_negative_index("bCholesky2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        validate_non_negative_index("bCholesky2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        context__.validate_dims("initialization", "bCholesky2", "matrix_d", context__.to_vec(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ),((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )));
        matrix_d bCholesky2(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )),static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )));
        for (int j2__ = 0U; j2__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++j2__)
            for (int j1__ = 0U; j1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++j1__)
                bCholesky2(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(bCholesky2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bCholesky2: ") + e.what());
        }

        if (!(context__.contains_r("yAux1_unscaled")))
            throw std::runtime_error("variable yAux1_unscaled missing");
        vals_r__ = context__.vals_r("yAux1_unscaled");
        pos__ = 0U;
        validate_non_negative_index("yAux1_unscaled", "get_base1(has_aux,1,\"has_aux\",1)", get_base1(has_aux,1,"has_aux",1));
        context__.validate_dims("initialization", "yAux1_unscaled", "double", context__.to_vec(get_base1(has_aux,1,"has_aux",1)));
        std::vector<double> yAux1_unscaled(get_base1(has_aux,1,"has_aux",1),double(0));
        for (int i0__ = 0U; i0__ < get_base1(has_aux,1,"has_aux",1); ++i0__)
            yAux1_unscaled[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < get_base1(has_aux,1,"has_aux",1); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yAux1_unscaled[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yAux1_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("yAux2_unscaled")))
            throw std::runtime_error("variable yAux2_unscaled missing");
        vals_r__ = context__.vals_r("yAux2_unscaled");
        pos__ = 0U;
        validate_non_negative_index("yAux2_unscaled", "get_base1(has_aux,2,\"has_aux\",1)", get_base1(has_aux,2,"has_aux",1));
        context__.validate_dims("initialization", "yAux2_unscaled", "double", context__.to_vec(get_base1(has_aux,2,"has_aux",1)));
        std::vector<double> yAux2_unscaled(get_base1(has_aux,2,"has_aux",1),double(0));
        for (int i0__ = 0U; i0__ < get_base1(has_aux,2,"has_aux",1); ++i0__)
            yAux2_unscaled[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < get_base1(has_aux,2,"has_aux",1); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yAux2_unscaled[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yAux2_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("yAux3_unscaled")))
            throw std::runtime_error("variable yAux3_unscaled missing");
        vals_r__ = context__.vals_r("yAux3_unscaled");
        pos__ = 0U;
        validate_non_negative_index("yAux3_unscaled", "get_base1(has_aux,3,\"has_aux\",1)", get_base1(has_aux,3,"has_aux",1));
        context__.validate_dims("initialization", "yAux3_unscaled", "double", context__.to_vec(get_base1(has_aux,3,"has_aux",1)));
        std::vector<double> yAux3_unscaled(get_base1(has_aux,3,"has_aux",1),double(0));
        for (int i0__ = 0U; i0__ < get_base1(has_aux,3,"has_aux",1); ++i0__)
            yAux3_unscaled[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < get_base1(has_aux,3,"has_aux",1); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yAux3_unscaled[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yAux3_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("yGlobal1")))
            throw std::runtime_error("variable yGlobal1 missing");
        vals_r__ = context__.vals_r("yGlobal1");
        pos__ = 0U;
        validate_non_negative_index("yGlobal1", "yHs1", yHs1);
        context__.validate_dims("initialization", "yGlobal1", "double", context__.to_vec(yHs1));
        std::vector<double> yGlobal1(yHs1,double(0));
        for (int i0__ = 0U; i0__ < yHs1; ++i0__)
            yGlobal1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs1; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yGlobal1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGlobal1: ") + e.what());
        }

        if (!(context__.contains_r("yGlobal2")))
            throw std::runtime_error("variable yGlobal2 missing");
        vals_r__ = context__.vals_r("yGlobal2");
        pos__ = 0U;
        validate_non_negative_index("yGlobal2", "yHs2", yHs2);
        context__.validate_dims("initialization", "yGlobal2", "double", context__.to_vec(yHs2));
        std::vector<double> yGlobal2(yHs2,double(0));
        for (int i0__ = 0U; i0__ < yHs2; ++i0__)
            yGlobal2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs2; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yGlobal2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGlobal2: ") + e.what());
        }

        if (!(context__.contains_r("yGlobal3")))
            throw std::runtime_error("variable yGlobal3 missing");
        vals_r__ = context__.vals_r("yGlobal3");
        pos__ = 0U;
        validate_non_negative_index("yGlobal3", "yHs3", yHs3);
        context__.validate_dims("initialization", "yGlobal3", "double", context__.to_vec(yHs3));
        std::vector<double> yGlobal3(yHs3,double(0));
        for (int i0__ = 0U; i0__ < yHs3; ++i0__)
            yGlobal3[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs3; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yGlobal3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGlobal3: ") + e.what());
        }

        if (!(context__.contains_r("yLocal1")))
            throw std::runtime_error("variable yLocal1 missing");
        vals_r__ = context__.vals_r("yLocal1");
        pos__ = 0U;
        validate_non_negative_index("yLocal1", "yHs1", yHs1);
        validate_non_negative_index("yLocal1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
        context__.validate_dims("initialization", "yLocal1", "vector_d", context__.to_vec(yHs1,get_base1(yK,1,"yK",1)));
        std::vector<vector_d> yLocal1(yHs1,vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,1,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < yHs1; ++i0__)
                yLocal1[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs1; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yLocal1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yLocal1: ") + e.what());
        }

        if (!(context__.contains_r("yLocal2")))
            throw std::runtime_error("variable yLocal2 missing");
        vals_r__ = context__.vals_r("yLocal2");
        pos__ = 0U;
        validate_non_negative_index("yLocal2", "yHs2", yHs2);
        validate_non_negative_index("yLocal2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
        context__.validate_dims("initialization", "yLocal2", "vector_d", context__.to_vec(yHs2,get_base1(yK,2,"yK",1)));
        std::vector<vector_d> yLocal2(yHs2,vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,2,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < yHs2; ++i0__)
                yLocal2[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs2; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yLocal2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yLocal2: ") + e.what());
        }

        if (!(context__.contains_r("yLocal3")))
            throw std::runtime_error("variable yLocal3 missing");
        vals_r__ = context__.vals_r("yLocal3");
        pos__ = 0U;
        validate_non_negative_index("yLocal3", "yHs3", yHs3);
        validate_non_negative_index("yLocal3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
        context__.validate_dims("initialization", "yLocal3", "vector_d", context__.to_vec(yHs3,get_base1(yK,3,"yK",1)));
        std::vector<vector_d> yLocal3(yHs3,vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,3,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < yHs3; ++i0__)
                yLocal3[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs3; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yLocal3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yLocal3: ") + e.what());
        }

        if (!(context__.contains_r("y_caux1")))
            throw std::runtime_error("variable y_caux1 missing");
        vals_r__ = context__.vals_r("y_caux1");
        pos__ = 0U;
        validate_non_negative_index("y_caux1", "logical_gt(yHs1,0)", logical_gt(yHs1,0));
        context__.validate_dims("initialization", "y_caux1", "double", context__.to_vec(logical_gt(yHs1,0)));
        std::vector<double> y_caux1(logical_gt(yHs1,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(yHs1,0); ++i0__)
            y_caux1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(yHs1,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y_caux1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_caux1: ") + e.what());
        }

        if (!(context__.contains_r("y_caux2")))
            throw std::runtime_error("variable y_caux2 missing");
        vals_r__ = context__.vals_r("y_caux2");
        pos__ = 0U;
        validate_non_negative_index("y_caux2", "logical_gt(yHs2,0)", logical_gt(yHs2,0));
        context__.validate_dims("initialization", "y_caux2", "double", context__.to_vec(logical_gt(yHs2,0)));
        std::vector<double> y_caux2(logical_gt(yHs2,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(yHs2,0); ++i0__)
            y_caux2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(yHs2,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y_caux2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_caux2: ") + e.what());
        }

        if (!(context__.contains_r("y_caux3")))
            throw std::runtime_error("variable y_caux3 missing");
        vals_r__ = context__.vals_r("y_caux3");
        pos__ = 0U;
        validate_non_negative_index("y_caux3", "logical_gt(yHs3,0)", logical_gt(yHs3,0));
        context__.validate_dims("initialization", "y_caux3", "double", context__.to_vec(logical_gt(yHs3,0)));
        std::vector<double> y_caux3(logical_gt(yHs3,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(yHs3,0); ++i0__)
            y_caux3[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(yHs3,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y_caux3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_caux3: ") + e.what());
        }

        if (!(context__.contains_r("yOol1")))
            throw std::runtime_error("variable yOol1 missing");
        vals_r__ = context__.vals_r("yOol1");
        pos__ = 0U;
        validate_non_negative_index("yOol1", "logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6));
        context__.validate_dims("initialization", "yOol1", "double", context__.to_vec(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6)));
        std::vector<double> yOol1(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++i0__)
            yOol1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yOol1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yOol1: ") + e.what());
        }

        if (!(context__.contains_r("yOol2")))
            throw std::runtime_error("variable yOol2 missing");
        vals_r__ = context__.vals_r("yOol2");
        pos__ = 0U;
        validate_non_negative_index("yOol2", "logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6));
        context__.validate_dims("initialization", "yOol2", "double", context__.to_vec(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6)));
        std::vector<double> yOol2(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++i0__)
            yOol2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yOol2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yOol2: ") + e.what());
        }

        if (!(context__.contains_r("yOol3")))
            throw std::runtime_error("variable yOol3 missing");
        vals_r__ = context__.vals_r("yOol3");
        pos__ = 0U;
        validate_non_negative_index("yOol3", "logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6));
        context__.validate_dims("initialization", "yOol3", "double", context__.to_vec(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6)));
        std::vector<double> yOol3(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++i0__)
            yOol3[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yOol3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yOol3: ") + e.what());
        }

        if (!(context__.contains_r("yMix1")))
            throw std::runtime_error("variable yMix1 missing");
        vals_r__ = context__.vals_r("yMix1");
        pos__ = 0U;
        validate_non_negative_index("yMix1", "(primitive_value(logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))));
        validate_non_negative_index("yMix1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
        context__.validate_dims("initialization", "yMix1", "vector_d", context__.to_vec((primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))),get_base1(yK,1,"yK",1)));
        std::vector<vector_d> yMix1((primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))),vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,1,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++i0__)
                yMix1[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yMix1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yMix1: ") + e.what());
        }

        if (!(context__.contains_r("yMix2")))
            throw std::runtime_error("variable yMix2 missing");
        vals_r__ = context__.vals_r("yMix2");
        pos__ = 0U;
        validate_non_negative_index("yMix2", "(primitive_value(logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))));
        validate_non_negative_index("yMix2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
        context__.validate_dims("initialization", "yMix2", "vector_d", context__.to_vec((primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))),get_base1(yK,2,"yK",1)));
        std::vector<vector_d> yMix2((primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))),vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,2,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++i0__)
                yMix2[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yMix2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yMix2: ") + e.what());
        }

        if (!(context__.contains_r("yMix3")))
            throw std::runtime_error("variable yMix3 missing");
        vals_r__ = context__.vals_r("yMix3");
        pos__ = 0U;
        validate_non_negative_index("yMix3", "(primitive_value(logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))));
        validate_non_negative_index("yMix3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
        context__.validate_dims("initialization", "yMix3", "vector_d", context__.to_vec((primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))),get_base1(yK,3,"yK",1)));
        std::vector<vector_d> yMix3((primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))),vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,3,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++i0__)
                yMix3[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yMix3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yMix3: ") + e.what());
        }

        if (!(context__.contains_r("e_z_beta01")))
            throw std::runtime_error("variable e_z_beta01 missing");
        vals_r__ = context__.vals_r("e_z_beta01");
        pos__ = 0U;
        validate_non_negative_index("e_z_beta01", "e_K01", e_K01);
        context__.validate_dims("initialization", "e_z_beta01", "vector_d", context__.to_vec(e_K01));
        vector_d e_z_beta01(static_cast<Eigen::VectorXd::Index>(e_K01));
        for (int j1__ = 0U; j1__ < e_K01; ++j1__)
            e_z_beta01(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(e_z_beta01);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_z_beta01: ") + e.what());
        }

        if (!(context__.contains_r("e_gamma01")))
            throw std::runtime_error("variable e_gamma01 missing");
        vals_r__ = context__.vals_r("e_gamma01");
        pos__ = 0U;
        validate_non_negative_index("e_gamma01", "logical_eq(e_has_intercept01,1)", logical_eq(e_has_intercept01,1));
        context__.validate_dims("initialization", "e_gamma01", "double", context__.to_vec(logical_eq(e_has_intercept01,1)));
        std::vector<double> e_gamma01(logical_eq(e_has_intercept01,1),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(e_has_intercept01,1); ++i0__)
            e_gamma01[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(e_has_intercept01,1); ++i0__)
            try {
            writer__.scalar_unconstrain(e_gamma01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_gamma01: ") + e.what());
        }

        if (!(context__.contains_r("e_aux_unscaled01")))
            throw std::runtime_error("variable e_aux_unscaled01 missing");
        vals_r__ = context__.vals_r("e_aux_unscaled01");
        pos__ = 0U;
        validate_non_negative_index("e_aux_unscaled01", "basehaz_nvars01", basehaz_nvars01);
        context__.validate_dims("initialization", "e_aux_unscaled01", "vector_d", context__.to_vec(basehaz_nvars01));
        vector_d e_aux_unscaled01(static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
        for (int j1__ = 0U; j1__ < basehaz_nvars01; ++j1__)
            e_aux_unscaled01(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(coefs_lb(basehaz_type01, pstream__),e_aux_unscaled01);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_aux_unscaled01: ") + e.what());
        }

        if (!(context__.contains_r("e_global01")))
            throw std::runtime_error("variable e_global01 missing");
        vals_r__ = context__.vals_r("e_global01");
        pos__ = 0U;
        validate_non_negative_index("e_global01", "e_hs01", e_hs01);
        context__.validate_dims("initialization", "e_global01", "double", context__.to_vec(e_hs01));
        std::vector<double> e_global01(e_hs01,double(0));
        for (int i0__ = 0U; i0__ < e_hs01; ++i0__)
            e_global01[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_hs01; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_global01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_global01: ") + e.what());
        }

        if (!(context__.contains_r("e_local01")))
            throw std::runtime_error("variable e_local01 missing");
        vals_r__ = context__.vals_r("e_local01");
        pos__ = 0U;
        validate_non_negative_index("e_local01", "e_hs01", e_hs01);
        validate_non_negative_index("e_local01", "(logical_gt(e_hs01,0) * e_K01)", (logical_gt(e_hs01,0) * e_K01));
        context__.validate_dims("initialization", "e_local01", "vector_d", context__.to_vec(e_hs01,(logical_gt(e_hs01,0) * e_K01)));
        std::vector<vector_d> e_local01(e_hs01,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(e_hs01,0) * e_K01))));
        for (int j1__ = 0U; j1__ < (logical_gt(e_hs01,0) * e_K01); ++j1__)
            for (int i0__ = 0U; i0__ < e_hs01; ++i0__)
                e_local01[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_hs01; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,e_local01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_local01: ") + e.what());
        }

        if (!(context__.contains_r("e_caux01")))
            throw std::runtime_error("variable e_caux01 missing");
        vals_r__ = context__.vals_r("e_caux01");
        pos__ = 0U;
        validate_non_negative_index("e_caux01", "logical_gt(e_hs01,0)", logical_gt(e_hs01,0));
        context__.validate_dims("initialization", "e_caux01", "double", context__.to_vec(logical_gt(e_hs01,0)));
        std::vector<double> e_caux01(logical_gt(e_hs01,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(e_hs01,0); ++i0__)
            e_caux01[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(e_hs01,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_caux01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_caux01: ") + e.what());
        }

        if (!(context__.contains_r("e_mix01")))
            throw std::runtime_error("variable e_mix01 missing");
        vals_r__ = context__.vals_r("e_mix01");
        pos__ = 0U;
        validate_non_negative_index("e_mix01", "(primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6)))", (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))));
        validate_non_negative_index("e_mix01", "e_K01", e_K01);
        context__.validate_dims("initialization", "e_mix01", "vector_d", context__.to_vec((primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))),e_K01));
        std::vector<vector_d> e_mix01((primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))),vector_d(static_cast<Eigen::VectorXd::Index>(e_K01)));
        for (int j1__ = 0U; j1__ < e_K01; ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))); ++i0__)
                e_mix01[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,e_mix01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_mix01: ") + e.what());
        }

        if (!(context__.contains_r("e_ool01")))
            throw std::runtime_error("variable e_ool01 missing");
        vals_r__ = context__.vals_r("e_ool01");
        pos__ = 0U;
        validate_non_negative_index("e_ool01", "logical_eq(e_prior_dist01,6)", logical_eq(e_prior_dist01,6));
        context__.validate_dims("initialization", "e_ool01", "double", context__.to_vec(logical_eq(e_prior_dist01,6)));
        std::vector<double> e_ool01(logical_eq(e_prior_dist01,6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(e_prior_dist01,6); ++i0__)
            e_ool01[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(e_prior_dist01,6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_ool01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_ool01: ") + e.what());
        }

        if (!(context__.contains_r("e_z_beta02")))
            throw std::runtime_error("variable e_z_beta02 missing");
        vals_r__ = context__.vals_r("e_z_beta02");
        pos__ = 0U;
        validate_non_negative_index("e_z_beta02", "e_K02", e_K02);
        context__.validate_dims("initialization", "e_z_beta02", "vector_d", context__.to_vec(e_K02));
        vector_d e_z_beta02(static_cast<Eigen::VectorXd::Index>(e_K02));
        for (int j1__ = 0U; j1__ < e_K02; ++j1__)
            e_z_beta02(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(e_z_beta02);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_z_beta02: ") + e.what());
        }

        if (!(context__.contains_r("e_gamma02")))
            throw std::runtime_error("variable e_gamma02 missing");
        vals_r__ = context__.vals_r("e_gamma02");
        pos__ = 0U;
        validate_non_negative_index("e_gamma02", "logical_eq(e_has_intercept02,1)", logical_eq(e_has_intercept02,1));
        context__.validate_dims("initialization", "e_gamma02", "double", context__.to_vec(logical_eq(e_has_intercept02,1)));
        std::vector<double> e_gamma02(logical_eq(e_has_intercept02,1),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(e_has_intercept02,1); ++i0__)
            e_gamma02[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(e_has_intercept02,1); ++i0__)
            try {
            writer__.scalar_unconstrain(e_gamma02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_gamma02: ") + e.what());
        }

        if (!(context__.contains_r("e_aux_unscaled02")))
            throw std::runtime_error("variable e_aux_unscaled02 missing");
        vals_r__ = context__.vals_r("e_aux_unscaled02");
        pos__ = 0U;
        validate_non_negative_index("e_aux_unscaled02", "basehaz_nvars02", basehaz_nvars02);
        context__.validate_dims("initialization", "e_aux_unscaled02", "vector_d", context__.to_vec(basehaz_nvars02));
        vector_d e_aux_unscaled02(static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
        for (int j1__ = 0U; j1__ < basehaz_nvars02; ++j1__)
            e_aux_unscaled02(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(coefs_lb(basehaz_type02, pstream__),e_aux_unscaled02);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_aux_unscaled02: ") + e.what());
        }

        if (!(context__.contains_r("e_global02")))
            throw std::runtime_error("variable e_global02 missing");
        vals_r__ = context__.vals_r("e_global02");
        pos__ = 0U;
        validate_non_negative_index("e_global02", "e_hs02", e_hs02);
        context__.validate_dims("initialization", "e_global02", "double", context__.to_vec(e_hs02));
        std::vector<double> e_global02(e_hs02,double(0));
        for (int i0__ = 0U; i0__ < e_hs02; ++i0__)
            e_global02[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_hs02; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_global02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_global02: ") + e.what());
        }

        if (!(context__.contains_r("e_local02")))
            throw std::runtime_error("variable e_local02 missing");
        vals_r__ = context__.vals_r("e_local02");
        pos__ = 0U;
        validate_non_negative_index("e_local02", "e_hs02", e_hs02);
        validate_non_negative_index("e_local02", "(logical_gt(e_hs02,0) * e_K02)", (logical_gt(e_hs02,0) * e_K02));
        context__.validate_dims("initialization", "e_local02", "vector_d", context__.to_vec(e_hs02,(logical_gt(e_hs02,0) * e_K02)));
        std::vector<vector_d> e_local02(e_hs02,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(e_hs02,0) * e_K02))));
        for (int j1__ = 0U; j1__ < (logical_gt(e_hs02,0) * e_K02); ++j1__)
            for (int i0__ = 0U; i0__ < e_hs02; ++i0__)
                e_local02[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_hs02; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,e_local02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_local02: ") + e.what());
        }

        if (!(context__.contains_r("e_caux02")))
            throw std::runtime_error("variable e_caux02 missing");
        vals_r__ = context__.vals_r("e_caux02");
        pos__ = 0U;
        validate_non_negative_index("e_caux02", "logical_gt(e_hs02,0)", logical_gt(e_hs02,0));
        context__.validate_dims("initialization", "e_caux02", "double", context__.to_vec(logical_gt(e_hs02,0)));
        std::vector<double> e_caux02(logical_gt(e_hs02,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(e_hs02,0); ++i0__)
            e_caux02[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(e_hs02,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_caux02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_caux02: ") + e.what());
        }

        if (!(context__.contains_r("e_mix02")))
            throw std::runtime_error("variable e_mix02 missing");
        vals_r__ = context__.vals_r("e_mix02");
        pos__ = 0U;
        validate_non_negative_index("e_mix02", "(primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6)))", (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))));
        validate_non_negative_index("e_mix02", "e_K02", e_K02);
        context__.validate_dims("initialization", "e_mix02", "vector_d", context__.to_vec((primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))),e_K02));
        std::vector<vector_d> e_mix02((primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))),vector_d(static_cast<Eigen::VectorXd::Index>(e_K02)));
        for (int j1__ = 0U; j1__ < e_K02; ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))); ++i0__)
                e_mix02[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,e_mix02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_mix02: ") + e.what());
        }

        if (!(context__.contains_r("e_ool02")))
            throw std::runtime_error("variable e_ool02 missing");
        vals_r__ = context__.vals_r("e_ool02");
        pos__ = 0U;
        validate_non_negative_index("e_ool02", "logical_eq(e_prior_dist02,6)", logical_eq(e_prior_dist02,6));
        context__.validate_dims("initialization", "e_ool02", "double", context__.to_vec(logical_eq(e_prior_dist02,6)));
        std::vector<double> e_ool02(logical_eq(e_prior_dist02,6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(e_prior_dist02,6); ++i0__)
            e_ool02[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(e_prior_dist02,6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_ool02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_ool02: ") + e.what());
        }

        if (!(context__.contains_r("e_z_beta12")))
            throw std::runtime_error("variable e_z_beta12 missing");
        vals_r__ = context__.vals_r("e_z_beta12");
        pos__ = 0U;
        validate_non_negative_index("e_z_beta12", "e_K12", e_K12);
        context__.validate_dims("initialization", "e_z_beta12", "vector_d", context__.to_vec(e_K12));
        vector_d e_z_beta12(static_cast<Eigen::VectorXd::Index>(e_K12));
        for (int j1__ = 0U; j1__ < e_K12; ++j1__)
            e_z_beta12(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(e_z_beta12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_z_beta12: ") + e.what());
        }

        if (!(context__.contains_r("e_gamma12")))
            throw std::runtime_error("variable e_gamma12 missing");
        vals_r__ = context__.vals_r("e_gamma12");
        pos__ = 0U;
        validate_non_negative_index("e_gamma12", "logical_eq(e_has_intercept12,1)", logical_eq(e_has_intercept12,1));
        context__.validate_dims("initialization", "e_gamma12", "double", context__.to_vec(logical_eq(e_has_intercept12,1)));
        std::vector<double> e_gamma12(logical_eq(e_has_intercept12,1),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(e_has_intercept12,1); ++i0__)
            e_gamma12[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(e_has_intercept12,1); ++i0__)
            try {
            writer__.scalar_unconstrain(e_gamma12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_gamma12: ") + e.what());
        }

        if (!(context__.contains_r("e_aux_unscaled12")))
            throw std::runtime_error("variable e_aux_unscaled12 missing");
        vals_r__ = context__.vals_r("e_aux_unscaled12");
        pos__ = 0U;
        validate_non_negative_index("e_aux_unscaled12", "basehaz_nvars12", basehaz_nvars12);
        context__.validate_dims("initialization", "e_aux_unscaled12", "vector_d", context__.to_vec(basehaz_nvars12));
        vector_d e_aux_unscaled12(static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
        for (int j1__ = 0U; j1__ < basehaz_nvars12; ++j1__)
            e_aux_unscaled12(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(coefs_lb(basehaz_type12, pstream__),e_aux_unscaled12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_aux_unscaled12: ") + e.what());
        }

        if (!(context__.contains_r("e_global12")))
            throw std::runtime_error("variable e_global12 missing");
        vals_r__ = context__.vals_r("e_global12");
        pos__ = 0U;
        validate_non_negative_index("e_global12", "e_hs12", e_hs12);
        context__.validate_dims("initialization", "e_global12", "double", context__.to_vec(e_hs12));
        std::vector<double> e_global12(e_hs12,double(0));
        for (int i0__ = 0U; i0__ < e_hs12; ++i0__)
            e_global12[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_hs12; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_global12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_global12: ") + e.what());
        }

        if (!(context__.contains_r("e_local12")))
            throw std::runtime_error("variable e_local12 missing");
        vals_r__ = context__.vals_r("e_local12");
        pos__ = 0U;
        validate_non_negative_index("e_local12", "e_hs12", e_hs12);
        validate_non_negative_index("e_local12", "(logical_gt(e_hs12,0) * e_K12)", (logical_gt(e_hs12,0) * e_K12));
        context__.validate_dims("initialization", "e_local12", "vector_d", context__.to_vec(e_hs12,(logical_gt(e_hs12,0) * e_K12)));
        std::vector<vector_d> e_local12(e_hs12,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(e_hs12,0) * e_K12))));
        for (int j1__ = 0U; j1__ < (logical_gt(e_hs12,0) * e_K12); ++j1__)
            for (int i0__ = 0U; i0__ < e_hs12; ++i0__)
                e_local12[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_hs12; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,e_local12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_local12: ") + e.what());
        }

        if (!(context__.contains_r("e_caux12")))
            throw std::runtime_error("variable e_caux12 missing");
        vals_r__ = context__.vals_r("e_caux12");
        pos__ = 0U;
        validate_non_negative_index("e_caux12", "logical_gt(e_hs12,0)", logical_gt(e_hs12,0));
        context__.validate_dims("initialization", "e_caux12", "double", context__.to_vec(logical_gt(e_hs12,0)));
        std::vector<double> e_caux12(logical_gt(e_hs12,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(e_hs12,0); ++i0__)
            e_caux12[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(e_hs12,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_caux12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_caux12: ") + e.what());
        }

        if (!(context__.contains_r("e_mix12")))
            throw std::runtime_error("variable e_mix12 missing");
        vals_r__ = context__.vals_r("e_mix12");
        pos__ = 0U;
        validate_non_negative_index("e_mix12", "(primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6)))", (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))));
        validate_non_negative_index("e_mix12", "e_K12", e_K12);
        context__.validate_dims("initialization", "e_mix12", "vector_d", context__.to_vec((primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))),e_K12));
        std::vector<vector_d> e_mix12((primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))),vector_d(static_cast<Eigen::VectorXd::Index>(e_K12)));
        for (int j1__ = 0U; j1__ < e_K12; ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))); ++i0__)
                e_mix12[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,e_mix12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_mix12: ") + e.what());
        }

        if (!(context__.contains_r("e_ool12")))
            throw std::runtime_error("variable e_ool12 missing");
        vals_r__ = context__.vals_r("e_ool12");
        pos__ = 0U;
        validate_non_negative_index("e_ool12", "logical_eq(e_prior_dist12,6)", logical_eq(e_prior_dist12,6));
        context__.validate_dims("initialization", "e_ool12", "double", context__.to_vec(logical_eq(e_prior_dist12,6)));
        std::vector<double> e_ool12(logical_eq(e_prior_dist12,6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(e_prior_dist12,6); ++i0__)
            e_ool12[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(e_prior_dist12,6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_ool12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_ool12: ") + e.what());
        }

        if (!(context__.contains_r("a_z_beta01")))
            throw std::runtime_error("variable a_z_beta01 missing");
        vals_r__ = context__.vals_r("a_z_beta01");
        pos__ = 0U;
        validate_non_negative_index("a_z_beta01", "a_K01", a_K01);
        context__.validate_dims("initialization", "a_z_beta01", "vector_d", context__.to_vec(a_K01));
        vector_d a_z_beta01(static_cast<Eigen::VectorXd::Index>(a_K01));
        for (int j1__ = 0U; j1__ < a_K01; ++j1__)
            a_z_beta01(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(a_z_beta01);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_z_beta01: ") + e.what());
        }

        if (!(context__.contains_r("a_global01")))
            throw std::runtime_error("variable a_global01 missing");
        vals_r__ = context__.vals_r("a_global01");
        pos__ = 0U;
        validate_non_negative_index("a_global01", "a_hs01", a_hs01);
        context__.validate_dims("initialization", "a_global01", "double", context__.to_vec(a_hs01));
        std::vector<double> a_global01(a_hs01,double(0));
        for (int i0__ = 0U; i0__ < a_hs01; ++i0__)
            a_global01[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < a_hs01; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_global01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_global01: ") + e.what());
        }

        if (!(context__.contains_r("a_local01")))
            throw std::runtime_error("variable a_local01 missing");
        vals_r__ = context__.vals_r("a_local01");
        pos__ = 0U;
        validate_non_negative_index("a_local01", "a_hs01", a_hs01);
        validate_non_negative_index("a_local01", "(logical_gt(a_hs01,0) * a_K01)", (logical_gt(a_hs01,0) * a_K01));
        context__.validate_dims("initialization", "a_local01", "vector_d", context__.to_vec(a_hs01,(logical_gt(a_hs01,0) * a_K01)));
        std::vector<vector_d> a_local01(a_hs01,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(a_hs01,0) * a_K01))));
        for (int j1__ = 0U; j1__ < (logical_gt(a_hs01,0) * a_K01); ++j1__)
            for (int i0__ = 0U; i0__ < a_hs01; ++i0__)
                a_local01[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < a_hs01; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,a_local01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_local01: ") + e.what());
        }

        if (!(context__.contains_r("a_caux01")))
            throw std::runtime_error("variable a_caux01 missing");
        vals_r__ = context__.vals_r("a_caux01");
        pos__ = 0U;
        validate_non_negative_index("a_caux01", "logical_gt(a_hs01,0)", logical_gt(a_hs01,0));
        context__.validate_dims("initialization", "a_caux01", "double", context__.to_vec(logical_gt(a_hs01,0)));
        std::vector<double> a_caux01(logical_gt(a_hs01,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(a_hs01,0); ++i0__)
            a_caux01[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(a_hs01,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_caux01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_caux01: ") + e.what());
        }

        if (!(context__.contains_r("a_mix01")))
            throw std::runtime_error("variable a_mix01 missing");
        vals_r__ = context__.vals_r("a_mix01");
        pos__ = 0U;
        validate_non_negative_index("a_mix01", "(primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6)))", (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))));
        validate_non_negative_index("a_mix01", "a_K01", a_K01);
        context__.validate_dims("initialization", "a_mix01", "vector_d", context__.to_vec((primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))),a_K01));
        std::vector<vector_d> a_mix01((primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))),vector_d(static_cast<Eigen::VectorXd::Index>(a_K01)));
        for (int j1__ = 0U; j1__ < a_K01; ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))); ++i0__)
                a_mix01[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,a_mix01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_mix01: ") + e.what());
        }

        if (!(context__.contains_r("a_ool01")))
            throw std::runtime_error("variable a_ool01 missing");
        vals_r__ = context__.vals_r("a_ool01");
        pos__ = 0U;
        validate_non_negative_index("a_ool01", "logical_eq(a_prior_dist01,6)", logical_eq(a_prior_dist01,6));
        context__.validate_dims("initialization", "a_ool01", "double", context__.to_vec(logical_eq(a_prior_dist01,6)));
        std::vector<double> a_ool01(logical_eq(a_prior_dist01,6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(a_prior_dist01,6); ++i0__)
            a_ool01[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(a_prior_dist01,6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_ool01[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_ool01: ") + e.what());
        }

        if (!(context__.contains_r("a_z_beta02")))
            throw std::runtime_error("variable a_z_beta02 missing");
        vals_r__ = context__.vals_r("a_z_beta02");
        pos__ = 0U;
        validate_non_negative_index("a_z_beta02", "a_K02", a_K02);
        context__.validate_dims("initialization", "a_z_beta02", "vector_d", context__.to_vec(a_K02));
        vector_d a_z_beta02(static_cast<Eigen::VectorXd::Index>(a_K02));
        for (int j1__ = 0U; j1__ < a_K02; ++j1__)
            a_z_beta02(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(a_z_beta02);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_z_beta02: ") + e.what());
        }

        if (!(context__.contains_r("a_global02")))
            throw std::runtime_error("variable a_global02 missing");
        vals_r__ = context__.vals_r("a_global02");
        pos__ = 0U;
        validate_non_negative_index("a_global02", "a_hs02", a_hs02);
        context__.validate_dims("initialization", "a_global02", "double", context__.to_vec(a_hs02));
        std::vector<double> a_global02(a_hs02,double(0));
        for (int i0__ = 0U; i0__ < a_hs02; ++i0__)
            a_global02[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < a_hs02; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_global02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_global02: ") + e.what());
        }

        if (!(context__.contains_r("a_local02")))
            throw std::runtime_error("variable a_local02 missing");
        vals_r__ = context__.vals_r("a_local02");
        pos__ = 0U;
        validate_non_negative_index("a_local02", "a_hs02", a_hs02);
        validate_non_negative_index("a_local02", "(logical_gt(a_hs02,0) * a_K02)", (logical_gt(a_hs02,0) * a_K02));
        context__.validate_dims("initialization", "a_local02", "vector_d", context__.to_vec(a_hs02,(logical_gt(a_hs02,0) * a_K02)));
        std::vector<vector_d> a_local02(a_hs02,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(a_hs02,0) * a_K02))));
        for (int j1__ = 0U; j1__ < (logical_gt(a_hs02,0) * a_K02); ++j1__)
            for (int i0__ = 0U; i0__ < a_hs02; ++i0__)
                a_local02[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < a_hs02; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,a_local02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_local02: ") + e.what());
        }

        if (!(context__.contains_r("a_caux02")))
            throw std::runtime_error("variable a_caux02 missing");
        vals_r__ = context__.vals_r("a_caux02");
        pos__ = 0U;
        validate_non_negative_index("a_caux02", "logical_gt(a_hs02,0)", logical_gt(a_hs02,0));
        context__.validate_dims("initialization", "a_caux02", "double", context__.to_vec(logical_gt(a_hs02,0)));
        std::vector<double> a_caux02(logical_gt(a_hs02,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(a_hs02,0); ++i0__)
            a_caux02[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(a_hs02,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_caux02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_caux02: ") + e.what());
        }

        if (!(context__.contains_r("a_mix02")))
            throw std::runtime_error("variable a_mix02 missing");
        vals_r__ = context__.vals_r("a_mix02");
        pos__ = 0U;
        validate_non_negative_index("a_mix02", "(primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6)))", (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))));
        validate_non_negative_index("a_mix02", "a_K02", a_K02);
        context__.validate_dims("initialization", "a_mix02", "vector_d", context__.to_vec((primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))),a_K02));
        std::vector<vector_d> a_mix02((primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))),vector_d(static_cast<Eigen::VectorXd::Index>(a_K02)));
        for (int j1__ = 0U; j1__ < a_K02; ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))); ++i0__)
                a_mix02[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,a_mix02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_mix02: ") + e.what());
        }

        if (!(context__.contains_r("a_ool02")))
            throw std::runtime_error("variable a_ool02 missing");
        vals_r__ = context__.vals_r("a_ool02");
        pos__ = 0U;
        validate_non_negative_index("a_ool02", "logical_eq(a_prior_dist02,6)", logical_eq(a_prior_dist02,6));
        context__.validate_dims("initialization", "a_ool02", "double", context__.to_vec(logical_eq(a_prior_dist02,6)));
        std::vector<double> a_ool02(logical_eq(a_prior_dist02,6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(a_prior_dist02,6); ++i0__)
            a_ool02[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(a_prior_dist02,6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_ool02[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_ool02: ") + e.what());
        }

        if (!(context__.contains_r("a_z_beta12")))
            throw std::runtime_error("variable a_z_beta12 missing");
        vals_r__ = context__.vals_r("a_z_beta12");
        pos__ = 0U;
        validate_non_negative_index("a_z_beta12", "a_K12", a_K12);
        context__.validate_dims("initialization", "a_z_beta12", "vector_d", context__.to_vec(a_K12));
        vector_d a_z_beta12(static_cast<Eigen::VectorXd::Index>(a_K12));
        for (int j1__ = 0U; j1__ < a_K12; ++j1__)
            a_z_beta12(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(a_z_beta12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_z_beta12: ") + e.what());
        }

        if (!(context__.contains_r("a_global12")))
            throw std::runtime_error("variable a_global12 missing");
        vals_r__ = context__.vals_r("a_global12");
        pos__ = 0U;
        validate_non_negative_index("a_global12", "a_hs12", a_hs12);
        context__.validate_dims("initialization", "a_global12", "double", context__.to_vec(a_hs12));
        std::vector<double> a_global12(a_hs12,double(0));
        for (int i0__ = 0U; i0__ < a_hs12; ++i0__)
            a_global12[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < a_hs12; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_global12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_global12: ") + e.what());
        }

        if (!(context__.contains_r("a_local12")))
            throw std::runtime_error("variable a_local12 missing");
        vals_r__ = context__.vals_r("a_local12");
        pos__ = 0U;
        validate_non_negative_index("a_local12", "a_hs12", a_hs12);
        validate_non_negative_index("a_local12", "(logical_gt(a_hs12,0) * a_K12)", (logical_gt(a_hs12,0) * a_K12));
        context__.validate_dims("initialization", "a_local12", "vector_d", context__.to_vec(a_hs12,(logical_gt(a_hs12,0) * a_K12)));
        std::vector<vector_d> a_local12(a_hs12,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(a_hs12,0) * a_K12))));
        for (int j1__ = 0U; j1__ < (logical_gt(a_hs12,0) * a_K12); ++j1__)
            for (int i0__ = 0U; i0__ < a_hs12; ++i0__)
                a_local12[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < a_hs12; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,a_local12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_local12: ") + e.what());
        }

        if (!(context__.contains_r("a_caux12")))
            throw std::runtime_error("variable a_caux12 missing");
        vals_r__ = context__.vals_r("a_caux12");
        pos__ = 0U;
        validate_non_negative_index("a_caux12", "logical_gt(a_hs12,0)", logical_gt(a_hs12,0));
        context__.validate_dims("initialization", "a_caux12", "double", context__.to_vec(logical_gt(a_hs12,0)));
        std::vector<double> a_caux12(logical_gt(a_hs12,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(a_hs12,0); ++i0__)
            a_caux12[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(a_hs12,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_caux12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_caux12: ") + e.what());
        }

        if (!(context__.contains_r("a_mix12")))
            throw std::runtime_error("variable a_mix12 missing");
        vals_r__ = context__.vals_r("a_mix12");
        pos__ = 0U;
        validate_non_negative_index("a_mix12", "(primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6)))", (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))));
        validate_non_negative_index("a_mix12", "a_K12", a_K12);
        context__.validate_dims("initialization", "a_mix12", "vector_d", context__.to_vec((primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))),a_K12));
        std::vector<vector_d> a_mix12((primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))),vector_d(static_cast<Eigen::VectorXd::Index>(a_K12)));
        for (int j1__ = 0U; j1__ < a_K12; ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))); ++i0__)
                a_mix12[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,a_mix12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_mix12: ") + e.what());
        }

        if (!(context__.contains_r("a_ool12")))
            throw std::runtime_error("variable a_ool12 missing");
        vals_r__ = context__.vals_r("a_ool12");
        pos__ = 0U;
        validate_non_negative_index("a_ool12", "logical_eq(a_prior_dist12,6)", logical_eq(a_prior_dist12,6));
        context__.validate_dims("initialization", "a_ool12", "double", context__.to_vec(logical_eq(a_prior_dist12,6)));
        std::vector<double> a_ool12(logical_eq(a_prior_dist12,6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(a_prior_dist12,6); ++i0__)
            a_ool12[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(a_prior_dist12,6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_ool12[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_ool12: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> yGamma1;
            size_t dim_yGamma1_0__ = logical_gt(get_base1(intercept_type,1,"intercept_type",1),0);
            yGamma1.reserve(dim_yGamma1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGamma1_0__; ++k_0__) {
                if (jacobian__)
                    yGamma1.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,1,"intercept_type",1), pstream__),ub(get_base1(intercept_type,1,"intercept_type",1), pstream__),lp__));
                else
                    yGamma1.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,1,"intercept_type",1), pstream__),ub(get_base1(intercept_type,1,"intercept_type",1), pstream__)));
            }

            vector<local_scalar_t__> yGamma2;
            size_t dim_yGamma2_0__ = logical_gt(get_base1(intercept_type,2,"intercept_type",1),0);
            yGamma2.reserve(dim_yGamma2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGamma2_0__; ++k_0__) {
                if (jacobian__)
                    yGamma2.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,2,"intercept_type",1), pstream__),ub(get_base1(intercept_type,2,"intercept_type",1), pstream__),lp__));
                else
                    yGamma2.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,2,"intercept_type",1), pstream__),ub(get_base1(intercept_type,2,"intercept_type",1), pstream__)));
            }

            vector<local_scalar_t__> yGamma3;
            size_t dim_yGamma3_0__ = logical_gt(get_base1(intercept_type,3,"intercept_type",1),0);
            yGamma3.reserve(dim_yGamma3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGamma3_0__; ++k_0__) {
                if (jacobian__)
                    yGamma3.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,3,"intercept_type",1), pstream__),ub(get_base1(intercept_type,3,"intercept_type",1), pstream__),lp__));
                else
                    yGamma3.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,3,"intercept_type",1), pstream__),ub(get_base1(intercept_type,3,"intercept_type",1), pstream__)));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_yBeta1;
            (void) z_yBeta1;  // dummy to suppress unused var warning
            if (jacobian__)
                z_yBeta1 = in__.vector_constrain(get_base1(yK,1,"yK",1),lp__);
            else
                z_yBeta1 = in__.vector_constrain(get_base1(yK,1,"yK",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_yBeta2;
            (void) z_yBeta2;  // dummy to suppress unused var warning
            if (jacobian__)
                z_yBeta2 = in__.vector_constrain(get_base1(yK,2,"yK",1),lp__);
            else
                z_yBeta2 = in__.vector_constrain(get_base1(yK,2,"yK",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_yBeta3;
            (void) z_yBeta3;  // dummy to suppress unused var warning
            if (jacobian__)
                z_yBeta3 = in__.vector_constrain(get_base1(yK,3,"yK",1),lp__);
            else
                z_yBeta3 = in__.vector_constrain(get_base1(yK,3,"yK",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_b;
            (void) z_b;  // dummy to suppress unused var warning
            if (jacobian__)
                z_b = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? q : 0 ),lp__);
            else
                z_b = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? q : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_T;
            (void) z_T;  // dummy to suppress unused var warning
            if (jacobian__)
                z_T = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ),lp__);
            else
                z_T = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.vector_lub_constrain(0,1,(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ),lp__);
            else
                rho = in__.vector_lub_constrain(0,1,(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ),lp__);
            else
                zeta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? t : 0 ),lp__);
            else
                tau = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? t : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bSd1;
            (void) bSd1;  // dummy to suppress unused var warning
            if (jacobian__)
                bSd1 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ),lp__);
            else
                bSd1 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z_bMat1;
            (void) z_bMat1;  // dummy to suppress unused var warning
            if (jacobian__)
                z_bMat1 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ),(logical_gt(bK1,0) ? bN1 : 0 ),lp__);
            else
                z_bMat1 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ),(logical_gt(bK1,0) ? bN1 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bCholesky1;
            (void) bCholesky1;  // dummy to suppress unused var warning
            if (jacobian__)
                bCholesky1 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ),lp__);
            else
                bCholesky1 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bSd2;
            (void) bSd2;  // dummy to suppress unused var warning
            if (jacobian__)
                bSd2 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ),lp__);
            else
                bSd2 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z_bMat2;
            (void) z_bMat2;  // dummy to suppress unused var warning
            if (jacobian__)
                z_bMat2 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ),(logical_gt(bK2,0) ? bN2 : 0 ),lp__);
            else
                z_bMat2 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ),(logical_gt(bK2,0) ? bN2 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bCholesky2;
            (void) bCholesky2;  // dummy to suppress unused var warning
            if (jacobian__)
                bCholesky2 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ),lp__);
            else
                bCholesky2 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));

            vector<local_scalar_t__> yAux1_unscaled;
            size_t dim_yAux1_unscaled_0__ = get_base1(has_aux,1,"has_aux",1);
            yAux1_unscaled.reserve(dim_yAux1_unscaled_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yAux1_unscaled_0__; ++k_0__) {
                if (jacobian__)
                    yAux1_unscaled.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yAux1_unscaled.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yAux2_unscaled;
            size_t dim_yAux2_unscaled_0__ = get_base1(has_aux,2,"has_aux",1);
            yAux2_unscaled.reserve(dim_yAux2_unscaled_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yAux2_unscaled_0__; ++k_0__) {
                if (jacobian__)
                    yAux2_unscaled.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yAux2_unscaled.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yAux3_unscaled;
            size_t dim_yAux3_unscaled_0__ = get_base1(has_aux,3,"has_aux",1);
            yAux3_unscaled.reserve(dim_yAux3_unscaled_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yAux3_unscaled_0__; ++k_0__) {
                if (jacobian__)
                    yAux3_unscaled.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yAux3_unscaled.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yGlobal1;
            size_t dim_yGlobal1_0__ = yHs1;
            yGlobal1.reserve(dim_yGlobal1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGlobal1_0__; ++k_0__) {
                if (jacobian__)
                    yGlobal1.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yGlobal1.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yGlobal2;
            size_t dim_yGlobal2_0__ = yHs2;
            yGlobal2.reserve(dim_yGlobal2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGlobal2_0__; ++k_0__) {
                if (jacobian__)
                    yGlobal2.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yGlobal2.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yGlobal3;
            size_t dim_yGlobal3_0__ = yHs3;
            yGlobal3.reserve(dim_yGlobal3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGlobal3_0__; ++k_0__) {
                if (jacobian__)
                    yGlobal3.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yGlobal3.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yLocal1;
            size_t dim_yLocal1_0__ = yHs1;
            yLocal1.reserve(dim_yLocal1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yLocal1_0__; ++k_0__) {
                if (jacobian__)
                    yLocal1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1),lp__));
                else
                    yLocal1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1)));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yLocal2;
            size_t dim_yLocal2_0__ = yHs2;
            yLocal2.reserve(dim_yLocal2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yLocal2_0__; ++k_0__) {
                if (jacobian__)
                    yLocal2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1),lp__));
                else
                    yLocal2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1)));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yLocal3;
            size_t dim_yLocal3_0__ = yHs3;
            yLocal3.reserve(dim_yLocal3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yLocal3_0__; ++k_0__) {
                if (jacobian__)
                    yLocal3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1),lp__));
                else
                    yLocal3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1)));
            }

            vector<local_scalar_t__> y_caux1;
            size_t dim_y_caux1_0__ = logical_gt(yHs1,0);
            y_caux1.reserve(dim_y_caux1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_y_caux1_0__; ++k_0__) {
                if (jacobian__)
                    y_caux1.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    y_caux1.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> y_caux2;
            size_t dim_y_caux2_0__ = logical_gt(yHs2,0);
            y_caux2.reserve(dim_y_caux2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_y_caux2_0__; ++k_0__) {
                if (jacobian__)
                    y_caux2.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    y_caux2.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> y_caux3;
            size_t dim_y_caux3_0__ = logical_gt(yHs3,0);
            y_caux3.reserve(dim_y_caux3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_y_caux3_0__; ++k_0__) {
                if (jacobian__)
                    y_caux3.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    y_caux3.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yOol1;
            size_t dim_yOol1_0__ = logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6);
            yOol1.reserve(dim_yOol1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yOol1_0__; ++k_0__) {
                if (jacobian__)
                    yOol1.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yOol1.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yOol2;
            size_t dim_yOol2_0__ = logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6);
            yOol2.reserve(dim_yOol2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yOol2_0__; ++k_0__) {
                if (jacobian__)
                    yOol2.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yOol2.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yOol3;
            size_t dim_yOol3_0__ = logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6);
            yOol3.reserve(dim_yOol3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yOol3_0__; ++k_0__) {
                if (jacobian__)
                    yOol3.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yOol3.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yMix1;
            size_t dim_yMix1_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6)));
            yMix1.reserve(dim_yMix1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yMix1_0__; ++k_0__) {
                if (jacobian__)
                    yMix1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1),lp__));
                else
                    yMix1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1)));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yMix2;
            size_t dim_yMix2_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6)));
            yMix2.reserve(dim_yMix2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yMix2_0__; ++k_0__) {
                if (jacobian__)
                    yMix2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1),lp__));
                else
                    yMix2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1)));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yMix3;
            size_t dim_yMix3_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6)));
            yMix3.reserve(dim_yMix3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yMix3_0__; ++k_0__) {
                if (jacobian__)
                    yMix3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1),lp__));
                else
                    yMix3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1)));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_z_beta01;
            (void) e_z_beta01;  // dummy to suppress unused var warning
            if (jacobian__)
                e_z_beta01 = in__.vector_constrain(e_K01,lp__);
            else
                e_z_beta01 = in__.vector_constrain(e_K01);

            vector<local_scalar_t__> e_gamma01;
            size_t dim_e_gamma01_0__ = logical_eq(e_has_intercept01,1);
            e_gamma01.reserve(dim_e_gamma01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_gamma01_0__; ++k_0__) {
                if (jacobian__)
                    e_gamma01.push_back(in__.scalar_constrain(lp__));
                else
                    e_gamma01.push_back(in__.scalar_constrain());
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux_unscaled01;
            (void) e_aux_unscaled01;  // dummy to suppress unused var warning
            if (jacobian__)
                e_aux_unscaled01 = in__.vector_lb_constrain(coefs_lb(basehaz_type01, pstream__),basehaz_nvars01,lp__);
            else
                e_aux_unscaled01 = in__.vector_lb_constrain(coefs_lb(basehaz_type01, pstream__),basehaz_nvars01);

            vector<local_scalar_t__> e_global01;
            size_t dim_e_global01_0__ = e_hs01;
            e_global01.reserve(dim_e_global01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_global01_0__; ++k_0__) {
                if (jacobian__)
                    e_global01.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_global01.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > e_local01;
            size_t dim_e_local01_0__ = e_hs01;
            e_local01.reserve(dim_e_local01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_local01_0__; ++k_0__) {
                if (jacobian__)
                    e_local01.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs01,0) * e_K01),lp__));
                else
                    e_local01.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs01,0) * e_K01)));
            }

            vector<local_scalar_t__> e_caux01;
            size_t dim_e_caux01_0__ = logical_gt(e_hs01,0);
            e_caux01.reserve(dim_e_caux01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_caux01_0__; ++k_0__) {
                if (jacobian__)
                    e_caux01.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_caux01.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > e_mix01;
            size_t dim_e_mix01_0__ = (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6)));
            e_mix01.reserve(dim_e_mix01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_mix01_0__; ++k_0__) {
                if (jacobian__)
                    e_mix01.push_back(in__.vector_lb_constrain(0,e_K01,lp__));
                else
                    e_mix01.push_back(in__.vector_lb_constrain(0,e_K01));
            }

            vector<local_scalar_t__> e_ool01;
            size_t dim_e_ool01_0__ = logical_eq(e_prior_dist01,6);
            e_ool01.reserve(dim_e_ool01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_ool01_0__; ++k_0__) {
                if (jacobian__)
                    e_ool01.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_ool01.push_back(in__.scalar_lb_constrain(0));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_z_beta02;
            (void) e_z_beta02;  // dummy to suppress unused var warning
            if (jacobian__)
                e_z_beta02 = in__.vector_constrain(e_K02,lp__);
            else
                e_z_beta02 = in__.vector_constrain(e_K02);

            vector<local_scalar_t__> e_gamma02;
            size_t dim_e_gamma02_0__ = logical_eq(e_has_intercept02,1);
            e_gamma02.reserve(dim_e_gamma02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_gamma02_0__; ++k_0__) {
                if (jacobian__)
                    e_gamma02.push_back(in__.scalar_constrain(lp__));
                else
                    e_gamma02.push_back(in__.scalar_constrain());
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux_unscaled02;
            (void) e_aux_unscaled02;  // dummy to suppress unused var warning
            if (jacobian__)
                e_aux_unscaled02 = in__.vector_lb_constrain(coefs_lb(basehaz_type02, pstream__),basehaz_nvars02,lp__);
            else
                e_aux_unscaled02 = in__.vector_lb_constrain(coefs_lb(basehaz_type02, pstream__),basehaz_nvars02);

            vector<local_scalar_t__> e_global02;
            size_t dim_e_global02_0__ = e_hs02;
            e_global02.reserve(dim_e_global02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_global02_0__; ++k_0__) {
                if (jacobian__)
                    e_global02.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_global02.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > e_local02;
            size_t dim_e_local02_0__ = e_hs02;
            e_local02.reserve(dim_e_local02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_local02_0__; ++k_0__) {
                if (jacobian__)
                    e_local02.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs02,0) * e_K02),lp__));
                else
                    e_local02.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs02,0) * e_K02)));
            }

            vector<local_scalar_t__> e_caux02;
            size_t dim_e_caux02_0__ = logical_gt(e_hs02,0);
            e_caux02.reserve(dim_e_caux02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_caux02_0__; ++k_0__) {
                if (jacobian__)
                    e_caux02.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_caux02.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > e_mix02;
            size_t dim_e_mix02_0__ = (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6)));
            e_mix02.reserve(dim_e_mix02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_mix02_0__; ++k_0__) {
                if (jacobian__)
                    e_mix02.push_back(in__.vector_lb_constrain(0,e_K02,lp__));
                else
                    e_mix02.push_back(in__.vector_lb_constrain(0,e_K02));
            }

            vector<local_scalar_t__> e_ool02;
            size_t dim_e_ool02_0__ = logical_eq(e_prior_dist02,6);
            e_ool02.reserve(dim_e_ool02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_ool02_0__; ++k_0__) {
                if (jacobian__)
                    e_ool02.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_ool02.push_back(in__.scalar_lb_constrain(0));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_z_beta12;
            (void) e_z_beta12;  // dummy to suppress unused var warning
            if (jacobian__)
                e_z_beta12 = in__.vector_constrain(e_K12,lp__);
            else
                e_z_beta12 = in__.vector_constrain(e_K12);

            vector<local_scalar_t__> e_gamma12;
            size_t dim_e_gamma12_0__ = logical_eq(e_has_intercept12,1);
            e_gamma12.reserve(dim_e_gamma12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_gamma12_0__; ++k_0__) {
                if (jacobian__)
                    e_gamma12.push_back(in__.scalar_constrain(lp__));
                else
                    e_gamma12.push_back(in__.scalar_constrain());
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux_unscaled12;
            (void) e_aux_unscaled12;  // dummy to suppress unused var warning
            if (jacobian__)
                e_aux_unscaled12 = in__.vector_lb_constrain(coefs_lb(basehaz_type12, pstream__),basehaz_nvars12,lp__);
            else
                e_aux_unscaled12 = in__.vector_lb_constrain(coefs_lb(basehaz_type12, pstream__),basehaz_nvars12);

            vector<local_scalar_t__> e_global12;
            size_t dim_e_global12_0__ = e_hs12;
            e_global12.reserve(dim_e_global12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_global12_0__; ++k_0__) {
                if (jacobian__)
                    e_global12.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_global12.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > e_local12;
            size_t dim_e_local12_0__ = e_hs12;
            e_local12.reserve(dim_e_local12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_local12_0__; ++k_0__) {
                if (jacobian__)
                    e_local12.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs12,0) * e_K12),lp__));
                else
                    e_local12.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs12,0) * e_K12)));
            }

            vector<local_scalar_t__> e_caux12;
            size_t dim_e_caux12_0__ = logical_gt(e_hs12,0);
            e_caux12.reserve(dim_e_caux12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_caux12_0__; ++k_0__) {
                if (jacobian__)
                    e_caux12.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_caux12.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > e_mix12;
            size_t dim_e_mix12_0__ = (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6)));
            e_mix12.reserve(dim_e_mix12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_mix12_0__; ++k_0__) {
                if (jacobian__)
                    e_mix12.push_back(in__.vector_lb_constrain(0,e_K12,lp__));
                else
                    e_mix12.push_back(in__.vector_lb_constrain(0,e_K12));
            }

            vector<local_scalar_t__> e_ool12;
            size_t dim_e_ool12_0__ = logical_eq(e_prior_dist12,6);
            e_ool12.reserve(dim_e_ool12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_e_ool12_0__; ++k_0__) {
                if (jacobian__)
                    e_ool12.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    e_ool12.push_back(in__.scalar_lb_constrain(0));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_z_beta01;
            (void) a_z_beta01;  // dummy to suppress unused var warning
            if (jacobian__)
                a_z_beta01 = in__.vector_constrain(a_K01,lp__);
            else
                a_z_beta01 = in__.vector_constrain(a_K01);

            vector<local_scalar_t__> a_global01;
            size_t dim_a_global01_0__ = a_hs01;
            a_global01.reserve(dim_a_global01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_global01_0__; ++k_0__) {
                if (jacobian__)
                    a_global01.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_global01.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > a_local01;
            size_t dim_a_local01_0__ = a_hs01;
            a_local01.reserve(dim_a_local01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_local01_0__; ++k_0__) {
                if (jacobian__)
                    a_local01.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs01,0) * a_K01),lp__));
                else
                    a_local01.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs01,0) * a_K01)));
            }

            vector<local_scalar_t__> a_caux01;
            size_t dim_a_caux01_0__ = logical_gt(a_hs01,0);
            a_caux01.reserve(dim_a_caux01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_caux01_0__; ++k_0__) {
                if (jacobian__)
                    a_caux01.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_caux01.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > a_mix01;
            size_t dim_a_mix01_0__ = (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6)));
            a_mix01.reserve(dim_a_mix01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_mix01_0__; ++k_0__) {
                if (jacobian__)
                    a_mix01.push_back(in__.vector_lb_constrain(0,a_K01,lp__));
                else
                    a_mix01.push_back(in__.vector_lb_constrain(0,a_K01));
            }

            vector<local_scalar_t__> a_ool01;
            size_t dim_a_ool01_0__ = logical_eq(a_prior_dist01,6);
            a_ool01.reserve(dim_a_ool01_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_ool01_0__; ++k_0__) {
                if (jacobian__)
                    a_ool01.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_ool01.push_back(in__.scalar_lb_constrain(0));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_z_beta02;
            (void) a_z_beta02;  // dummy to suppress unused var warning
            if (jacobian__)
                a_z_beta02 = in__.vector_constrain(a_K02,lp__);
            else
                a_z_beta02 = in__.vector_constrain(a_K02);

            vector<local_scalar_t__> a_global02;
            size_t dim_a_global02_0__ = a_hs02;
            a_global02.reserve(dim_a_global02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_global02_0__; ++k_0__) {
                if (jacobian__)
                    a_global02.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_global02.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > a_local02;
            size_t dim_a_local02_0__ = a_hs02;
            a_local02.reserve(dim_a_local02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_local02_0__; ++k_0__) {
                if (jacobian__)
                    a_local02.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs02,0) * a_K02),lp__));
                else
                    a_local02.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs02,0) * a_K02)));
            }

            vector<local_scalar_t__> a_caux02;
            size_t dim_a_caux02_0__ = logical_gt(a_hs02,0);
            a_caux02.reserve(dim_a_caux02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_caux02_0__; ++k_0__) {
                if (jacobian__)
                    a_caux02.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_caux02.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > a_mix02;
            size_t dim_a_mix02_0__ = (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6)));
            a_mix02.reserve(dim_a_mix02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_mix02_0__; ++k_0__) {
                if (jacobian__)
                    a_mix02.push_back(in__.vector_lb_constrain(0,a_K02,lp__));
                else
                    a_mix02.push_back(in__.vector_lb_constrain(0,a_K02));
            }

            vector<local_scalar_t__> a_ool02;
            size_t dim_a_ool02_0__ = logical_eq(a_prior_dist02,6);
            a_ool02.reserve(dim_a_ool02_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_ool02_0__; ++k_0__) {
                if (jacobian__)
                    a_ool02.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_ool02.push_back(in__.scalar_lb_constrain(0));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_z_beta12;
            (void) a_z_beta12;  // dummy to suppress unused var warning
            if (jacobian__)
                a_z_beta12 = in__.vector_constrain(a_K12,lp__);
            else
                a_z_beta12 = in__.vector_constrain(a_K12);

            vector<local_scalar_t__> a_global12;
            size_t dim_a_global12_0__ = a_hs12;
            a_global12.reserve(dim_a_global12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_global12_0__; ++k_0__) {
                if (jacobian__)
                    a_global12.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_global12.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > a_local12;
            size_t dim_a_local12_0__ = a_hs12;
            a_local12.reserve(dim_a_local12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_local12_0__; ++k_0__) {
                if (jacobian__)
                    a_local12.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs12,0) * a_K12),lp__));
                else
                    a_local12.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs12,0) * a_K12)));
            }

            vector<local_scalar_t__> a_caux12;
            size_t dim_a_caux12_0__ = logical_gt(a_hs12,0);
            a_caux12.reserve(dim_a_caux12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_caux12_0__; ++k_0__) {
                if (jacobian__)
                    a_caux12.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_caux12.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > a_mix12;
            size_t dim_a_mix12_0__ = (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6)));
            a_mix12.reserve(dim_a_mix12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_mix12_0__; ++k_0__) {
                if (jacobian__)
                    a_mix12.push_back(in__.vector_lb_constrain(0,a_K12,lp__));
                else
                    a_mix12.push_back(in__.vector_lb_constrain(0,a_K12));
            }

            vector<local_scalar_t__> a_ool12;
            size_t dim_a_ool12_0__ = logical_eq(a_prior_dist12,6);
            a_ool12.reserve(dim_a_ool12_0__);
            for (size_t k_0__ = 0; k_0__ < dim_a_ool12_0__; ++k_0__) {
                if (jacobian__)
                    a_ool12.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    a_ool12.push_back(in__.scalar_lb_constrain(0));
            }


            // transformed parameters
            current_statement_begin__ = 2908;
            validate_non_negative_index("e_beta01", "e_K01", e_K01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_beta01(static_cast<Eigen::VectorXd::Index>(e_K01));
            (void) e_beta01;  // dummy to suppress unused var warning

            stan::math::initialize(e_beta01, DUMMY_VAR__);
            stan::math::fill(e_beta01,DUMMY_VAR__);
            current_statement_begin__ = 2909;
            validate_non_negative_index("e_beta02", "e_K02", e_K02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_beta02(static_cast<Eigen::VectorXd::Index>(e_K02));
            (void) e_beta02;  // dummy to suppress unused var warning

            stan::math::initialize(e_beta02, DUMMY_VAR__);
            stan::math::fill(e_beta02,DUMMY_VAR__);
            current_statement_begin__ = 2910;
            validate_non_negative_index("e_beta12", "e_K12", e_K12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_beta12(static_cast<Eigen::VectorXd::Index>(e_K12));
            (void) e_beta12;  // dummy to suppress unused var warning

            stan::math::initialize(e_beta12, DUMMY_VAR__);
            stan::math::fill(e_beta12,DUMMY_VAR__);
            current_statement_begin__ = 2912;
            validate_non_negative_index("a_beta01", "a_K01", a_K01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_beta01(static_cast<Eigen::VectorXd::Index>(a_K01));
            (void) a_beta01;  // dummy to suppress unused var warning

            stan::math::initialize(a_beta01, DUMMY_VAR__);
            stan::math::fill(a_beta01,DUMMY_VAR__);
            current_statement_begin__ = 2913;
            validate_non_negative_index("a_beta02", "a_K02", a_K02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_beta02(static_cast<Eigen::VectorXd::Index>(a_K02));
            (void) a_beta02;  // dummy to suppress unused var warning

            stan::math::initialize(a_beta02, DUMMY_VAR__);
            stan::math::fill(a_beta02,DUMMY_VAR__);
            current_statement_begin__ = 2914;
            validate_non_negative_index("a_beta12", "a_K12", a_K12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_beta12(static_cast<Eigen::VectorXd::Index>(a_K12));
            (void) a_beta12;  // dummy to suppress unused var warning

            stan::math::initialize(a_beta12, DUMMY_VAR__);
            stan::math::fill(a_beta12,DUMMY_VAR__);
            current_statement_begin__ = 2916;
            validate_non_negative_index("e_aux01", "basehaz_nvars01", basehaz_nvars01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux01(static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
            (void) e_aux01;  // dummy to suppress unused var warning

            stan::math::initialize(e_aux01, DUMMY_VAR__);
            stan::math::fill(e_aux01,DUMMY_VAR__);
            current_statement_begin__ = 2917;
            validate_non_negative_index("e_aux02", "basehaz_nvars02", basehaz_nvars02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux02(static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
            (void) e_aux02;  // dummy to suppress unused var warning

            stan::math::initialize(e_aux02, DUMMY_VAR__);
            stan::math::fill(e_aux02,DUMMY_VAR__);
            current_statement_begin__ = 2918;
            validate_non_negative_index("e_aux12", "basehaz_nvars12", basehaz_nvars12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux12(static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
            (void) e_aux12;  // dummy to suppress unused var warning

            stan::math::initialize(e_aux12, DUMMY_VAR__);
            stan::math::fill(e_aux12,DUMMY_VAR__);
            current_statement_begin__ = 2925;
            validate_non_negative_index("yBeta1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta1(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            (void) yBeta1;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta1, DUMMY_VAR__);
            stan::math::fill(yBeta1,DUMMY_VAR__);
            current_statement_begin__ = 2926;
            validate_non_negative_index("yBeta2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta2(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            (void) yBeta2;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta2, DUMMY_VAR__);
            stan::math::fill(yBeta2,DUMMY_VAR__);
            current_statement_begin__ = 2927;
            validate_non_negative_index("yBeta3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta3(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            (void) yBeta3;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta3, DUMMY_VAR__);
            stan::math::fill(yBeta3,DUMMY_VAR__);
            current_statement_begin__ = 2928;
            validate_non_negative_index("yAux1", "get_base1(has_aux,1,\"has_aux\",1)", get_base1(has_aux,1,"has_aux",1));
            vector<local_scalar_t__> yAux1(get_base1(has_aux,1,"has_aux",1));
            stan::math::initialize(yAux1, DUMMY_VAR__);
            stan::math::fill(yAux1,DUMMY_VAR__);
            current_statement_begin__ = 2929;
            validate_non_negative_index("yAux2", "get_base1(has_aux,2,\"has_aux\",1)", get_base1(has_aux,2,"has_aux",1));
            vector<local_scalar_t__> yAux2(get_base1(has_aux,2,"has_aux",1));
            stan::math::initialize(yAux2, DUMMY_VAR__);
            stan::math::fill(yAux2,DUMMY_VAR__);
            current_statement_begin__ = 2930;
            validate_non_negative_index("yAux3", "get_base1(has_aux,3,\"has_aux\",1)", get_base1(has_aux,3,"has_aux",1));
            vector<local_scalar_t__> yAux3(get_base1(has_aux,3,"has_aux",1));
            stan::math::initialize(yAux3, DUMMY_VAR__);
            stan::math::fill(yAux3,DUMMY_VAR__);
            current_statement_begin__ = 2931;
            validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
            (void) theta_L;  // dummy to suppress unused var warning

            stan::math::initialize(theta_L, DUMMY_VAR__);
            stan::math::fill(theta_L,DUMMY_VAR__);
            current_statement_begin__ = 2932;
            local_scalar_t__ yAuxMaximum;
            (void) yAuxMaximum;  // dummy to suppress unused var warning

            stan::math::initialize(yAuxMaximum, DUMMY_VAR__);
            stan::math::fill(yAuxMaximum,DUMMY_VAR__);
            stan::math::assign(yAuxMaximum,1.0);
            current_statement_begin__ = 2935;
            validate_non_negative_index("bMat1", "(logical_gt(bK1,0) ? bN1 : 0 )", (logical_gt(bK1,0) ? bN1 : 0 ));
            validate_non_negative_index("bMat1", "bK1", bK1);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bMat1(static_cast<Eigen::VectorXd::Index>((logical_gt(bK1,0) ? bN1 : 0 )),static_cast<Eigen::VectorXd::Index>(bK1));
            (void) bMat1;  // dummy to suppress unused var warning

            stan::math::initialize(bMat1, DUMMY_VAR__);
            stan::math::fill(bMat1,DUMMY_VAR__);
            current_statement_begin__ = 2936;
            validate_non_negative_index("bMat2", "(logical_gt(bK2,0) ? bN2 : 0 )", (logical_gt(bK2,0) ? bN2 : 0 ));
            validate_non_negative_index("bMat2", "bK2", bK2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bMat2(static_cast<Eigen::VectorXd::Index>((logical_gt(bK2,0) ? bN2 : 0 )),static_cast<Eigen::VectorXd::Index>(bK2));
            (void) bMat2;  // dummy to suppress unused var warning

            stan::math::initialize(bMat2, DUMMY_VAR__);
            stan::math::fill(bMat2,DUMMY_VAR__);


            current_statement_begin__ = 2939;
            if (as_bool(logical_eq(get_base1(has_aux,1,"has_aux",1),1))) {

                current_statement_begin__ = 2940;
                stan::model::assign(yAux1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            make_aux(get_base1(yAux1_unscaled,1,"yAux1_unscaled",1),get_base1(y_prior_dist_for_aux,1,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,1,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,1,"y_prior_scale_for_aux",1), pstream__), 
                            "assigning variable yAux1");
                current_statement_begin__ = 2942;
                if (as_bool(logical_gt(get_base1(yAux1,1,"yAux1",1),yAuxMaximum))) {
                    current_statement_begin__ = 2943;
                    stan::math::assign(yAuxMaximum, get_base1(yAux1,1,"yAux1",1));
                }
            }
            current_statement_begin__ = 2946;
            if (as_bool(logical_gt(get_base1(yK,1,"yK",1),0))) {
                current_statement_begin__ = 2947;
                stan::math::assign(yBeta1, make_beta(z_yBeta1,get_base1(y_prior_dist,1,"y_prior_dist",1),y_prior_mean1,y_prior_scale1,y_prior_df1,get_base1(y_global_prior_scale,1,"y_global_prior_scale",1),yGlobal1,yLocal1,yOol1,yMix1,yAux1,get_base1(family,1,"family",1),get_base1(y_slab_scale,1,"y_slab_scale",1),y_caux1, pstream__));
            }
            current_statement_begin__ = 2951;
            if (as_bool(logical_gt(M,1))) {

                current_statement_begin__ = 2952;
                if (as_bool(logical_eq(get_base1(has_aux,2,"has_aux",1),1))) {

                    current_statement_begin__ = 2953;
                    stan::model::assign(yAux2, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                make_aux(get_base1(yAux2_unscaled,1,"yAux2_unscaled",1),get_base1(y_prior_dist_for_aux,2,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,2,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,2,"y_prior_scale_for_aux",1), pstream__), 
                                "assigning variable yAux2");
                    current_statement_begin__ = 2955;
                    if (as_bool(logical_gt(get_base1(yAux2,1,"yAux2",1),yAuxMaximum))) {
                        current_statement_begin__ = 2956;
                        stan::math::assign(yAuxMaximum, get_base1(yAux2,1,"yAux2",1));
                    }
                }
                current_statement_begin__ = 2958;
                if (as_bool(logical_gt(get_base1(yK,2,"yK",1),0))) {
                    current_statement_begin__ = 2959;
                    stan::math::assign(yBeta2, make_beta(z_yBeta2,get_base1(y_prior_dist,2,"y_prior_dist",1),y_prior_mean2,y_prior_scale2,y_prior_df2,get_base1(y_global_prior_scale,2,"y_global_prior_scale",1),yGlobal2,yLocal2,yOol2,yMix2,yAux2,get_base1(family,2,"family",1),get_base1(y_slab_scale,2,"y_slab_scale",1),y_caux2, pstream__));
                }
            }
            current_statement_begin__ = 2964;
            if (as_bool(logical_gt(M,2))) {

                current_statement_begin__ = 2965;
                if (as_bool(logical_eq(get_base1(has_aux,3,"has_aux",1),1))) {

                    current_statement_begin__ = 2966;
                    stan::model::assign(yAux3, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                make_aux(get_base1(yAux3_unscaled,1,"yAux3_unscaled",1),get_base1(y_prior_dist_for_aux,3,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,3,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,3,"y_prior_scale_for_aux",1), pstream__), 
                                "assigning variable yAux3");
                    current_statement_begin__ = 2968;
                    if (as_bool(logical_gt(get_base1(yAux3,1,"yAux3",1),yAuxMaximum))) {
                        current_statement_begin__ = 2969;
                        stan::math::assign(yAuxMaximum, get_base1(yAux3,1,"yAux3",1));
                    }
                }
                current_statement_begin__ = 2971;
                if (as_bool(logical_gt(get_base1(yK,3,"yK",1),0))) {
                    current_statement_begin__ = 2972;
                    stan::math::assign(yBeta3, make_beta(z_yBeta3,get_base1(y_prior_dist,3,"y_prior_dist",1),y_prior_mean3,y_prior_scale3,y_prior_df3,get_base1(y_global_prior_scale,3,"y_global_prior_scale",1),yGlobal3,yLocal3,yOol3,yMix3,yAux3,get_base1(family,3,"family",1),get_base1(y_slab_scale,3,"y_slab_scale",1),y_caux3, pstream__));
                }
            }
            current_statement_begin__ = 2979;
            if (as_bool(logical_eq(prior_dist_for_cov,1))) {
                {
                current_statement_begin__ = 2980;
                int mark(0);
                (void) mark;  // dummy to suppress unused var warning

                stan::math::fill(mark, std::numeric_limits<int>::min());
                stan::math::assign(mark,1);


                current_statement_begin__ = 2982;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,yAuxMaximum,tau,b_prior_scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 2985;
                if (as_bool(logical_gt(bK1,0))) {
                    current_statement_begin__ = 2986;
                    stan::math::assign(bMat1, make_b_matrix(z_b,theta_L,p,l,1, pstream__));
                }
                current_statement_begin__ = 2988;
                if (as_bool(logical_gt(bK2,0))) {
                    current_statement_begin__ = 2989;
                    stan::math::assign(bMat2, make_b_matrix(z_b,theta_L,p,l,2, pstream__));
                }
                }
            } else if (as_bool(logical_eq(prior_dist_for_cov,2))) {

                current_statement_begin__ = 2995;
                if (as_bool(logical_eq(bK1,1))) {
                    current_statement_begin__ = 2996;
                    stan::math::assign(bMat1, transpose(multiply(get_base1(bSd1,1,"bSd1",1),z_bMat1)));
                } else if (as_bool(logical_gt(bK1,1))) {
                    current_statement_begin__ = 2998;
                    stan::math::assign(bMat1, transpose(multiply(diag_pre_multiply(bSd1,bCholesky1),z_bMat1)));
                }
                current_statement_begin__ = 3000;
                if (as_bool(logical_eq(bK2,1))) {
                    current_statement_begin__ = 3001;
                    stan::math::assign(bMat2, transpose(multiply(get_base1(bSd2,1,"bSd2",1),z_bMat2)));
                } else if (as_bool(logical_gt(bK2,1))) {
                    current_statement_begin__ = 3003;
                    stan::math::assign(bMat2, transpose(multiply(diag_pre_multiply(bSd2,bCholesky2),z_bMat2)));
                }
            }
            current_statement_begin__ = 3014;
            stan::math::assign(e_beta01, make_beta(e_z_beta01,e_prior_dist01,e_prior_mean01,e_prior_scale01,e_prior_df01,e_global_prior_scale01,e_global01,e_local01,e_ool01,e_mix01,rep_array(1.0,0),0,e_slab_scale01,e_caux01, pstream__));
            current_statement_begin__ = 3018;
            stan::math::assign(e_beta02, make_beta(e_z_beta02,e_prior_dist02,e_prior_mean02,e_prior_scale02,e_prior_df02,e_global_prior_scale02,e_global02,e_local02,e_ool02,e_mix02,rep_array(1.0,0),0,e_slab_scale02,e_caux02, pstream__));
            current_statement_begin__ = 3023;
            stan::math::assign(e_beta12, make_beta(e_z_beta12,e_prior_dist12,e_prior_mean12,e_prior_scale12,e_prior_df12,e_global_prior_scale12,e_global12,e_local12,e_ool12,e_mix12,rep_array(1.0,0),0,e_slab_scale12,e_caux12, pstream__));
            current_statement_begin__ = 3029;
            stan::math::assign(a_beta01, make_beta(a_z_beta01,a_prior_dist01,a_prior_mean01,a_prior_scale01,a_prior_df01,a_global_prior_scale01,a_global01,a_local01,a_ool01,a_mix01,rep_array(1.0,0),0,a_slab_scale01,a_caux01, pstream__));
            current_statement_begin__ = 3033;
            stan::math::assign(a_beta02, make_beta(a_z_beta02,a_prior_dist02,a_prior_mean02,a_prior_scale02,a_prior_df02,a_global_prior_scale02,a_global02,a_local02,a_ool02,a_mix02,rep_array(1.0,0),0,a_slab_scale02,a_caux02, pstream__));
            current_statement_begin__ = 3037;
            stan::math::assign(a_beta12, make_beta(a_z_beta12,a_prior_dist12,a_prior_mean12,a_prior_scale12,a_prior_df12,a_global_prior_scale12,a_global12,a_local12,a_ool12,a_mix12,rep_array(1.0,0),0,a_slab_scale12,a_caux12, pstream__));
            current_statement_begin__ = 3042;
            stan::math::assign(e_aux01, make_basehaz_coef(e_aux_unscaled01,e_prior_dist_for_aux01,e_prior_mean_for_aux01,e_prior_scale_for_aux01, pstream__));
            current_statement_begin__ = 3044;
            stan::math::assign(e_aux02, make_basehaz_coef(e_aux_unscaled02,e_prior_dist_for_aux02,e_prior_mean_for_aux02,e_prior_scale_for_aux02, pstream__));
            current_statement_begin__ = 3046;
            stan::math::assign(e_aux12, make_basehaz_coef(e_aux_unscaled12,e_prior_dist_for_aux12,e_prior_mean_for_aux12,e_prior_scale_for_aux12, pstream__));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < e_K01; ++i0__) {
                if (stan::math::is_uninitialized(e_beta01(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: e_beta01" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < e_K02; ++i0__) {
                if (stan::math::is_uninitialized(e_beta02(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: e_beta02" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < e_K12; ++i0__) {
                if (stan::math::is_uninitialized(e_beta12(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: e_beta12" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < a_K01; ++i0__) {
                if (stan::math::is_uninitialized(a_beta01(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: a_beta01" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < a_K02; ++i0__) {
                if (stan::math::is_uninitialized(a_beta02(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: a_beta02" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < a_K12; ++i0__) {
                if (stan::math::is_uninitialized(a_beta12(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: a_beta12" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < basehaz_nvars01; ++i0__) {
                if (stan::math::is_uninitialized(e_aux01(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: e_aux01" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < basehaz_nvars02; ++i0__) {
                if (stan::math::is_uninitialized(e_aux02(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: e_aux02" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < basehaz_nvars12; ++i0__) {
                if (stan::math::is_uninitialized(e_aux12(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: e_aux12" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(yK,1,"yK",1); ++i0__) {
                if (stan::math::is_uninitialized(yBeta1(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yBeta1" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(yK,2,"yK",1); ++i0__) {
                if (stan::math::is_uninitialized(yBeta2(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yBeta2" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(yK,3,"yK",1); ++i0__) {
                if (stan::math::is_uninitialized(yBeta3(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yBeta3" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(has_aux,1,"has_aux",1); ++i0__) {
                if (stan::math::is_uninitialized(yAux1[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yAux1" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(has_aux,2,"has_aux",1); ++i0__) {
                if (stan::math::is_uninitialized(yAux2[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yAux2" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(has_aux,3,"has_aux",1); ++i0__) {
                if (stan::math::is_uninitialized(yAux3[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yAux3" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < len_theta_L; ++i0__) {
                if (stan::math::is_uninitialized(theta_L(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_L" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            if (stan::math::is_uninitialized(yAuxMaximum)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: yAuxMaximum";
                throw std::runtime_error(msg__.str());
            }
            for (int i0__ = 0; i0__ < (logical_gt(bK1,0) ? bN1 : 0 ); ++i0__) {
                for (int i1__ = 0; i1__ < bK1; ++i1__) {
                    if (stan::math::is_uninitialized(bMat1(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: bMat1" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < (logical_gt(bK2,0) ? bN2 : 0 ); ++i0__) {
                for (int i1__ = 0; i1__ < bK2; ++i1__) {
                    if (stan::math::is_uninitialized(bMat2(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: bMat2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 2908;
            current_statement_begin__ = 2909;
            current_statement_begin__ = 2910;
            current_statement_begin__ = 2912;
            current_statement_begin__ = 2913;
            current_statement_begin__ = 2914;
            current_statement_begin__ = 2916;
            current_statement_begin__ = 2917;
            current_statement_begin__ = 2918;
            current_statement_begin__ = 2925;
            current_statement_begin__ = 2926;
            current_statement_begin__ = 2927;
            current_statement_begin__ = 2928;
            current_statement_begin__ = 2929;
            current_statement_begin__ = 2930;
            current_statement_begin__ = 2931;
            current_statement_begin__ = 2932;
            current_statement_begin__ = 2935;
            current_statement_begin__ = 2936;

            // model body
            {
            current_statement_begin__ = 3053;
            validate_non_negative_index("yEta1", "get_base1(yNeta,1,\"yNeta\",1)", get_base1(yNeta,1,"yNeta",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta1(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,1,"yNeta",1)));
            (void) yEta1;  // dummy to suppress unused var warning

            stan::math::initialize(yEta1, DUMMY_VAR__);
            stan::math::fill(yEta1,DUMMY_VAR__);
            current_statement_begin__ = 3054;
            validate_non_negative_index("yEta2", "get_base1(yNeta,2,\"yNeta\",1)", get_base1(yNeta,2,"yNeta",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta2(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,2,"yNeta",1)));
            (void) yEta2;  // dummy to suppress unused var warning

            stan::math::initialize(yEta2, DUMMY_VAR__);
            stan::math::fill(yEta2,DUMMY_VAR__);
            current_statement_begin__ = 3055;
            validate_non_negative_index("yEta3", "get_base1(yNeta,3,\"yNeta\",1)", get_base1(yNeta,3,"yNeta",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta3(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,3,"yNeta",1)));
            (void) yEta3;  // dummy to suppress unused var warning

            stan::math::initialize(yEta3, DUMMY_VAR__);
            stan::math::fill(yEta3,DUMMY_VAR__);


            current_statement_begin__ = 3058;
            if (as_bool(logical_gt(M,0))) {
                {
                current_statement_begin__ = 3059;
                int bMat1_colshift(0);
                (void) bMat1_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat1_colshift,0);
                current_statement_begin__ = 3060;
                int bMat2_colshift(0);
                (void) bMat2_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat2_colshift,0);


                current_statement_begin__ = 3061;
                stan::math::assign(yEta1, evaluate_eta(yX1,y1_Z1,y1_Z2,y1_Z1_id,y1_Z2_id,yGamma1,yBeta1,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,1,"intercept_type",1), pstream__));
                }
            }
            current_statement_begin__ = 3066;
            if (as_bool(logical_gt(M,1))) {
                {
                current_statement_begin__ = 3067;
                int bMat1_colshift(0);
                (void) bMat1_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat1_colshift,get_base1(bK1_len,1,"bK1_len",1));
                current_statement_begin__ = 3068;
                int bMat2_colshift(0);
                (void) bMat2_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat2_colshift,get_base1(bK2_len,1,"bK2_len",1));


                current_statement_begin__ = 3069;
                stan::math::assign(yEta2, evaluate_eta(yX2,y2_Z1,y2_Z2,y2_Z1_id,y2_Z2_id,yGamma2,yBeta2,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,2,"intercept_type",1), pstream__));
                }
            }
            current_statement_begin__ = 3074;
            if (as_bool(logical_gt(M,2))) {
                {
                current_statement_begin__ = 3075;
                int bMat1_colshift(0);
                (void) bMat1_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat1_colshift,sum(stan::model::rvalue(bK1_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK1_len")));
                current_statement_begin__ = 3076;
                int bMat2_colshift(0);
                (void) bMat2_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat2_colshift,sum(stan::model::rvalue(bK2_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK2_len")));


                current_statement_begin__ = 3077;
                stan::math::assign(yEta3, evaluate_eta(yX3,y3_Z1,y3_Z2,y3_Z1_id,y3_Z2_id,yGamma3,yBeta3,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,3,"intercept_type",1), pstream__));
                }
            }
            current_statement_begin__ = 3082;
            if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 3083;
                glm_lp(yReal1,yInt1,yEta1,yAux1,get_base1(family,1,"family",1),get_base1(link,1,"link",1),sum_log_y1,sqrt_y1,log_y1, lp__, lp_accum__, pstream__);
                current_statement_begin__ = 3084;
                if (as_bool(logical_gt(M,1))) {
                    current_statement_begin__ = 3085;
                    glm_lp(yReal2,yInt2,yEta2,yAux2,get_base1(family,2,"family",1),get_base1(link,2,"link",1),sum_log_y2,sqrt_y2,log_y2, lp__, lp_accum__, pstream__);
                }
                current_statement_begin__ = 3086;
                if (as_bool(logical_gt(M,2))) {
                    current_statement_begin__ = 3087;
                    glm_lp(yReal3,yInt3,yEta3,yAux3,get_base1(family,3,"family",1),get_base1(link,3,"link",1),sum_log_y3,sqrt_y3,log_y3, lp__, lp_accum__, pstream__);
                }
            }
            {
            current_statement_begin__ = 3093;
            validate_non_negative_index("e_eta01", "len_cpts01", len_cpts01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta01(static_cast<Eigen::VectorXd::Index>(len_cpts01));
            (void) e_eta01;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta01, DUMMY_VAR__);
            stan::math::fill(e_eta01,DUMMY_VAR__);
            current_statement_begin__ = 3094;
            validate_non_negative_index("e_eta02", "len_cpts02", len_cpts02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta02(static_cast<Eigen::VectorXd::Index>(len_cpts02));
            (void) e_eta02;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta02, DUMMY_VAR__);
            stan::math::fill(e_eta02,DUMMY_VAR__);
            current_statement_begin__ = 3095;
            validate_non_negative_index("e_eta12", "len_cpts12", len_cpts12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta12(static_cast<Eigen::VectorXd::Index>(len_cpts12));
            (void) e_eta12;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta12, DUMMY_VAR__);
            stan::math::fill(e_eta12,DUMMY_VAR__);


            current_statement_begin__ = 3098;
            if (as_bool(logical_gt(e_K01,0))) {
                current_statement_begin__ = 3098;
                stan::math::assign(e_eta01, multiply(e_x01,e_beta01));
            } else {
                current_statement_begin__ = 3099;
                stan::math::assign(e_eta01, rep_vector(0.0,len_cpts01));
            }
            current_statement_begin__ = 3101;
            if (as_bool(logical_gt(e_K01,0))) {
                current_statement_begin__ = 3101;
                stan::math::assign(e_eta02, multiply(e_x02,e_beta02));
            } else {
                current_statement_begin__ = 3102;
                stan::math::assign(e_eta02, rep_vector(0.0,len_cpts02));
            }
            current_statement_begin__ = 3104;
            if (as_bool(logical_gt(e_K01,0))) {
                current_statement_begin__ = 3104;
                stan::math::assign(e_eta12, multiply(e_x12,e_beta12));
            } else {
                current_statement_begin__ = 3105;
                stan::math::assign(e_eta12, rep_vector(0.0,len_cpts12));
            }
            current_statement_begin__ = 3108;
            if (as_bool(logical_eq(e_has_intercept01,1))) {
                current_statement_begin__ = 3108;
                stan::math::assign(e_eta01, add(e_eta01, get_base1(e_gamma01,1,"e_gamma01",1)));
            }
            current_statement_begin__ = 3109;
            if (as_bool(logical_eq(e_has_intercept02,1))) {
                current_statement_begin__ = 3109;
                stan::math::assign(e_eta02, add(e_eta02, get_base1(e_gamma02,1,"e_gamma02",1)));
            }
            current_statement_begin__ = 3110;
            if (as_bool(logical_eq(e_has_intercept12,1))) {
                current_statement_begin__ = 3110;
                stan::math::assign(e_eta12, add(e_eta12, get_base1(e_gamma12,1,"e_gamma12",1)));
            }
            current_statement_begin__ = 3112;
            if (as_bool(logical_eq(assoc01,1))) {
                {
                current_statement_begin__ = 3122;
                int mark(0);
                (void) mark;  // dummy to suppress unused var warning

                stan::math::fill(mark, std::numeric_limits<int>::min());
                stan::math::assign(mark,0);
                current_statement_begin__ = 3127;
                int mark2(0);
                (void) mark2;  // dummy to suppress unused var warning

                stan::math::fill(mark2, std::numeric_limits<int>::min());
                stan::math::assign(mark2,0);
                current_statement_begin__ = 3130;
                int mark3(0);
                (void) mark3;  // dummy to suppress unused var warning

                stan::math::fill(mark3, std::numeric_limits<int>::min());
                stan::math::assign(mark3,0);


                current_statement_begin__ = 3132;
                for (int m = 1; m <= M; ++m) {

                    current_statement_begin__ = 3136;
                    stan::math::assign(mark2, (mark2 + 1));
                    current_statement_begin__ = 3137;
                    if (as_bool((primitive_value((primitive_value((primitive_value(logical_eq(get_base1(get_base1(has_assoc01,1,"has_assoc01",1),m,"has_assoc01",2),1)) || primitive_value(logical_eq(get_base1(get_base1(has_assoc01,9,"has_assoc01",1),m,"has_assoc01",2),1)))) || primitive_value(logical_eq(get_base1(get_base1(has_assoc01,13,"has_assoc01",1),m,"has_assoc01",2),1)))) || primitive_value(logical_eq(get_base1(get_base1(has_assoc01,14,"has_assoc01",1),m,"has_assoc01",2),1))))) {
                        {
                        current_statement_begin__ = 3143;
                        validate_non_negative_index("eta_tmp01", "get_base1(y_qrows01,m,\"y_qrows01\",1)", get_base1(y_qrows01,m,"y_qrows01",1));
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta_tmp01(static_cast<Eigen::VectorXd::Index>(get_base1(y_qrows01,m,"y_qrows01",1)));
                        (void) eta_tmp01;  // dummy to suppress unused var warning

                        stan::math::initialize(eta_tmp01, DUMMY_VAR__);
                        stan::math::fill(eta_tmp01,DUMMY_VAR__);


                        current_statement_begin__ = 3144;
                        if (as_bool(logical_eq(m,1))) {
                            {
                            current_statement_begin__ = 3145;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,0);
                            current_statement_begin__ = 3146;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,0);


                            current_statement_begin__ = 3147;
                            stan::math::assign(eta_tmp01, evaluate_eta(y1_x_eta_01,y1_z1_eta_01,y1_z2_eta_01,y1_z1_id_eta_01,y1_z2_id_eta_01,yGamma1,yBeta1,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,1,"intercept_type",1), pstream__));
                            }
                        } else if (as_bool(logical_eq(m,2))) {
                            {
                            current_statement_begin__ = 3161;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,get_base1(bK1_len,1,"bK1_len",1));
                            current_statement_begin__ = 3162;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,get_base1(bK2_len,1,"bK2_len",1));


                            current_statement_begin__ = 3163;
                            stan::math::assign(eta_tmp01, evaluate_eta(y2_x_eta_01,y2_z1_eta_01,y2_z2_eta_01,y2_z1_id_eta_01,y2_z2_id_eta_01,yGamma2,yBeta2,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,2,"intercept_type",1), pstream__));
                            }
                        } else if (as_bool(logical_eq(m,3))) {
                            {
                            current_statement_begin__ = 3177;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,sum(stan::model::rvalue(bK1_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK1_len")));
                            current_statement_begin__ = 3178;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,sum(stan::model::rvalue(bK2_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK2_len")));


                            current_statement_begin__ = 3179;
                            stan::math::assign(eta_tmp01, evaluate_eta(y3_x_eta_01,y3_z1_eta_01,y3_z2_eta_01,y3_z1_id_eta_01,y3_z2_id_eta_01,yGamma3,yBeta3,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,3,"intercept_type",1), pstream__));
                            }
                        }
                        current_statement_begin__ = 3194;
                        if (as_bool(logical_eq(get_base1(get_base1(has_assoc01,1,"has_assoc01",1),m,"has_assoc01",2),1))) {
                            {
                            current_statement_begin__ = 3195;
                            validate_non_negative_index("val", "get_base1(y_qrows01,m,\"y_qrows01\",1)", get_base1(y_qrows01,m,"y_qrows01",1));
                            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(get_base1(y_qrows01,m,"y_qrows01",1)));
                            (void) val;  // dummy to suppress unused var warning

                            stan::math::initialize(val, DUMMY_VAR__);
                            stan::math::fill(val,DUMMY_VAR__);


                            current_statement_begin__ = 3196;
                            if (as_bool(logical_eq(get_base1(has_grp01,m,"has_grp01",1),0))) {

                                current_statement_begin__ = 3197;
                                stan::math::assign(val, eta_tmp01);
                            } else {

                                current_statement_begin__ = 3200;
                                stan::math::assign(val, collapse_within_groups(eta_tmp01,idx_grp01,grp_assoc01, pstream__));
                            }
                            current_statement_begin__ = 3202;
                            stan::math::assign(mark, (mark + 1));
                            current_statement_begin__ = 3203;
                            stan::math::assign(e_eta01, add(e_eta01, multiply(get_base1(a_beta01,mark,"a_beta01",1),subtract(val,get_base1(a_xbar01,mark,"a_xbar01",1)))));
                            }
                        }
                        }
                    }
                }
                current_statement_begin__ = 3807;
                if (as_bool(logical_gt(sum_size_which_b01,0))) {

                    current_statement_begin__ = 3808;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "shared_b has been removed.";
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 3810;
                if (as_bool(logical_gt(sum_size_which_coef01,0))) {

                    current_statement_begin__ = 3811;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "shared_coef has been removed.";
                    throw std::domain_error(errmsg_stream__.str());
                }
                }
            }
            current_statement_begin__ = 3815;
            if (as_bool(logical_eq(assoc02,1))) {
                {
                current_statement_begin__ = 3825;
                int mark(0);
                (void) mark;  // dummy to suppress unused var warning

                stan::math::fill(mark, std::numeric_limits<int>::min());
                stan::math::assign(mark,0);
                current_statement_begin__ = 3830;
                int mark2(0);
                (void) mark2;  // dummy to suppress unused var warning

                stan::math::fill(mark2, std::numeric_limits<int>::min());
                stan::math::assign(mark2,0);
                current_statement_begin__ = 3833;
                int mark3(0);
                (void) mark3;  // dummy to suppress unused var warning

                stan::math::fill(mark3, std::numeric_limits<int>::min());
                stan::math::assign(mark3,0);


                current_statement_begin__ = 3835;
                for (int m = 1; m <= M; ++m) {

                    current_statement_begin__ = 3839;
                    stan::math::assign(mark2, (mark2 + 1));
                    current_statement_begin__ = 3840;
                    if (as_bool((primitive_value((primitive_value((primitive_value(logical_eq(get_base1(get_base1(has_assoc02,1,"has_assoc02",1),m,"has_assoc02",2),1)) || primitive_value(logical_eq(get_base1(get_base1(has_assoc02,9,"has_assoc02",1),m,"has_assoc02",2),1)))) || primitive_value(logical_eq(get_base1(get_base1(has_assoc02,13,"has_assoc02",1),m,"has_assoc02",2),1)))) || primitive_value(logical_eq(get_base1(get_base1(has_assoc02,14,"has_assoc02",1),m,"has_assoc02",2),1))))) {
                        {
                        current_statement_begin__ = 3846;
                        validate_non_negative_index("eta_tmp02", "get_base1(y_qrows02,m,\"y_qrows02\",1)", get_base1(y_qrows02,m,"y_qrows02",1));
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta_tmp02(static_cast<Eigen::VectorXd::Index>(get_base1(y_qrows02,m,"y_qrows02",1)));
                        (void) eta_tmp02;  // dummy to suppress unused var warning

                        stan::math::initialize(eta_tmp02, DUMMY_VAR__);
                        stan::math::fill(eta_tmp02,DUMMY_VAR__);


                        current_statement_begin__ = 3847;
                        if (as_bool(logical_eq(m,1))) {
                            {
                            current_statement_begin__ = 3848;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,0);
                            current_statement_begin__ = 3849;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,0);


                            current_statement_begin__ = 3850;
                            stan::math::assign(eta_tmp02, evaluate_eta(y1_x_eta_02,y1_z1_eta_02,y1_z2_eta_02,y1_z1_id_eta_02,y1_z2_id_eta_02,yGamma1,yBeta1,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,1,"intercept_type",1), pstream__));
                            }
                        } else if (as_bool(logical_eq(m,2))) {
                            {
                            current_statement_begin__ = 3864;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,get_base1(bK1_len,1,"bK1_len",1));
                            current_statement_begin__ = 3865;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,get_base1(bK2_len,1,"bK2_len",1));


                            current_statement_begin__ = 3866;
                            stan::math::assign(eta_tmp02, evaluate_eta(y2_x_eta_02,y2_z1_eta_02,y2_z2_eta_02,y2_z1_id_eta_02,y2_z2_id_eta_02,yGamma2,yBeta2,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,2,"intercept_type",1), pstream__));
                            }
                        } else if (as_bool(logical_eq(m,3))) {
                            {
                            current_statement_begin__ = 3880;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,sum(stan::model::rvalue(bK1_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK1_len")));
                            current_statement_begin__ = 3881;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,sum(stan::model::rvalue(bK2_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK2_len")));


                            current_statement_begin__ = 3882;
                            stan::math::assign(eta_tmp02, evaluate_eta(y3_x_eta_02,y3_z1_eta_02,y3_z2_eta_02,y3_z1_id_eta_02,y3_z2_id_eta_02,yGamma3,yBeta3,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,3,"intercept_type",1), pstream__));
                            }
                        }
                        current_statement_begin__ = 3897;
                        if (as_bool(logical_eq(get_base1(get_base1(has_assoc02,1,"has_assoc02",1),m,"has_assoc02",2),1))) {
                            {
                            current_statement_begin__ = 3898;
                            validate_non_negative_index("val", "get_base1(y_qrows02,m,\"y_qrows02\",1)", get_base1(y_qrows02,m,"y_qrows02",1));
                            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(get_base1(y_qrows02,m,"y_qrows02",1)));
                            (void) val;  // dummy to suppress unused var warning

                            stan::math::initialize(val, DUMMY_VAR__);
                            stan::math::fill(val,DUMMY_VAR__);


                            current_statement_begin__ = 3899;
                            if (as_bool(logical_eq(get_base1(has_grp02,m,"has_grp02",1),0))) {

                                current_statement_begin__ = 3900;
                                stan::math::assign(val, eta_tmp02);
                            } else {

                                current_statement_begin__ = 3903;
                                stan::math::assign(val, collapse_within_groups(eta_tmp02,idx_grp02,grp_assoc02, pstream__));
                            }
                            current_statement_begin__ = 3905;
                            stan::math::assign(mark, (mark + 1));
                            current_statement_begin__ = 3906;
                            stan::math::assign(e_eta02, add(e_eta02, multiply(get_base1(a_beta02,mark,"a_beta02",1),subtract(val,get_base1(a_xbar02,mark,"a_xbar02",1)))));
                            }
                        }
                        }
                    }
                }
                current_statement_begin__ = 4269;
                if (as_bool(logical_gt(sum_size_which_b02,0))) {

                    current_statement_begin__ = 4270;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "shared_b has been removed.";
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 4272;
                if (as_bool(logical_gt(sum_size_which_coef02,0))) {

                    current_statement_begin__ = 4273;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "shared_coef has been removed.";
                    throw std::domain_error(errmsg_stream__.str());
                }
                }
            }
            current_statement_begin__ = 4277;
            if (as_bool(logical_eq(assoc12,1))) {
                {
                current_statement_begin__ = 4287;
                int mark(0);
                (void) mark;  // dummy to suppress unused var warning

                stan::math::fill(mark, std::numeric_limits<int>::min());
                stan::math::assign(mark,0);
                current_statement_begin__ = 4292;
                int mark2(0);
                (void) mark2;  // dummy to suppress unused var warning

                stan::math::fill(mark2, std::numeric_limits<int>::min());
                stan::math::assign(mark2,0);
                current_statement_begin__ = 4295;
                int mark3(0);
                (void) mark3;  // dummy to suppress unused var warning

                stan::math::fill(mark3, std::numeric_limits<int>::min());
                stan::math::assign(mark3,0);


                current_statement_begin__ = 4297;
                for (int m = 1; m <= M; ++m) {

                    current_statement_begin__ = 4301;
                    stan::math::assign(mark2, (mark2 + 1));
                    current_statement_begin__ = 4302;
                    if (as_bool((primitive_value((primitive_value((primitive_value(logical_eq(get_base1(get_base1(has_assoc12,1,"has_assoc12",1),m,"has_assoc12",2),1)) || primitive_value(logical_eq(get_base1(get_base1(has_assoc12,9,"has_assoc12",1),m,"has_assoc12",2),1)))) || primitive_value(logical_eq(get_base1(get_base1(has_assoc12,13,"has_assoc12",1),m,"has_assoc12",2),1)))) || primitive_value(logical_eq(get_base1(get_base1(has_assoc12,14,"has_assoc12",1),m,"has_assoc12",2),1))))) {
                        {
                        current_statement_begin__ = 4308;
                        validate_non_negative_index("eta_tmp12", "get_base1(y_qrows12,m,\"y_qrows12\",1)", get_base1(y_qrows12,m,"y_qrows12",1));
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta_tmp12(static_cast<Eigen::VectorXd::Index>(get_base1(y_qrows12,m,"y_qrows12",1)));
                        (void) eta_tmp12;  // dummy to suppress unused var warning

                        stan::math::initialize(eta_tmp12, DUMMY_VAR__);
                        stan::math::fill(eta_tmp12,DUMMY_VAR__);


                        current_statement_begin__ = 4309;
                        if (as_bool(logical_eq(m,1))) {
                            {
                            current_statement_begin__ = 4310;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,0);
                            current_statement_begin__ = 4311;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,0);


                            current_statement_begin__ = 4312;
                            stan::math::assign(eta_tmp12, evaluate_eta(y1_x_eta_12,y1_z1_eta_12,y1_z2_eta_12,y1_z1_id_eta_12,y1_z2_id_eta_12,yGamma1,yBeta1,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,1,"intercept_type",1), pstream__));
                            }
                        } else if (as_bool(logical_eq(m,2))) {
                            {
                            current_statement_begin__ = 4326;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,get_base1(bK1_len,1,"bK1_len",1));
                            current_statement_begin__ = 4327;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,get_base1(bK2_len,1,"bK2_len",1));


                            current_statement_begin__ = 4328;
                            stan::math::assign(eta_tmp12, evaluate_eta(y2_x_eta_12,y2_z1_eta_12,y2_z2_eta_12,y2_z1_id_eta_12,y2_z2_id_eta_12,yGamma2,yBeta2,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,2,"intercept_type",1), pstream__));
                            }
                        } else if (as_bool(logical_eq(m,3))) {
                            {
                            current_statement_begin__ = 4342;
                            int bMat1_colshift(0);
                            (void) bMat1_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat1_colshift,sum(stan::model::rvalue(bK1_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK1_len")));
                            current_statement_begin__ = 4343;
                            int bMat2_colshift(0);
                            (void) bMat2_colshift;  // dummy to suppress unused var warning

                            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                            stan::math::assign(bMat2_colshift,sum(stan::model::rvalue(bK2_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK2_len")));


                            current_statement_begin__ = 4344;
                            stan::math::assign(eta_tmp12, evaluate_eta(y3_x_eta_12,y3_z1_eta_12,y3_z2_eta_12,y3_z1_id_eta_12,y3_z2_id_eta_12,yGamma3,yBeta3,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,3,"intercept_type",1), pstream__));
                            }
                        }
                        current_statement_begin__ = 4359;
                        if (as_bool(logical_eq(get_base1(get_base1(has_assoc12,1,"has_assoc12",1),m,"has_assoc12",2),1))) {
                            {
                            current_statement_begin__ = 4360;
                            validate_non_negative_index("val", "get_base1(y_qrows12,m,\"y_qrows12\",1)", get_base1(y_qrows12,m,"y_qrows12",1));
                            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(get_base1(y_qrows12,m,"y_qrows12",1)));
                            (void) val;  // dummy to suppress unused var warning

                            stan::math::initialize(val, DUMMY_VAR__);
                            stan::math::fill(val,DUMMY_VAR__);


                            current_statement_begin__ = 4361;
                            if (as_bool(logical_eq(get_base1(has_grp12,m,"has_grp12",1),0))) {

                                current_statement_begin__ = 4362;
                                stan::math::assign(val, eta_tmp12);
                            } else {

                                current_statement_begin__ = 4365;
                                stan::math::assign(val, collapse_within_groups(eta_tmp12,idx_grp12,grp_assoc12, pstream__));
                            }
                            current_statement_begin__ = 4367;
                            stan::math::assign(mark, (mark + 1));
                            current_statement_begin__ = 4368;
                            stan::math::assign(e_eta12, add(e_eta12, multiply(get_base1(a_beta12,mark,"a_beta12",1),subtract(val,get_base1(a_xbar12,mark,"a_xbar12",1)))));
                            }
                        }
                        }
                    }
                }
                current_statement_begin__ = 4731;
                if (as_bool(logical_gt(sum_size_which_b12,0))) {

                    current_statement_begin__ = 4732;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "shared_b has been removed.";
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 4734;
                if (as_bool(logical_gt(sum_size_which_coef12,0))) {

                    current_statement_begin__ = 4735;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "shared_coef has been removed.";
                    throw std::domain_error(errmsg_stream__.str());
                }
                }
            }

            {
            current_statement_begin__ = 4744;
            validate_non_negative_index("e_eta_epts01", "len_epts01", len_epts01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_epts01(static_cast<Eigen::VectorXd::Index>(len_epts01));
            (void) e_eta_epts01;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_epts01, DUMMY_VAR__);
            stan::math::fill(e_eta_epts01,DUMMY_VAR__);
            current_statement_begin__ = 4745;
            validate_non_negative_index("e_eta_qpts01", "len_qpts01", len_qpts01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_qpts01(static_cast<Eigen::VectorXd::Index>(len_qpts01));
            (void) e_eta_qpts01;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_qpts01, DUMMY_VAR__);
            stan::math::fill(e_eta_qpts01,DUMMY_VAR__);
            current_statement_begin__ = 4746;
            validate_non_negative_index("e_eta_ipts01", "len_ipts01", len_ipts01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_ipts01(static_cast<Eigen::VectorXd::Index>(len_ipts01));
            (void) e_eta_ipts01;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_ipts01, DUMMY_VAR__);
            stan::math::fill(e_eta_ipts01,DUMMY_VAR__);
            current_statement_begin__ = 4748;
            local_scalar_t__ lhaz_epts01;
            (void) lhaz_epts01;  // dummy to suppress unused var warning

            stan::math::initialize(lhaz_epts01, DUMMY_VAR__);
            stan::math::fill(lhaz_epts01,DUMMY_VAR__);
            stan::math::assign(lhaz_epts01,0);
            current_statement_begin__ = 4749;
            local_scalar_t__ lsur_qpts01;
            (void) lsur_qpts01;  // dummy to suppress unused var warning

            stan::math::initialize(lsur_qpts01, DUMMY_VAR__);
            stan::math::fill(lsur_qpts01,DUMMY_VAR__);
            stan::math::assign(lsur_qpts01,0);
            current_statement_begin__ = 4750;
            local_scalar_t__ lsur_ipts01;
            (void) lsur_ipts01;  // dummy to suppress unused var warning

            stan::math::initialize(lsur_ipts01, DUMMY_VAR__);
            stan::math::fill(lsur_ipts01,DUMMY_VAR__);
            stan::math::assign(lsur_ipts01,0);


            current_statement_begin__ = 4752;
            if (as_bool(logical_gt(len_epts01,0))) {
                current_statement_begin__ = 4752;
                stan::math::assign(e_eta_epts01, stan::model::rvalue(e_eta01, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts01,1,"idx_cpts01",1),1,"idx_cpts01",2), get_base1(get_base1(idx_cpts01,1,"idx_cpts01",1),2,"idx_cpts01",2)), stan::model::nil_index_list()), "e_eta01"));
            }
            current_statement_begin__ = 4753;
            if (as_bool(logical_gt(len_qpts01,0))) {
                current_statement_begin__ = 4753;
                stan::math::assign(e_eta_qpts01, stan::model::rvalue(e_eta01, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts01,2,"idx_cpts01",1),1,"idx_cpts01",2), get_base1(get_base1(idx_cpts01,2,"idx_cpts01",1),2,"idx_cpts01",2)), stan::model::nil_index_list()), "e_eta01"));
            }
            current_statement_begin__ = 4754;
            if (as_bool(logical_gt(len_ipts01,0))) {
                current_statement_begin__ = 4754;
                stan::math::assign(e_eta_ipts01, stan::model::rvalue(e_eta01, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts01,3,"idx_cpts01",1),1,"idx_cpts01",2), get_base1(get_base1(idx_cpts01,3,"idx_cpts01",1),2,"idx_cpts01",2)), stan::model::nil_index_list()), "e_eta01"));
            }
            current_statement_begin__ = 4757;
            if (as_bool(logical_eq(basehaz_type01,5))) {

                current_statement_begin__ = 4758;
                if (as_bool(logical_gt(len_epts01,0))) {

                    current_statement_begin__ = 4759;
                    stan::math::assign(lhaz_epts01, sum(e_eta_epts01));
                }
                current_statement_begin__ = 4761;
                if (as_bool(logical_gt(len_qpts01,0))) {

                    current_statement_begin__ = 4762;
                    stan::math::assign(lsur_qpts01, -(dot_product(qwts01,stan::math::exp(e_eta_qpts01))));
                }
                current_statement_begin__ = 4764;
                if (as_bool(logical_gt(len_ipts01,0))) {

                    current_statement_begin__ = 4765;
                    stan::math::assign(lsur_ipts01, -(dot_product(iwts01,stan::math::exp(e_eta_ipts01))));
                }
            } else if (as_bool(logical_eq(basehaz_type01,1))) {
                {
                current_statement_begin__ = 4769;
                local_scalar_t__ shape;
                (void) shape;  // dummy to suppress unused var warning

                stan::math::initialize(shape, DUMMY_VAR__);
                stan::math::fill(shape,DUMMY_VAR__);
                stan::math::assign(shape,get_base1(e_aux01,1,"e_aux01",1));
                current_statement_begin__ = 4770;
                local_scalar_t__ log_shape;
                (void) log_shape;  // dummy to suppress unused var warning

                stan::math::initialize(log_shape, DUMMY_VAR__);
                stan::math::fill(log_shape,DUMMY_VAR__);
                stan::math::assign(log_shape,stan::math::log(shape));


                current_statement_begin__ = 4771;
                if (as_bool(logical_gt(len_epts01,0))) {

                    current_statement_begin__ = 4772;
                    stan::math::assign(lhaz_epts01, (((len_epts01 * log_shape) + ((shape - 1) * sum_log_epts01)) + sum(e_eta_epts01)));
                }
                current_statement_begin__ = 4774;
                if (as_bool(logical_gt(len_qpts01,0))) {
                    {
                    current_statement_begin__ = 4775;
                    validate_non_negative_index("lhaz_qpts01", "len_qpts01", len_qpts01);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts01(static_cast<Eigen::VectorXd::Index>(len_qpts01));
                    (void) lhaz_qpts01;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts01, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts01,DUMMY_VAR__);


                    current_statement_begin__ = 4776;
                    stan::math::assign(lhaz_qpts01, add(add(log_shape,multiply((shape - 1),log_qpts01)),e_eta_qpts01));
                    current_statement_begin__ = 4777;
                    stan::math::assign(lsur_qpts01, -(dot_product(qwts01,stan::math::exp(lhaz_qpts01))));
                    }
                }
                current_statement_begin__ = 4779;
                if (as_bool(logical_gt(len_ipts01,0))) {
                    {
                    current_statement_begin__ = 4780;
                    validate_non_negative_index("lhaz_ipts01", "len_ipts01", len_ipts01);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts01(static_cast<Eigen::VectorXd::Index>(len_ipts01));
                    (void) lhaz_ipts01;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts01, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts01,DUMMY_VAR__);


                    current_statement_begin__ = 4781;
                    stan::math::assign(lhaz_ipts01, add(add(log_shape,multiply((shape - 1),log_ipts01)),e_eta_ipts01));
                    current_statement_begin__ = 4782;
                    stan::math::assign(lsur_ipts01, -(dot_product(iwts01,stan::math::exp(lhaz_ipts01))));
                    }
                }
                }
            } else if (as_bool(logical_eq(basehaz_type01,6))) {
                {
                current_statement_begin__ = 4786;
                local_scalar_t__ scale;
                (void) scale;  // dummy to suppress unused var warning

                stan::math::initialize(scale, DUMMY_VAR__);
                stan::math::fill(scale,DUMMY_VAR__);
                stan::math::assign(scale,get_base1(e_aux01,1,"e_aux01",1));


                current_statement_begin__ = 4787;
                if (as_bool(logical_gt(len_epts01,0))) {

                    current_statement_begin__ = 4788;
                    stan::math::assign(lhaz_epts01, ((scale * sum_epts01) + sum(e_eta_epts01)));
                }
                current_statement_begin__ = 4790;
                if (as_bool(logical_gt(len_qpts01,0))) {
                    {
                    current_statement_begin__ = 4791;
                    validate_non_negative_index("lhaz_qpts01", "len_qpts01", len_qpts01);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts01(static_cast<Eigen::VectorXd::Index>(len_qpts01));
                    (void) lhaz_qpts01;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts01, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts01,DUMMY_VAR__);


                    current_statement_begin__ = 4792;
                    stan::math::assign(lhaz_qpts01, add(multiply(scale,qpts01),e_eta_qpts01));
                    current_statement_begin__ = 4793;
                    stan::math::assign(lsur_qpts01, -(dot_product(qwts01,stan::math::exp(lhaz_qpts01))));
                    }
                }
                current_statement_begin__ = 4795;
                if (as_bool(logical_gt(len_ipts01,0))) {
                    {
                    current_statement_begin__ = 4796;
                    validate_non_negative_index("lhaz_ipts01", "len_ipts01", len_ipts01);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts01(static_cast<Eigen::VectorXd::Index>(len_ipts01));
                    (void) lhaz_ipts01;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts01, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts01,DUMMY_VAR__);


                    current_statement_begin__ = 4797;
                    stan::math::assign(lhaz_ipts01, add(multiply(scale,ipts01),e_eta_ipts01));
                    current_statement_begin__ = 4798;
                    stan::math::assign(lsur_ipts01, -(dot_product(iwts01,stan::math::exp(lhaz_ipts01))));
                    }
                }
                }
            } else if (as_bool(logical_eq(basehaz_type01,4))) {

                current_statement_begin__ = 4802;
                if (as_bool(logical_gt(len_epts01,0))) {
                    current_statement_begin__ = 4803;
                    stan::math::assign(lhaz_epts01, sum(add(stan::math::log(multiply(basis_epts01,e_aux01)),e_eta_epts01)));
                }
                current_statement_begin__ = 4804;
                if (as_bool(logical_gt(len_qpts01,0))) {
                    {
                    current_statement_begin__ = 4805;
                    validate_non_negative_index("lhaz_qpts01", "len_qpts01", len_qpts01);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts01(static_cast<Eigen::VectorXd::Index>(len_qpts01));
                    (void) lhaz_qpts01;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts01, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts01,DUMMY_VAR__);


                    current_statement_begin__ = 4806;
                    stan::math::assign(lhaz_qpts01, add(stan::math::log(multiply(basis_qpts01,e_aux01)),e_eta_qpts01));
                    current_statement_begin__ = 4807;
                    stan::math::assign(lsur_qpts01, -(dot_product(qwts01,stan::math::exp(lhaz_qpts01))));
                    }
                }
                current_statement_begin__ = 4809;
                if (as_bool(logical_gt(len_ipts01,0))) {
                    {
                    current_statement_begin__ = 4810;
                    validate_non_negative_index("lhaz_ipts01", "len_ipts01", len_ipts01);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts01(static_cast<Eigen::VectorXd::Index>(len_ipts01));
                    (void) lhaz_ipts01;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts01, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts01,DUMMY_VAR__);


                    current_statement_begin__ = 4811;
                    stan::math::assign(lhaz_ipts01, add(stan::math::log(multiply(basis_ipts01,e_aux01)),e_eta_ipts01));
                    current_statement_begin__ = 4812;
                    stan::math::assign(lsur_ipts01, -(dot_product(iwts01,stan::math::exp(lhaz_ipts01))));
                    }
                }
            } else if (as_bool(logical_eq(basehaz_type01,2))) {

                current_statement_begin__ = 4816;
                if (as_bool(logical_gt(len_epts01,0))) {

                    current_statement_begin__ = 4817;
                    stan::math::assign(lhaz_epts01, sum(add(multiply(basis_epts01,e_aux01),e_eta_epts01)));
                }
                current_statement_begin__ = 4819;
                if (as_bool(logical_gt(len_qpts01,0))) {
                    {
                    current_statement_begin__ = 4820;
                    validate_non_negative_index("lhaz_qpts01", "len_qpts01", len_qpts01);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts01(static_cast<Eigen::VectorXd::Index>(len_qpts01));
                    (void) lhaz_qpts01;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts01, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts01,DUMMY_VAR__);


                    current_statement_begin__ = 4821;
                    stan::math::assign(lhaz_qpts01, add(multiply(basis_qpts01,e_aux01),e_eta_qpts01));
                    current_statement_begin__ = 4822;
                    stan::math::assign(lsur_qpts01, -(dot_product(qwts01,stan::math::exp(lhaz_qpts01))));
                    }
                }
                current_statement_begin__ = 4824;
                if (as_bool(logical_gt(len_ipts01,0))) {
                    {
                    current_statement_begin__ = 4825;
                    validate_non_negative_index("lhaz_ipts01", "len_ipts01", len_ipts01);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts01(static_cast<Eigen::VectorXd::Index>(len_ipts01));
                    (void) lhaz_ipts01;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts01, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts01,DUMMY_VAR__);


                    current_statement_begin__ = 4826;
                    stan::math::assign(lhaz_ipts01, add(multiply(basis_ipts01,e_aux01),e_eta_ipts01));
                    current_statement_begin__ = 4827;
                    stan::math::assign(lsur_ipts01, -(dot_product(iwts01,stan::math::exp(lhaz_ipts01))));
                    }
                }
            } else {

                current_statement_begin__ = 4831;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Bug found: invalid baseline hazard.";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 4835;
            if (as_bool((primitive_value(logical_eq(has_weights,0)) && primitive_value(logical_eq(prior_PD,0))))) {

                current_statement_begin__ = 4836;
                lp_accum__.add(((lhaz_epts01 + lsur_qpts01) - lsur_ipts01));
            } else if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 4839;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Bug found: weights are not yet implemented.";
                throw std::domain_error(errmsg_stream__.str());
            }
            }
            {
            current_statement_begin__ = 4843;
            validate_non_negative_index("e_eta_epts02", "len_epts02", len_epts02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_epts02(static_cast<Eigen::VectorXd::Index>(len_epts02));
            (void) e_eta_epts02;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_epts02, DUMMY_VAR__);
            stan::math::fill(e_eta_epts02,DUMMY_VAR__);
            current_statement_begin__ = 4844;
            validate_non_negative_index("e_eta_qpts02", "len_qpts02", len_qpts02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_qpts02(static_cast<Eigen::VectorXd::Index>(len_qpts02));
            (void) e_eta_qpts02;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_qpts02, DUMMY_VAR__);
            stan::math::fill(e_eta_qpts02,DUMMY_VAR__);
            current_statement_begin__ = 4845;
            validate_non_negative_index("e_eta_ipts02", "len_ipts02", len_ipts02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_ipts02(static_cast<Eigen::VectorXd::Index>(len_ipts02));
            (void) e_eta_ipts02;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_ipts02, DUMMY_VAR__);
            stan::math::fill(e_eta_ipts02,DUMMY_VAR__);
            current_statement_begin__ = 4847;
            local_scalar_t__ lhaz_epts02;
            (void) lhaz_epts02;  // dummy to suppress unused var warning

            stan::math::initialize(lhaz_epts02, DUMMY_VAR__);
            stan::math::fill(lhaz_epts02,DUMMY_VAR__);
            stan::math::assign(lhaz_epts02,0);
            current_statement_begin__ = 4848;
            local_scalar_t__ lsur_qpts02;
            (void) lsur_qpts02;  // dummy to suppress unused var warning

            stan::math::initialize(lsur_qpts02, DUMMY_VAR__);
            stan::math::fill(lsur_qpts02,DUMMY_VAR__);
            stan::math::assign(lsur_qpts02,0);
            current_statement_begin__ = 4849;
            local_scalar_t__ lsur_ipts02;
            (void) lsur_ipts02;  // dummy to suppress unused var warning

            stan::math::initialize(lsur_ipts02, DUMMY_VAR__);
            stan::math::fill(lsur_ipts02,DUMMY_VAR__);
            stan::math::assign(lsur_ipts02,0);


            current_statement_begin__ = 4851;
            if (as_bool(logical_gt(len_epts02,0))) {
                current_statement_begin__ = 4851;
                stan::math::assign(e_eta_epts02, stan::model::rvalue(e_eta02, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts02,1,"idx_cpts02",1),1,"idx_cpts02",2), get_base1(get_base1(idx_cpts02,1,"idx_cpts02",1),2,"idx_cpts02",2)), stan::model::nil_index_list()), "e_eta02"));
            }
            current_statement_begin__ = 4852;
            if (as_bool(logical_gt(len_qpts02,0))) {
                current_statement_begin__ = 4852;
                stan::math::assign(e_eta_qpts02, stan::model::rvalue(e_eta02, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts02,2,"idx_cpts02",1),1,"idx_cpts02",2), get_base1(get_base1(idx_cpts02,2,"idx_cpts02",1),2,"idx_cpts02",2)), stan::model::nil_index_list()), "e_eta02"));
            }
            current_statement_begin__ = 4853;
            if (as_bool(logical_gt(len_ipts02,0))) {
                current_statement_begin__ = 4853;
                stan::math::assign(e_eta_ipts02, stan::model::rvalue(e_eta02, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts02,3,"idx_cpts02",1),1,"idx_cpts02",2), get_base1(get_base1(idx_cpts02,3,"idx_cpts02",1),2,"idx_cpts02",2)), stan::model::nil_index_list()), "e_eta02"));
            }
            current_statement_begin__ = 4856;
            if (as_bool(logical_eq(basehaz_type02,5))) {

                current_statement_begin__ = 4857;
                if (as_bool(logical_gt(len_epts02,0))) {

                    current_statement_begin__ = 4858;
                    stan::math::assign(lhaz_epts02, sum(e_eta_epts02));
                }
                current_statement_begin__ = 4860;
                if (as_bool(logical_gt(len_qpts02,0))) {

                    current_statement_begin__ = 4861;
                    stan::math::assign(lsur_qpts02, -(dot_product(qwts02,stan::math::exp(e_eta_qpts02))));
                }
                current_statement_begin__ = 4863;
                if (as_bool(logical_gt(len_ipts02,0))) {

                    current_statement_begin__ = 4864;
                    stan::math::assign(lsur_ipts02, -(dot_product(iwts02,stan::math::exp(e_eta_ipts02))));
                }
            } else if (as_bool(logical_eq(basehaz_type02,1))) {
                {
                current_statement_begin__ = 4868;
                local_scalar_t__ shape;
                (void) shape;  // dummy to suppress unused var warning

                stan::math::initialize(shape, DUMMY_VAR__);
                stan::math::fill(shape,DUMMY_VAR__);
                stan::math::assign(shape,get_base1(e_aux02,1,"e_aux02",1));
                current_statement_begin__ = 4869;
                local_scalar_t__ log_shape;
                (void) log_shape;  // dummy to suppress unused var warning

                stan::math::initialize(log_shape, DUMMY_VAR__);
                stan::math::fill(log_shape,DUMMY_VAR__);
                stan::math::assign(log_shape,stan::math::log(shape));


                current_statement_begin__ = 4870;
                if (as_bool(logical_gt(len_epts02,0))) {

                    current_statement_begin__ = 4871;
                    stan::math::assign(lhaz_epts02, (((len_epts02 * log_shape) + ((shape - 1) * sum_log_epts02)) + sum(e_eta_epts02)));
                }
                current_statement_begin__ = 4873;
                if (as_bool(logical_gt(len_qpts02,0))) {
                    {
                    current_statement_begin__ = 4874;
                    validate_non_negative_index("lhaz_qpts02", "len_qpts02", len_qpts02);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts02(static_cast<Eigen::VectorXd::Index>(len_qpts02));
                    (void) lhaz_qpts02;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts02, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts02,DUMMY_VAR__);


                    current_statement_begin__ = 4875;
                    stan::math::assign(lhaz_qpts02, add(add(log_shape,multiply((shape - 1),log_qpts02)),e_eta_qpts02));
                    current_statement_begin__ = 4876;
                    stan::math::assign(lsur_qpts02, -(dot_product(qwts02,stan::math::exp(lhaz_qpts02))));
                    }
                }
                current_statement_begin__ = 4878;
                if (as_bool(logical_gt(len_ipts02,0))) {
                    {
                    current_statement_begin__ = 4879;
                    validate_non_negative_index("lhaz_ipts02", "len_ipts02", len_ipts02);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts02(static_cast<Eigen::VectorXd::Index>(len_ipts02));
                    (void) lhaz_ipts02;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts02, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts02,DUMMY_VAR__);


                    current_statement_begin__ = 4880;
                    stan::math::assign(lhaz_ipts02, add(add(log_shape,multiply((shape - 1),log_ipts02)),e_eta_ipts02));
                    current_statement_begin__ = 4881;
                    stan::math::assign(lsur_ipts02, -(dot_product(iwts02,stan::math::exp(lhaz_ipts02))));
                    }
                }
                }
            } else if (as_bool(logical_eq(basehaz_type02,6))) {
                {
                current_statement_begin__ = 4885;
                local_scalar_t__ scale;
                (void) scale;  // dummy to suppress unused var warning

                stan::math::initialize(scale, DUMMY_VAR__);
                stan::math::fill(scale,DUMMY_VAR__);
                stan::math::assign(scale,get_base1(e_aux02,1,"e_aux02",1));


                current_statement_begin__ = 4886;
                if (as_bool(logical_gt(len_epts02,0))) {

                    current_statement_begin__ = 4887;
                    stan::math::assign(lhaz_epts02, ((scale * sum_epts02) + sum(e_eta_epts02)));
                }
                current_statement_begin__ = 4889;
                if (as_bool(logical_gt(len_qpts02,0))) {
                    {
                    current_statement_begin__ = 4890;
                    validate_non_negative_index("lhaz_qpts02", "len_qpts02", len_qpts02);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts02(static_cast<Eigen::VectorXd::Index>(len_qpts02));
                    (void) lhaz_qpts02;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts02, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts02,DUMMY_VAR__);


                    current_statement_begin__ = 4891;
                    stan::math::assign(lhaz_qpts02, add(multiply(scale,qpts02),e_eta_qpts02));
                    current_statement_begin__ = 4892;
                    stan::math::assign(lsur_qpts02, -(dot_product(qwts02,stan::math::exp(lhaz_qpts02))));
                    }
                }
                current_statement_begin__ = 4894;
                if (as_bool(logical_gt(len_ipts02,0))) {
                    {
                    current_statement_begin__ = 4895;
                    validate_non_negative_index("lhaz_ipts02", "len_ipts02", len_ipts02);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts02(static_cast<Eigen::VectorXd::Index>(len_ipts02));
                    (void) lhaz_ipts02;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts02, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts02,DUMMY_VAR__);


                    current_statement_begin__ = 4896;
                    stan::math::assign(lhaz_ipts02, add(multiply(scale,ipts02),e_eta_ipts02));
                    current_statement_begin__ = 4897;
                    stan::math::assign(lsur_ipts02, -(dot_product(iwts02,stan::math::exp(lhaz_ipts02))));
                    }
                }
                }
            } else if (as_bool(logical_eq(basehaz_type02,4))) {

                current_statement_begin__ = 4901;
                if (as_bool(logical_gt(len_epts02,0))) {
                    current_statement_begin__ = 4902;
                    stan::math::assign(lhaz_epts02, sum(add(stan::math::log(multiply(basis_epts02,e_aux02)),e_eta_epts02)));
                }
                current_statement_begin__ = 4903;
                if (as_bool(logical_gt(len_qpts02,0))) {
                    {
                    current_statement_begin__ = 4904;
                    validate_non_negative_index("lhaz_qpts02", "len_qpts02", len_qpts02);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts02(static_cast<Eigen::VectorXd::Index>(len_qpts02));
                    (void) lhaz_qpts02;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts02, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts02,DUMMY_VAR__);


                    current_statement_begin__ = 4905;
                    stan::math::assign(lhaz_qpts02, add(stan::math::log(multiply(basis_qpts02,e_aux02)),e_eta_qpts02));
                    current_statement_begin__ = 4906;
                    stan::math::assign(lsur_qpts02, -(dot_product(qwts02,stan::math::exp(lhaz_qpts02))));
                    }
                }
                current_statement_begin__ = 4908;
                if (as_bool(logical_gt(len_ipts02,0))) {
                    {
                    current_statement_begin__ = 4909;
                    validate_non_negative_index("lhaz_ipts02", "len_ipts02", len_ipts02);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts02(static_cast<Eigen::VectorXd::Index>(len_ipts02));
                    (void) lhaz_ipts02;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts02, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts02,DUMMY_VAR__);


                    current_statement_begin__ = 4910;
                    stan::math::assign(lhaz_ipts02, add(stan::math::log(multiply(basis_ipts02,e_aux02)),e_eta_ipts02));
                    current_statement_begin__ = 4911;
                    stan::math::assign(lsur_ipts02, -(dot_product(iwts02,stan::math::exp(lhaz_ipts02))));
                    }
                }
            } else if (as_bool(logical_eq(basehaz_type02,2))) {

                current_statement_begin__ = 4915;
                if (as_bool(logical_gt(len_epts02,0))) {

                    current_statement_begin__ = 4916;
                    stan::math::assign(lhaz_epts02, sum(add(multiply(basis_epts02,e_aux02),e_eta_epts02)));
                }
                current_statement_begin__ = 4918;
                if (as_bool(logical_gt(len_qpts02,0))) {
                    {
                    current_statement_begin__ = 4919;
                    validate_non_negative_index("lhaz_qpts02", "len_qpts02", len_qpts02);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts02(static_cast<Eigen::VectorXd::Index>(len_qpts02));
                    (void) lhaz_qpts02;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts02, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts02,DUMMY_VAR__);


                    current_statement_begin__ = 4920;
                    stan::math::assign(lhaz_qpts02, add(multiply(basis_qpts02,e_aux02),e_eta_qpts02));
                    current_statement_begin__ = 4921;
                    stan::math::assign(lsur_qpts02, -(dot_product(qwts02,stan::math::exp(lhaz_qpts02))));
                    }
                }
                current_statement_begin__ = 4923;
                if (as_bool(logical_gt(len_ipts02,0))) {
                    {
                    current_statement_begin__ = 4924;
                    validate_non_negative_index("lhaz_ipts02", "len_ipts02", len_ipts02);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts02(static_cast<Eigen::VectorXd::Index>(len_ipts02));
                    (void) lhaz_ipts02;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts02, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts02,DUMMY_VAR__);


                    current_statement_begin__ = 4925;
                    stan::math::assign(lhaz_ipts02, add(multiply(basis_ipts02,e_aux02),e_eta_ipts02));
                    current_statement_begin__ = 4926;
                    stan::math::assign(lsur_ipts02, -(dot_product(iwts02,stan::math::exp(lhaz_ipts02))));
                    }
                }
            } else {

                current_statement_begin__ = 4930;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Bug found: invalid baseline hazard.";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 4934;
            if (as_bool((primitive_value(logical_eq(has_weights,0)) && primitive_value(logical_eq(prior_PD,0))))) {

                current_statement_begin__ = 4935;
                lp_accum__.add(((lhaz_epts02 + lsur_qpts02) - lsur_ipts02));
            } else if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 4938;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Bug found: weights are not yet implemented.";
                throw std::domain_error(errmsg_stream__.str());
            }
            }
            {
            current_statement_begin__ = 4942;
            validate_non_negative_index("e_eta_epts12", "len_epts12", len_epts12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_epts12(static_cast<Eigen::VectorXd::Index>(len_epts12));
            (void) e_eta_epts12;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_epts12, DUMMY_VAR__);
            stan::math::fill(e_eta_epts12,DUMMY_VAR__);
            current_statement_begin__ = 4943;
            validate_non_negative_index("e_eta_qpts12", "len_qpts12", len_qpts12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_qpts12(static_cast<Eigen::VectorXd::Index>(len_qpts12));
            (void) e_eta_qpts12;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_qpts12, DUMMY_VAR__);
            stan::math::fill(e_eta_qpts12,DUMMY_VAR__);
            current_statement_begin__ = 4944;
            validate_non_negative_index("e_eta_ipts12", "len_ipts12", len_ipts12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_eta_ipts12(static_cast<Eigen::VectorXd::Index>(len_ipts12));
            (void) e_eta_ipts12;  // dummy to suppress unused var warning

            stan::math::initialize(e_eta_ipts12, DUMMY_VAR__);
            stan::math::fill(e_eta_ipts12,DUMMY_VAR__);
            current_statement_begin__ = 4946;
            local_scalar_t__ lhaz_epts12;
            (void) lhaz_epts12;  // dummy to suppress unused var warning

            stan::math::initialize(lhaz_epts12, DUMMY_VAR__);
            stan::math::fill(lhaz_epts12,DUMMY_VAR__);
            stan::math::assign(lhaz_epts12,0);
            current_statement_begin__ = 4947;
            local_scalar_t__ lsur_qpts12;
            (void) lsur_qpts12;  // dummy to suppress unused var warning

            stan::math::initialize(lsur_qpts12, DUMMY_VAR__);
            stan::math::fill(lsur_qpts12,DUMMY_VAR__);
            stan::math::assign(lsur_qpts12,0);
            current_statement_begin__ = 4948;
            local_scalar_t__ lsur_ipts12;
            (void) lsur_ipts12;  // dummy to suppress unused var warning

            stan::math::initialize(lsur_ipts12, DUMMY_VAR__);
            stan::math::fill(lsur_ipts12,DUMMY_VAR__);
            stan::math::assign(lsur_ipts12,0);


            current_statement_begin__ = 4950;
            if (as_bool(logical_gt(len_epts12,0))) {
                current_statement_begin__ = 4950;
                stan::math::assign(e_eta_epts12, stan::model::rvalue(e_eta12, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts12,1,"idx_cpts12",1),1,"idx_cpts12",2), get_base1(get_base1(idx_cpts12,1,"idx_cpts12",1),2,"idx_cpts12",2)), stan::model::nil_index_list()), "e_eta12"));
            }
            current_statement_begin__ = 4951;
            if (as_bool(logical_gt(len_qpts12,0))) {
                current_statement_begin__ = 4951;
                stan::math::assign(e_eta_qpts12, stan::model::rvalue(e_eta12, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts12,2,"idx_cpts12",1),1,"idx_cpts12",2), get_base1(get_base1(idx_cpts12,2,"idx_cpts12",1),2,"idx_cpts12",2)), stan::model::nil_index_list()), "e_eta12"));
            }
            current_statement_begin__ = 4952;
            if (as_bool(logical_gt(len_ipts12,0))) {
                current_statement_begin__ = 4952;
                stan::math::assign(e_eta_ipts12, stan::model::rvalue(e_eta12, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(idx_cpts12,3,"idx_cpts12",1),1,"idx_cpts12",2), get_base1(get_base1(idx_cpts12,3,"idx_cpts12",1),2,"idx_cpts12",2)), stan::model::nil_index_list()), "e_eta12"));
            }
            current_statement_begin__ = 4955;
            if (as_bool(logical_eq(basehaz_type12,5))) {

                current_statement_begin__ = 4956;
                if (as_bool(logical_gt(len_epts12,0))) {

                    current_statement_begin__ = 4957;
                    stan::math::assign(lhaz_epts12, sum(e_eta_epts12));
                }
                current_statement_begin__ = 4959;
                if (as_bool(logical_gt(len_qpts12,0))) {

                    current_statement_begin__ = 4960;
                    stan::math::assign(lsur_qpts12, -(dot_product(qwts12,stan::math::exp(e_eta_qpts12))));
                }
                current_statement_begin__ = 4962;
                if (as_bool(logical_gt(len_ipts12,0))) {

                    current_statement_begin__ = 4963;
                    stan::math::assign(lsur_ipts12, -(dot_product(iwts12,stan::math::exp(e_eta_ipts12))));
                }
            } else if (as_bool(logical_eq(basehaz_type12,1))) {
                {
                current_statement_begin__ = 4967;
                local_scalar_t__ shape;
                (void) shape;  // dummy to suppress unused var warning

                stan::math::initialize(shape, DUMMY_VAR__);
                stan::math::fill(shape,DUMMY_VAR__);
                stan::math::assign(shape,get_base1(e_aux12,1,"e_aux12",1));
                current_statement_begin__ = 4968;
                local_scalar_t__ log_shape;
                (void) log_shape;  // dummy to suppress unused var warning

                stan::math::initialize(log_shape, DUMMY_VAR__);
                stan::math::fill(log_shape,DUMMY_VAR__);
                stan::math::assign(log_shape,stan::math::log(shape));


                current_statement_begin__ = 4969;
                if (as_bool(logical_gt(len_epts12,0))) {

                    current_statement_begin__ = 4970;
                    stan::math::assign(lhaz_epts12, (((len_epts12 * log_shape) + ((shape - 1) * sum_log_epts12)) + sum(e_eta_epts12)));
                }
                current_statement_begin__ = 4972;
                if (as_bool(logical_gt(len_qpts12,0))) {
                    {
                    current_statement_begin__ = 4973;
                    validate_non_negative_index("lhaz_qpts12", "len_qpts12", len_qpts12);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts12(static_cast<Eigen::VectorXd::Index>(len_qpts12));
                    (void) lhaz_qpts12;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts12, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts12,DUMMY_VAR__);


                    current_statement_begin__ = 4974;
                    stan::math::assign(lhaz_qpts12, add(add(log_shape,multiply((shape - 1),log_qpts12)),e_eta_qpts12));
                    current_statement_begin__ = 4975;
                    stan::math::assign(lsur_qpts12, -(dot_product(qwts12,stan::math::exp(lhaz_qpts12))));
                    }
                }
                current_statement_begin__ = 4977;
                if (as_bool(logical_gt(len_ipts12,0))) {
                    {
                    current_statement_begin__ = 4978;
                    validate_non_negative_index("lhaz_ipts12", "len_ipts12", len_ipts12);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts12(static_cast<Eigen::VectorXd::Index>(len_ipts12));
                    (void) lhaz_ipts12;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts12, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts12,DUMMY_VAR__);


                    current_statement_begin__ = 4979;
                    stan::math::assign(lhaz_ipts12, add(add(log_shape,multiply((shape - 1),log_ipts12)),e_eta_ipts12));
                    current_statement_begin__ = 4980;
                    stan::math::assign(lsur_ipts12, -(dot_product(iwts12,stan::math::exp(lhaz_ipts12))));
                    }
                }
                }
            } else if (as_bool(logical_eq(basehaz_type12,6))) {
                {
                current_statement_begin__ = 4984;
                local_scalar_t__ scale;
                (void) scale;  // dummy to suppress unused var warning

                stan::math::initialize(scale, DUMMY_VAR__);
                stan::math::fill(scale,DUMMY_VAR__);
                stan::math::assign(scale,get_base1(e_aux12,1,"e_aux12",1));


                current_statement_begin__ = 4985;
                if (as_bool(logical_gt(len_epts12,0))) {

                    current_statement_begin__ = 4986;
                    stan::math::assign(lhaz_epts12, ((scale * sum_epts12) + sum(e_eta_epts12)));
                }
                current_statement_begin__ = 4988;
                if (as_bool(logical_gt(len_qpts12,0))) {
                    {
                    current_statement_begin__ = 4989;
                    validate_non_negative_index("lhaz_qpts12", "len_qpts12", len_qpts12);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts12(static_cast<Eigen::VectorXd::Index>(len_qpts12));
                    (void) lhaz_qpts12;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts12, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts12,DUMMY_VAR__);


                    current_statement_begin__ = 4990;
                    stan::math::assign(lhaz_qpts12, add(multiply(scale,qpts12),e_eta_qpts12));
                    current_statement_begin__ = 4991;
                    stan::math::assign(lsur_qpts12, -(dot_product(qwts12,stan::math::exp(lhaz_qpts12))));
                    }
                }
                current_statement_begin__ = 4993;
                if (as_bool(logical_gt(len_ipts12,0))) {
                    {
                    current_statement_begin__ = 4994;
                    validate_non_negative_index("lhaz_ipts12", "len_ipts12", len_ipts12);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts12(static_cast<Eigen::VectorXd::Index>(len_ipts12));
                    (void) lhaz_ipts12;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts12, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts12,DUMMY_VAR__);


                    current_statement_begin__ = 4995;
                    stan::math::assign(lhaz_ipts12, add(multiply(scale,ipts12),e_eta_ipts12));
                    current_statement_begin__ = 4996;
                    stan::math::assign(lsur_ipts12, -(dot_product(iwts12,stan::math::exp(lhaz_ipts12))));
                    }
                }
                }
            } else if (as_bool(logical_eq(basehaz_type12,4))) {

                current_statement_begin__ = 5000;
                if (as_bool(logical_gt(len_epts12,0))) {
                    current_statement_begin__ = 5001;
                    stan::math::assign(lhaz_epts12, sum(add(stan::math::log(multiply(basis_epts12,e_aux12)),e_eta_epts12)));
                }
                current_statement_begin__ = 5002;
                if (as_bool(logical_gt(len_qpts12,0))) {
                    {
                    current_statement_begin__ = 5003;
                    validate_non_negative_index("lhaz_qpts12", "len_qpts12", len_qpts12);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts12(static_cast<Eigen::VectorXd::Index>(len_qpts12));
                    (void) lhaz_qpts12;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts12, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts12,DUMMY_VAR__);


                    current_statement_begin__ = 5004;
                    stan::math::assign(lhaz_qpts12, add(stan::math::log(multiply(basis_qpts12,e_aux12)),e_eta_qpts12));
                    current_statement_begin__ = 5005;
                    stan::math::assign(lsur_qpts12, -(dot_product(qwts12,stan::math::exp(lhaz_qpts12))));
                    }
                }
                current_statement_begin__ = 5007;
                if (as_bool(logical_gt(len_ipts12,0))) {
                    {
                    current_statement_begin__ = 5008;
                    validate_non_negative_index("lhaz_ipts12", "len_ipts12", len_ipts12);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts12(static_cast<Eigen::VectorXd::Index>(len_ipts12));
                    (void) lhaz_ipts12;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts12, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts12,DUMMY_VAR__);


                    current_statement_begin__ = 5009;
                    stan::math::assign(lhaz_ipts12, add(stan::math::log(multiply(basis_ipts12,e_aux12)),e_eta_ipts12));
                    current_statement_begin__ = 5010;
                    stan::math::assign(lsur_ipts12, -(dot_product(iwts12,stan::math::exp(lhaz_ipts12))));
                    }
                }
            } else if (as_bool(logical_eq(basehaz_type12,2))) {

                current_statement_begin__ = 5014;
                if (as_bool(logical_gt(len_epts12,0))) {

                    current_statement_begin__ = 5015;
                    stan::math::assign(lhaz_epts12, sum(add(multiply(basis_epts12,e_aux12),e_eta_epts12)));
                }
                current_statement_begin__ = 5017;
                if (as_bool(logical_gt(len_qpts12,0))) {
                    {
                    current_statement_begin__ = 5018;
                    validate_non_negative_index("lhaz_qpts12", "len_qpts12", len_qpts12);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_qpts12(static_cast<Eigen::VectorXd::Index>(len_qpts12));
                    (void) lhaz_qpts12;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_qpts12, DUMMY_VAR__);
                    stan::math::fill(lhaz_qpts12,DUMMY_VAR__);


                    current_statement_begin__ = 5019;
                    stan::math::assign(lhaz_qpts12, add(multiply(basis_qpts12,e_aux12),e_eta_qpts12));
                    current_statement_begin__ = 5020;
                    stan::math::assign(lsur_qpts12, -(dot_product(qwts12,stan::math::exp(lhaz_qpts12))));
                    }
                }
                current_statement_begin__ = 5022;
                if (as_bool(logical_gt(len_ipts12,0))) {
                    {
                    current_statement_begin__ = 5023;
                    validate_non_negative_index("lhaz_ipts12", "len_ipts12", len_ipts12);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lhaz_ipts12(static_cast<Eigen::VectorXd::Index>(len_ipts12));
                    (void) lhaz_ipts12;  // dummy to suppress unused var warning

                    stan::math::initialize(lhaz_ipts12, DUMMY_VAR__);
                    stan::math::fill(lhaz_ipts12,DUMMY_VAR__);


                    current_statement_begin__ = 5024;
                    stan::math::assign(lhaz_ipts12, add(multiply(basis_ipts12,e_aux12),e_eta_ipts12));
                    current_statement_begin__ = 5025;
                    stan::math::assign(lsur_ipts12, -(dot_product(iwts12,stan::math::exp(lhaz_ipts12))));
                    }
                }
            } else {

                current_statement_begin__ = 5029;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Bug found: invalid baseline hazard.";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 5033;
            if (as_bool((primitive_value(logical_eq(has_weights,0)) && primitive_value(logical_eq(prior_PD,0))))) {

                current_statement_begin__ = 5034;
                lp_accum__.add(((lhaz_epts12 + lsur_qpts12) - lsur_ipts12));
            } else if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 5037;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Bug found: weights are not yet implemented.";
                throw std::domain_error(errmsg_stream__.str());
            }
            }
            }
            current_statement_begin__ = 5048;
            if (as_bool(logical_eq(get_base1(has_aux,1,"has_aux",1),1))) {
                current_statement_begin__ = 5049;
                aux_lp(get_base1(yAux1_unscaled,1,"yAux1_unscaled",1),get_base1(y_prior_dist_for_aux,1,"y_prior_dist_for_aux",1),get_base1(y_prior_scale_for_aux,1,"y_prior_scale_for_aux",1),get_base1(y_prior_df_for_aux,1,"y_prior_df_for_aux",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5051;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(has_aux,2,"has_aux",1),1))))) {
                current_statement_begin__ = 5052;
                aux_lp(get_base1(yAux2_unscaled,1,"yAux2_unscaled",1),get_base1(y_prior_dist_for_aux,2,"y_prior_dist_for_aux",1),get_base1(y_prior_scale_for_aux,2,"y_prior_scale_for_aux",1),get_base1(y_prior_df_for_aux,2,"y_prior_df_for_aux",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5054;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(has_aux,3,"has_aux",1),1))))) {
                current_statement_begin__ = 5055;
                aux_lp(get_base1(yAux3_unscaled,1,"yAux3_unscaled",1),get_base1(y_prior_dist_for_aux,3,"y_prior_dist_for_aux",1),get_base1(y_prior_scale_for_aux,3,"y_prior_scale_for_aux",1),get_base1(y_prior_df_for_aux,3,"y_prior_df_for_aux",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5059;
            if (as_bool(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0))) {
                current_statement_begin__ = 5060;
                gamma_lp(get_base1(yGamma1,1,"yGamma1",1),get_base1(y_prior_dist_for_intercept,1,"y_prior_dist_for_intercept",1),get_base1(y_prior_mean_for_intercept,1,"y_prior_mean_for_intercept",1),get_base1(y_prior_scale_for_intercept,1,"y_prior_scale_for_intercept",1),get_base1(y_prior_df_for_intercept,1,"y_prior_df_for_intercept",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5062;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0))))) {
                current_statement_begin__ = 5063;
                gamma_lp(get_base1(yGamma2,1,"yGamma2",1),get_base1(y_prior_dist_for_intercept,2,"y_prior_dist_for_intercept",1),get_base1(y_prior_mean_for_intercept,2,"y_prior_mean_for_intercept",1),get_base1(y_prior_scale_for_intercept,2,"y_prior_scale_for_intercept",1),get_base1(y_prior_df_for_intercept,2,"y_prior_df_for_intercept",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5065;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0))))) {
                current_statement_begin__ = 5066;
                gamma_lp(get_base1(yGamma3,1,"yGamma3",1),get_base1(y_prior_dist_for_intercept,3,"y_prior_dist_for_intercept",1),get_base1(y_prior_mean_for_intercept,3,"y_prior_mean_for_intercept",1),get_base1(y_prior_scale_for_intercept,3,"y_prior_scale_for_intercept",1),get_base1(y_prior_df_for_intercept,3,"y_prior_df_for_intercept",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5070;
            if (as_bool(logical_gt(get_base1(yK,1,"yK",1),0))) {
                current_statement_begin__ = 5071;
                beta_lp(z_yBeta1,get_base1(y_prior_dist,1,"y_prior_dist",1),y_prior_scale1,y_prior_df1,get_base1(y_global_prior_df,1,"y_global_prior_df",1),yLocal1,yGlobal1,yMix1,yOol1,get_base1(y_slab_df,1,"y_slab_df",1),y_caux1, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5074;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_gt(get_base1(yK,2,"yK",1),0))))) {
                current_statement_begin__ = 5075;
                beta_lp(z_yBeta2,get_base1(y_prior_dist,2,"y_prior_dist",1),y_prior_scale2,y_prior_df2,get_base1(y_global_prior_df,2,"y_global_prior_df",1),yLocal2,yGlobal2,yMix2,yOol2,get_base1(y_slab_df,2,"y_slab_df",1),y_caux2, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5078;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_gt(get_base1(yK,3,"yK",1),0))))) {
                current_statement_begin__ = 5079;
                beta_lp(z_yBeta3,get_base1(y_prior_dist,3,"y_prior_dist",1),y_prior_scale3,y_prior_df3,get_base1(y_global_prior_df,3,"y_global_prior_df",1),yLocal3,yGlobal3,yMix3,yOol3,get_base1(y_slab_df,3,"y_slab_df",1),y_caux3, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5084;
            if (as_bool(logical_eq(prior_dist_for_cov,1))) {
                {
                current_statement_begin__ = 5085;
                local_scalar_t__ dummy;
                (void) dummy;  // dummy to suppress unused var warning

                stan::math::initialize(dummy, DUMMY_VAR__);
                stan::math::fill(dummy,DUMMY_VAR__);
                stan::math::assign(dummy,decov_lp(z_b,z_T,rho,zeta,tau,b_prior_regularization,delta,b_prior_shape,t,p, lp__, lp_accum__, pstream__));


                }
            } else if (as_bool(logical_eq(prior_dist_for_cov,2))) {

                current_statement_begin__ = 5089;
                if (as_bool(logical_gt(bK1,0))) {

                    current_statement_begin__ = 5091;
                    lp_accum__.add(student_t_log(bSd1,b1_prior_df,0,b1_prior_scale));
                    current_statement_begin__ = 5093;
                    lp_accum__.add(normal_log(to_vector(z_bMat1),0,1));
                    current_statement_begin__ = 5095;
                    if (as_bool(logical_gt(bK1,1))) {
                        current_statement_begin__ = 5096;
                        lp_accum__.add(lkj_corr_cholesky_log(bCholesky1,b1_prior_regularization));
                    }
                }
                current_statement_begin__ = 5098;
                if (as_bool(logical_gt(bK2,0))) {

                    current_statement_begin__ = 5100;
                    lp_accum__.add(student_t_log(bSd2,b2_prior_df,0,b2_prior_scale));
                    current_statement_begin__ = 5102;
                    lp_accum__.add(normal_log(to_vector(z_bMat2),0,1));
                    current_statement_begin__ = 5104;
                    if (as_bool(logical_gt(bK2,1))) {
                        current_statement_begin__ = 5105;
                        lp_accum__.add(lkj_corr_cholesky_log(bCholesky2,b2_prior_regularization));
                    }
                }
            }
            current_statement_begin__ = 5109;
            beta_lp(e_z_beta01,e_prior_dist01,e_prior_scale01,e_prior_df01,e_global_prior_df01,e_local01,e_global01,e_mix01,e_ool01,e_slab_df01,e_caux01, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5121;
            beta_lp(a_z_beta01,a_prior_dist01,a_prior_scale01,a_prior_df01,a_global_prior_df01,a_local01,a_global01,a_mix01,a_ool01,a_slab_df01,a_caux01, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5133;
            basehaz_lp(e_aux_unscaled01,e_prior_dist_for_aux01,e_prior_df_for_aux01, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5137;
            if (as_bool(logical_eq(e_has_intercept01,1))) {
                current_statement_begin__ = 5138;
                gamma_lp(get_base1(e_gamma01,1,"e_gamma01",1),e_prior_dist_for_intercept01,e_prior_mean_for_intercept01,e_prior_scale_for_intercept01,e_prior_df_for_intercept01, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5145;
            beta_lp(e_z_beta02,e_prior_dist02,e_prior_scale02,e_prior_df02,e_global_prior_df02,e_local02,e_global02,e_mix02,e_ool02,e_slab_df02,e_caux02, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5157;
            beta_lp(a_z_beta02,a_prior_dist02,a_prior_scale02,a_prior_df02,a_global_prior_df02,a_local02,a_global02,a_mix02,a_ool02,a_slab_df02,a_caux02, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5169;
            basehaz_lp(e_aux_unscaled02,e_prior_dist_for_aux02,e_prior_df_for_aux02, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5173;
            if (as_bool(logical_eq(e_has_intercept02,1))) {
                current_statement_begin__ = 5174;
                gamma_lp(get_base1(e_gamma02,1,"e_gamma02",1),e_prior_dist_for_intercept02,e_prior_mean_for_intercept02,e_prior_scale_for_intercept02,e_prior_df_for_intercept02, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 5181;
            beta_lp(e_z_beta12,e_prior_dist12,e_prior_scale12,e_prior_df12,e_global_prior_df12,e_local12,e_global12,e_mix12,e_ool12,e_slab_df12,e_caux12, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5193;
            beta_lp(a_z_beta12,a_prior_dist12,a_prior_scale12,a_prior_df12,a_global_prior_df12,a_local12,a_global12,a_mix12,a_ool12,a_slab_df12,a_caux12, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5205;
            basehaz_lp(e_aux_unscaled12,e_prior_dist_for_aux12,e_prior_df_for_aux12, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 5209;
            if (as_bool(logical_eq(e_has_intercept12,1))) {
                current_statement_begin__ = 5210;
                gamma_lp(get_base1(e_gamma12,1,"e_gamma12",1),e_prior_dist_for_intercept12,e_prior_mean_for_intercept12,e_prior_scale_for_intercept12,e_prior_df_for_intercept12, lp__, lp_accum__, pstream__);
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("yGamma1");
        names__.push_back("yGamma2");
        names__.push_back("yGamma3");
        names__.push_back("z_yBeta1");
        names__.push_back("z_yBeta2");
        names__.push_back("z_yBeta3");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau");
        names__.push_back("bSd1");
        names__.push_back("z_bMat1");
        names__.push_back("bCholesky1");
        names__.push_back("bSd2");
        names__.push_back("z_bMat2");
        names__.push_back("bCholesky2");
        names__.push_back("yAux1_unscaled");
        names__.push_back("yAux2_unscaled");
        names__.push_back("yAux3_unscaled");
        names__.push_back("yGlobal1");
        names__.push_back("yGlobal2");
        names__.push_back("yGlobal3");
        names__.push_back("yLocal1");
        names__.push_back("yLocal2");
        names__.push_back("yLocal3");
        names__.push_back("y_caux1");
        names__.push_back("y_caux2");
        names__.push_back("y_caux3");
        names__.push_back("yOol1");
        names__.push_back("yOol2");
        names__.push_back("yOol3");
        names__.push_back("yMix1");
        names__.push_back("yMix2");
        names__.push_back("yMix3");
        names__.push_back("e_z_beta01");
        names__.push_back("e_gamma01");
        names__.push_back("e_aux_unscaled01");
        names__.push_back("e_global01");
        names__.push_back("e_local01");
        names__.push_back("e_caux01");
        names__.push_back("e_mix01");
        names__.push_back("e_ool01");
        names__.push_back("e_z_beta02");
        names__.push_back("e_gamma02");
        names__.push_back("e_aux_unscaled02");
        names__.push_back("e_global02");
        names__.push_back("e_local02");
        names__.push_back("e_caux02");
        names__.push_back("e_mix02");
        names__.push_back("e_ool02");
        names__.push_back("e_z_beta12");
        names__.push_back("e_gamma12");
        names__.push_back("e_aux_unscaled12");
        names__.push_back("e_global12");
        names__.push_back("e_local12");
        names__.push_back("e_caux12");
        names__.push_back("e_mix12");
        names__.push_back("e_ool12");
        names__.push_back("a_z_beta01");
        names__.push_back("a_global01");
        names__.push_back("a_local01");
        names__.push_back("a_caux01");
        names__.push_back("a_mix01");
        names__.push_back("a_ool01");
        names__.push_back("a_z_beta02");
        names__.push_back("a_global02");
        names__.push_back("a_local02");
        names__.push_back("a_caux02");
        names__.push_back("a_mix02");
        names__.push_back("a_ool02");
        names__.push_back("a_z_beta12");
        names__.push_back("a_global12");
        names__.push_back("a_local12");
        names__.push_back("a_caux12");
        names__.push_back("a_mix12");
        names__.push_back("a_ool12");
        names__.push_back("e_beta01");
        names__.push_back("e_beta02");
        names__.push_back("e_beta12");
        names__.push_back("a_beta01");
        names__.push_back("a_beta02");
        names__.push_back("a_beta12");
        names__.push_back("e_aux01");
        names__.push_back("e_aux02");
        names__.push_back("e_aux12");
        names__.push_back("yBeta1");
        names__.push_back("yBeta2");
        names__.push_back("yBeta3");
        names__.push_back("yAux1");
        names__.push_back("yAux2");
        names__.push_back("yAux3");
        names__.push_back("theta_L");
        names__.push_back("yAuxMaximum");
        names__.push_back("bMat1");
        names__.push_back("bMat2");
        names__.push_back("e_alpha01");
        names__.push_back("e_alpha02");
        names__.push_back("e_alpha12");
        names__.push_back("mean_PPD");
        names__.push_back("yAlpha1");
        names__.push_back("yAlpha2");
        names__.push_back("yAlpha3");
        names__.push_back("bCov1");
        names__.push_back("bCov2");
        names__.push_back("b1");
        names__.push_back("b2");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,1,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,2,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,3,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? q : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? t : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ));
        dims__.push_back((logical_gt(bK1,0) ? bN1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ));
        dims__.push_back((logical_gt(bK2,0) ? bN2 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,1,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,2,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,3,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs1);
        dims__.push_back(get_base1(yK,1,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs2);
        dims__.push_back(get_base1(yK,2,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs3);
        dims__.push_back(get_base1(yK,3,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(yHs1,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(yHs2,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(yHs3,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))));
        dims__.push_back(get_base1(yK,1,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))));
        dims__.push_back(get_base1(yK,2,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))));
        dims__.push_back(get_base1(yK,3,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_K01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(e_has_intercept01,1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(basehaz_nvars01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_hs01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_hs01);
        dims__.push_back((logical_gt(e_hs01,0) * e_K01));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(e_hs01,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))));
        dims__.push_back(e_K01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(e_prior_dist01,6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_K02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(e_has_intercept02,1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(basehaz_nvars02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_hs02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_hs02);
        dims__.push_back((logical_gt(e_hs02,0) * e_K02));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(e_hs02,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))));
        dims__.push_back(e_K02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(e_prior_dist02,6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_K12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(e_has_intercept12,1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(basehaz_nvars12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_hs12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_hs12);
        dims__.push_back((logical_gt(e_hs12,0) * e_K12));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(e_hs12,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))));
        dims__.push_back(e_K12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(e_prior_dist12,6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_K01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_hs01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_hs01);
        dims__.push_back((logical_gt(a_hs01,0) * a_K01));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(a_hs01,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))));
        dims__.push_back(a_K01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(a_prior_dist01,6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_K02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_hs02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_hs02);
        dims__.push_back((logical_gt(a_hs02,0) * a_K02));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(a_hs02,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))));
        dims__.push_back(a_K02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(a_prior_dist02,6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_K12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_hs12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_hs12);
        dims__.push_back((logical_gt(a_hs12,0) * a_K12));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(a_hs12,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))));
        dims__.push_back(a_K12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(a_prior_dist12,6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_K01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_K02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_K12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_K01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_K02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_K12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(basehaz_nvars01);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(basehaz_nvars02);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(basehaz_nvars12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,1,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,2,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,3,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,1,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,2,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,3,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(bK1,0) ? bN1 : 0 ));
        dims__.push_back(bK1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(bK2,0) ? bN2 : 0 ));
        dims__.push_back(bK2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((bN1 * bK1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((bN2 * bK2));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_msjm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> yGamma1;
        size_t dim_yGamma1_0__ = logical_gt(get_base1(intercept_type,1,"intercept_type",1),0);
        for (size_t k_0__ = 0; k_0__ < dim_yGamma1_0__; ++k_0__) {
            yGamma1.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,1,"intercept_type",1), pstream__),ub(get_base1(intercept_type,1,"intercept_type",1), pstream__)));
        }
        vector<double> yGamma2;
        size_t dim_yGamma2_0__ = logical_gt(get_base1(intercept_type,2,"intercept_type",1),0);
        for (size_t k_0__ = 0; k_0__ < dim_yGamma2_0__; ++k_0__) {
            yGamma2.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,2,"intercept_type",1), pstream__),ub(get_base1(intercept_type,2,"intercept_type",1), pstream__)));
        }
        vector<double> yGamma3;
        size_t dim_yGamma3_0__ = logical_gt(get_base1(intercept_type,3,"intercept_type",1),0);
        for (size_t k_0__ = 0; k_0__ < dim_yGamma3_0__; ++k_0__) {
            yGamma3.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,3,"intercept_type",1), pstream__),ub(get_base1(intercept_type,3,"intercept_type",1), pstream__)));
        }
        vector_d z_yBeta1 = in__.vector_constrain(get_base1(yK,1,"yK",1));
        vector_d z_yBeta2 = in__.vector_constrain(get_base1(yK,2,"yK",1));
        vector_d z_yBeta3 = in__.vector_constrain(get_base1(yK,3,"yK",1));
        vector_d z_b = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? q : 0 ));
        vector_d z_T = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));
        vector_d rho = in__.vector_lub_constrain(0,1,(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));
        vector_d zeta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));
        vector_d tau = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? t : 0 ));
        vector_d bSd1 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));
        matrix_d z_bMat1 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ),(logical_gt(bK1,0) ? bN1 : 0 ));
        matrix_d bCholesky1 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        vector_d bSd2 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));
        matrix_d z_bMat2 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ),(logical_gt(bK2,0) ? bN2 : 0 ));
        matrix_d bCholesky2 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        vector<double> yAux1_unscaled;
        size_t dim_yAux1_unscaled_0__ = get_base1(has_aux,1,"has_aux",1);
        for (size_t k_0__ = 0; k_0__ < dim_yAux1_unscaled_0__; ++k_0__) {
            yAux1_unscaled.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yAux2_unscaled;
        size_t dim_yAux2_unscaled_0__ = get_base1(has_aux,2,"has_aux",1);
        for (size_t k_0__ = 0; k_0__ < dim_yAux2_unscaled_0__; ++k_0__) {
            yAux2_unscaled.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yAux3_unscaled;
        size_t dim_yAux3_unscaled_0__ = get_base1(has_aux,3,"has_aux",1);
        for (size_t k_0__ = 0; k_0__ < dim_yAux3_unscaled_0__; ++k_0__) {
            yAux3_unscaled.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yGlobal1;
        size_t dim_yGlobal1_0__ = yHs1;
        for (size_t k_0__ = 0; k_0__ < dim_yGlobal1_0__; ++k_0__) {
            yGlobal1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yGlobal2;
        size_t dim_yGlobal2_0__ = yHs2;
        for (size_t k_0__ = 0; k_0__ < dim_yGlobal2_0__; ++k_0__) {
            yGlobal2.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yGlobal3;
        size_t dim_yGlobal3_0__ = yHs3;
        for (size_t k_0__ = 0; k_0__ < dim_yGlobal3_0__; ++k_0__) {
            yGlobal3.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> yLocal1;
        size_t dim_yLocal1_0__ = yHs1;
        for (size_t k_0__ = 0; k_0__ < dim_yLocal1_0__; ++k_0__) {
            yLocal1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1)));
        }
        vector<vector_d> yLocal2;
        size_t dim_yLocal2_0__ = yHs2;
        for (size_t k_0__ = 0; k_0__ < dim_yLocal2_0__; ++k_0__) {
            yLocal2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1)));
        }
        vector<vector_d> yLocal3;
        size_t dim_yLocal3_0__ = yHs3;
        for (size_t k_0__ = 0; k_0__ < dim_yLocal3_0__; ++k_0__) {
            yLocal3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1)));
        }
        vector<double> y_caux1;
        size_t dim_y_caux1_0__ = logical_gt(yHs1,0);
        for (size_t k_0__ = 0; k_0__ < dim_y_caux1_0__; ++k_0__) {
            y_caux1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> y_caux2;
        size_t dim_y_caux2_0__ = logical_gt(yHs2,0);
        for (size_t k_0__ = 0; k_0__ < dim_y_caux2_0__; ++k_0__) {
            y_caux2.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> y_caux3;
        size_t dim_y_caux3_0__ = logical_gt(yHs3,0);
        for (size_t k_0__ = 0; k_0__ < dim_y_caux3_0__; ++k_0__) {
            y_caux3.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yOol1;
        size_t dim_yOol1_0__ = logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6);
        for (size_t k_0__ = 0; k_0__ < dim_yOol1_0__; ++k_0__) {
            yOol1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yOol2;
        size_t dim_yOol2_0__ = logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6);
        for (size_t k_0__ = 0; k_0__ < dim_yOol2_0__; ++k_0__) {
            yOol2.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yOol3;
        size_t dim_yOol3_0__ = logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6);
        for (size_t k_0__ = 0; k_0__ < dim_yOol3_0__; ++k_0__) {
            yOol3.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> yMix1;
        size_t dim_yMix1_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6)));
        for (size_t k_0__ = 0; k_0__ < dim_yMix1_0__; ++k_0__) {
            yMix1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1)));
        }
        vector<vector_d> yMix2;
        size_t dim_yMix2_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6)));
        for (size_t k_0__ = 0; k_0__ < dim_yMix2_0__; ++k_0__) {
            yMix2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1)));
        }
        vector<vector_d> yMix3;
        size_t dim_yMix3_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6)));
        for (size_t k_0__ = 0; k_0__ < dim_yMix3_0__; ++k_0__) {
            yMix3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1)));
        }
        vector_d e_z_beta01 = in__.vector_constrain(e_K01);
        vector<double> e_gamma01;
        size_t dim_e_gamma01_0__ = logical_eq(e_has_intercept01,1);
        for (size_t k_0__ = 0; k_0__ < dim_e_gamma01_0__; ++k_0__) {
            e_gamma01.push_back(in__.scalar_constrain());
        }
        vector_d e_aux_unscaled01 = in__.vector_lb_constrain(coefs_lb(basehaz_type01, pstream__),basehaz_nvars01);
        vector<double> e_global01;
        size_t dim_e_global01_0__ = e_hs01;
        for (size_t k_0__ = 0; k_0__ < dim_e_global01_0__; ++k_0__) {
            e_global01.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> e_local01;
        size_t dim_e_local01_0__ = e_hs01;
        for (size_t k_0__ = 0; k_0__ < dim_e_local01_0__; ++k_0__) {
            e_local01.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs01,0) * e_K01)));
        }
        vector<double> e_caux01;
        size_t dim_e_caux01_0__ = logical_gt(e_hs01,0);
        for (size_t k_0__ = 0; k_0__ < dim_e_caux01_0__; ++k_0__) {
            e_caux01.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> e_mix01;
        size_t dim_e_mix01_0__ = (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6)));
        for (size_t k_0__ = 0; k_0__ < dim_e_mix01_0__; ++k_0__) {
            e_mix01.push_back(in__.vector_lb_constrain(0,e_K01));
        }
        vector<double> e_ool01;
        size_t dim_e_ool01_0__ = logical_eq(e_prior_dist01,6);
        for (size_t k_0__ = 0; k_0__ < dim_e_ool01_0__; ++k_0__) {
            e_ool01.push_back(in__.scalar_lb_constrain(0));
        }
        vector_d e_z_beta02 = in__.vector_constrain(e_K02);
        vector<double> e_gamma02;
        size_t dim_e_gamma02_0__ = logical_eq(e_has_intercept02,1);
        for (size_t k_0__ = 0; k_0__ < dim_e_gamma02_0__; ++k_0__) {
            e_gamma02.push_back(in__.scalar_constrain());
        }
        vector_d e_aux_unscaled02 = in__.vector_lb_constrain(coefs_lb(basehaz_type02, pstream__),basehaz_nvars02);
        vector<double> e_global02;
        size_t dim_e_global02_0__ = e_hs02;
        for (size_t k_0__ = 0; k_0__ < dim_e_global02_0__; ++k_0__) {
            e_global02.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> e_local02;
        size_t dim_e_local02_0__ = e_hs02;
        for (size_t k_0__ = 0; k_0__ < dim_e_local02_0__; ++k_0__) {
            e_local02.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs02,0) * e_K02)));
        }
        vector<double> e_caux02;
        size_t dim_e_caux02_0__ = logical_gt(e_hs02,0);
        for (size_t k_0__ = 0; k_0__ < dim_e_caux02_0__; ++k_0__) {
            e_caux02.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> e_mix02;
        size_t dim_e_mix02_0__ = (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6)));
        for (size_t k_0__ = 0; k_0__ < dim_e_mix02_0__; ++k_0__) {
            e_mix02.push_back(in__.vector_lb_constrain(0,e_K02));
        }
        vector<double> e_ool02;
        size_t dim_e_ool02_0__ = logical_eq(e_prior_dist02,6);
        for (size_t k_0__ = 0; k_0__ < dim_e_ool02_0__; ++k_0__) {
            e_ool02.push_back(in__.scalar_lb_constrain(0));
        }
        vector_d e_z_beta12 = in__.vector_constrain(e_K12);
        vector<double> e_gamma12;
        size_t dim_e_gamma12_0__ = logical_eq(e_has_intercept12,1);
        for (size_t k_0__ = 0; k_0__ < dim_e_gamma12_0__; ++k_0__) {
            e_gamma12.push_back(in__.scalar_constrain());
        }
        vector_d e_aux_unscaled12 = in__.vector_lb_constrain(coefs_lb(basehaz_type12, pstream__),basehaz_nvars12);
        vector<double> e_global12;
        size_t dim_e_global12_0__ = e_hs12;
        for (size_t k_0__ = 0; k_0__ < dim_e_global12_0__; ++k_0__) {
            e_global12.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> e_local12;
        size_t dim_e_local12_0__ = e_hs12;
        for (size_t k_0__ = 0; k_0__ < dim_e_local12_0__; ++k_0__) {
            e_local12.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs12,0) * e_K12)));
        }
        vector<double> e_caux12;
        size_t dim_e_caux12_0__ = logical_gt(e_hs12,0);
        for (size_t k_0__ = 0; k_0__ < dim_e_caux12_0__; ++k_0__) {
            e_caux12.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> e_mix12;
        size_t dim_e_mix12_0__ = (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6)));
        for (size_t k_0__ = 0; k_0__ < dim_e_mix12_0__; ++k_0__) {
            e_mix12.push_back(in__.vector_lb_constrain(0,e_K12));
        }
        vector<double> e_ool12;
        size_t dim_e_ool12_0__ = logical_eq(e_prior_dist12,6);
        for (size_t k_0__ = 0; k_0__ < dim_e_ool12_0__; ++k_0__) {
            e_ool12.push_back(in__.scalar_lb_constrain(0));
        }
        vector_d a_z_beta01 = in__.vector_constrain(a_K01);
        vector<double> a_global01;
        size_t dim_a_global01_0__ = a_hs01;
        for (size_t k_0__ = 0; k_0__ < dim_a_global01_0__; ++k_0__) {
            a_global01.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> a_local01;
        size_t dim_a_local01_0__ = a_hs01;
        for (size_t k_0__ = 0; k_0__ < dim_a_local01_0__; ++k_0__) {
            a_local01.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs01,0) * a_K01)));
        }
        vector<double> a_caux01;
        size_t dim_a_caux01_0__ = logical_gt(a_hs01,0);
        for (size_t k_0__ = 0; k_0__ < dim_a_caux01_0__; ++k_0__) {
            a_caux01.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> a_mix01;
        size_t dim_a_mix01_0__ = (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6)));
        for (size_t k_0__ = 0; k_0__ < dim_a_mix01_0__; ++k_0__) {
            a_mix01.push_back(in__.vector_lb_constrain(0,a_K01));
        }
        vector<double> a_ool01;
        size_t dim_a_ool01_0__ = logical_eq(a_prior_dist01,6);
        for (size_t k_0__ = 0; k_0__ < dim_a_ool01_0__; ++k_0__) {
            a_ool01.push_back(in__.scalar_lb_constrain(0));
        }
        vector_d a_z_beta02 = in__.vector_constrain(a_K02);
        vector<double> a_global02;
        size_t dim_a_global02_0__ = a_hs02;
        for (size_t k_0__ = 0; k_0__ < dim_a_global02_0__; ++k_0__) {
            a_global02.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> a_local02;
        size_t dim_a_local02_0__ = a_hs02;
        for (size_t k_0__ = 0; k_0__ < dim_a_local02_0__; ++k_0__) {
            a_local02.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs02,0) * a_K02)));
        }
        vector<double> a_caux02;
        size_t dim_a_caux02_0__ = logical_gt(a_hs02,0);
        for (size_t k_0__ = 0; k_0__ < dim_a_caux02_0__; ++k_0__) {
            a_caux02.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> a_mix02;
        size_t dim_a_mix02_0__ = (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6)));
        for (size_t k_0__ = 0; k_0__ < dim_a_mix02_0__; ++k_0__) {
            a_mix02.push_back(in__.vector_lb_constrain(0,a_K02));
        }
        vector<double> a_ool02;
        size_t dim_a_ool02_0__ = logical_eq(a_prior_dist02,6);
        for (size_t k_0__ = 0; k_0__ < dim_a_ool02_0__; ++k_0__) {
            a_ool02.push_back(in__.scalar_lb_constrain(0));
        }
        vector_d a_z_beta12 = in__.vector_constrain(a_K12);
        vector<double> a_global12;
        size_t dim_a_global12_0__ = a_hs12;
        for (size_t k_0__ = 0; k_0__ < dim_a_global12_0__; ++k_0__) {
            a_global12.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> a_local12;
        size_t dim_a_local12_0__ = a_hs12;
        for (size_t k_0__ = 0; k_0__ < dim_a_local12_0__; ++k_0__) {
            a_local12.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs12,0) * a_K12)));
        }
        vector<double> a_caux12;
        size_t dim_a_caux12_0__ = logical_gt(a_hs12,0);
        for (size_t k_0__ = 0; k_0__ < dim_a_caux12_0__; ++k_0__) {
            a_caux12.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> a_mix12;
        size_t dim_a_mix12_0__ = (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6)));
        for (size_t k_0__ = 0; k_0__ < dim_a_mix12_0__; ++k_0__) {
            a_mix12.push_back(in__.vector_lb_constrain(0,a_K12));
        }
        vector<double> a_ool12;
        size_t dim_a_ool12_0__ = logical_eq(a_prior_dist12,6);
        for (size_t k_0__ = 0; k_0__ < dim_a_ool12_0__; ++k_0__) {
            a_ool12.push_back(in__.scalar_lb_constrain(0));
        }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yGamma1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yGamma2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yGamma3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,1,"yK",1); ++k_0__) {
            vars__.push_back(z_yBeta1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,2,"yK",1); ++k_0__) {
            vars__.push_back(z_yBeta2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,3,"yK",1); ++k_0__) {
            vars__.push_back(z_yBeta3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? q : 0 ); ++k_0__) {
            vars__.push_back(z_b[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ); ++k_0__) {
            vars__.push_back(z_T[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ); ++k_0__) {
            vars__.push_back(rho[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ); ++k_0__) {
            vars__.push_back(zeta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? t : 0 ); ++k_0__) {
            vars__.push_back(tau[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ); ++k_0__) {
            vars__.push_back(bSd1[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(bK1,0) ? bN1 : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ); ++k_0__) {
                vars__.push_back(z_bMat1(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++k_0__) {
                vars__.push_back(bCholesky1(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ); ++k_0__) {
            vars__.push_back(bSd2[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(bK2,0) ? bN2 : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ); ++k_0__) {
                vars__.push_back(z_bMat2(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++k_0__) {
                vars__.push_back(bCholesky2(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,1,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux1_unscaled[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,2,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux2_unscaled[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,3,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux3_unscaled[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < yHs1; ++k_0__) {
            vars__.push_back(yGlobal1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < yHs2; ++k_0__) {
            vars__.push_back(yGlobal2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < yHs3; ++k_0__) {
            vars__.push_back(yGlobal3[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,1,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < yHs1; ++k_0__) {
                vars__.push_back(yLocal1[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,2,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < yHs2; ++k_0__) {
                vars__.push_back(yLocal2[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,3,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < yHs3; ++k_0__) {
                vars__.push_back(yLocal3[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_gt(yHs1,0); ++k_0__) {
            vars__.push_back(y_caux1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(yHs2,0); ++k_0__) {
            vars__.push_back(y_caux2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(yHs3,0); ++k_0__) {
            vars__.push_back(y_caux3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++k_0__) {
            vars__.push_back(yOol1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++k_0__) {
            vars__.push_back(yOol2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++k_0__) {
            vars__.push_back(yOol3[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,1,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++k_0__) {
                vars__.push_back(yMix1[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,2,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++k_0__) {
                vars__.push_back(yMix2[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,3,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++k_0__) {
                vars__.push_back(yMix3[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < e_K01; ++k_0__) {
            vars__.push_back(e_z_beta01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(e_has_intercept01,1); ++k_0__) {
            vars__.push_back(e_gamma01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < basehaz_nvars01; ++k_0__) {
            vars__.push_back(e_aux_unscaled01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < e_hs01; ++k_0__) {
            vars__.push_back(e_global01[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(e_hs01,0) * e_K01); ++k_1__) {
                for (int k_0__ = 0; k_0__ < e_hs01; ++k_0__) {
                vars__.push_back(e_local01[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_gt(e_hs01,0); ++k_0__) {
            vars__.push_back(e_caux01[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < e_K01; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))); ++k_0__) {
                vars__.push_back(e_mix01[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_eq(e_prior_dist01,6); ++k_0__) {
            vars__.push_back(e_ool01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < e_K02; ++k_0__) {
            vars__.push_back(e_z_beta02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(e_has_intercept02,1); ++k_0__) {
            vars__.push_back(e_gamma02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < basehaz_nvars02; ++k_0__) {
            vars__.push_back(e_aux_unscaled02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < e_hs02; ++k_0__) {
            vars__.push_back(e_global02[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(e_hs02,0) * e_K02); ++k_1__) {
                for (int k_0__ = 0; k_0__ < e_hs02; ++k_0__) {
                vars__.push_back(e_local02[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_gt(e_hs02,0); ++k_0__) {
            vars__.push_back(e_caux02[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < e_K02; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))); ++k_0__) {
                vars__.push_back(e_mix02[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_eq(e_prior_dist02,6); ++k_0__) {
            vars__.push_back(e_ool02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < e_K12; ++k_0__) {
            vars__.push_back(e_z_beta12[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(e_has_intercept12,1); ++k_0__) {
            vars__.push_back(e_gamma12[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < basehaz_nvars12; ++k_0__) {
            vars__.push_back(e_aux_unscaled12[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < e_hs12; ++k_0__) {
            vars__.push_back(e_global12[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(e_hs12,0) * e_K12); ++k_1__) {
                for (int k_0__ = 0; k_0__ < e_hs12; ++k_0__) {
                vars__.push_back(e_local12[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_gt(e_hs12,0); ++k_0__) {
            vars__.push_back(e_caux12[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < e_K12; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))); ++k_0__) {
                vars__.push_back(e_mix12[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_eq(e_prior_dist12,6); ++k_0__) {
            vars__.push_back(e_ool12[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_K01; ++k_0__) {
            vars__.push_back(a_z_beta01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_hs01; ++k_0__) {
            vars__.push_back(a_global01[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(a_hs01,0) * a_K01); ++k_1__) {
                for (int k_0__ = 0; k_0__ < a_hs01; ++k_0__) {
                vars__.push_back(a_local01[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_gt(a_hs01,0); ++k_0__) {
            vars__.push_back(a_caux01[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < a_K01; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))); ++k_0__) {
                vars__.push_back(a_mix01[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_eq(a_prior_dist01,6); ++k_0__) {
            vars__.push_back(a_ool01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_K02; ++k_0__) {
            vars__.push_back(a_z_beta02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_hs02; ++k_0__) {
            vars__.push_back(a_global02[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(a_hs02,0) * a_K02); ++k_1__) {
                for (int k_0__ = 0; k_0__ < a_hs02; ++k_0__) {
                vars__.push_back(a_local02[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_gt(a_hs02,0); ++k_0__) {
            vars__.push_back(a_caux02[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < a_K02; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))); ++k_0__) {
                vars__.push_back(a_mix02[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_eq(a_prior_dist02,6); ++k_0__) {
            vars__.push_back(a_ool02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_K12; ++k_0__) {
            vars__.push_back(a_z_beta12[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_hs12; ++k_0__) {
            vars__.push_back(a_global12[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(a_hs12,0) * a_K12); ++k_1__) {
                for (int k_0__ = 0; k_0__ < a_hs12; ++k_0__) {
                vars__.push_back(a_local12[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_gt(a_hs12,0); ++k_0__) {
            vars__.push_back(a_caux12[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < a_K12; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))); ++k_0__) {
                vars__.push_back(a_mix12[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_eq(a_prior_dist12,6); ++k_0__) {
            vars__.push_back(a_ool12[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 2908;
            validate_non_negative_index("e_beta01", "e_K01", e_K01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_beta01(static_cast<Eigen::VectorXd::Index>(e_K01));
            (void) e_beta01;  // dummy to suppress unused var warning

            stan::math::initialize(e_beta01, DUMMY_VAR__);
            stan::math::fill(e_beta01,DUMMY_VAR__);
            current_statement_begin__ = 2909;
            validate_non_negative_index("e_beta02", "e_K02", e_K02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_beta02(static_cast<Eigen::VectorXd::Index>(e_K02));
            (void) e_beta02;  // dummy to suppress unused var warning

            stan::math::initialize(e_beta02, DUMMY_VAR__);
            stan::math::fill(e_beta02,DUMMY_VAR__);
            current_statement_begin__ = 2910;
            validate_non_negative_index("e_beta12", "e_K12", e_K12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_beta12(static_cast<Eigen::VectorXd::Index>(e_K12));
            (void) e_beta12;  // dummy to suppress unused var warning

            stan::math::initialize(e_beta12, DUMMY_VAR__);
            stan::math::fill(e_beta12,DUMMY_VAR__);
            current_statement_begin__ = 2912;
            validate_non_negative_index("a_beta01", "a_K01", a_K01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_beta01(static_cast<Eigen::VectorXd::Index>(a_K01));
            (void) a_beta01;  // dummy to suppress unused var warning

            stan::math::initialize(a_beta01, DUMMY_VAR__);
            stan::math::fill(a_beta01,DUMMY_VAR__);
            current_statement_begin__ = 2913;
            validate_non_negative_index("a_beta02", "a_K02", a_K02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_beta02(static_cast<Eigen::VectorXd::Index>(a_K02));
            (void) a_beta02;  // dummy to suppress unused var warning

            stan::math::initialize(a_beta02, DUMMY_VAR__);
            stan::math::fill(a_beta02,DUMMY_VAR__);
            current_statement_begin__ = 2914;
            validate_non_negative_index("a_beta12", "a_K12", a_K12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_beta12(static_cast<Eigen::VectorXd::Index>(a_K12));
            (void) a_beta12;  // dummy to suppress unused var warning

            stan::math::initialize(a_beta12, DUMMY_VAR__);
            stan::math::fill(a_beta12,DUMMY_VAR__);
            current_statement_begin__ = 2916;
            validate_non_negative_index("e_aux01", "basehaz_nvars01", basehaz_nvars01);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux01(static_cast<Eigen::VectorXd::Index>(basehaz_nvars01));
            (void) e_aux01;  // dummy to suppress unused var warning

            stan::math::initialize(e_aux01, DUMMY_VAR__);
            stan::math::fill(e_aux01,DUMMY_VAR__);
            current_statement_begin__ = 2917;
            validate_non_negative_index("e_aux02", "basehaz_nvars02", basehaz_nvars02);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux02(static_cast<Eigen::VectorXd::Index>(basehaz_nvars02));
            (void) e_aux02;  // dummy to suppress unused var warning

            stan::math::initialize(e_aux02, DUMMY_VAR__);
            stan::math::fill(e_aux02,DUMMY_VAR__);
            current_statement_begin__ = 2918;
            validate_non_negative_index("e_aux12", "basehaz_nvars12", basehaz_nvars12);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  e_aux12(static_cast<Eigen::VectorXd::Index>(basehaz_nvars12));
            (void) e_aux12;  // dummy to suppress unused var warning

            stan::math::initialize(e_aux12, DUMMY_VAR__);
            stan::math::fill(e_aux12,DUMMY_VAR__);
            current_statement_begin__ = 2925;
            validate_non_negative_index("yBeta1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta1(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            (void) yBeta1;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta1, DUMMY_VAR__);
            stan::math::fill(yBeta1,DUMMY_VAR__);
            current_statement_begin__ = 2926;
            validate_non_negative_index("yBeta2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta2(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            (void) yBeta2;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta2, DUMMY_VAR__);
            stan::math::fill(yBeta2,DUMMY_VAR__);
            current_statement_begin__ = 2927;
            validate_non_negative_index("yBeta3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta3(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            (void) yBeta3;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta3, DUMMY_VAR__);
            stan::math::fill(yBeta3,DUMMY_VAR__);
            current_statement_begin__ = 2928;
            validate_non_negative_index("yAux1", "get_base1(has_aux,1,\"has_aux\",1)", get_base1(has_aux,1,"has_aux",1));
            vector<local_scalar_t__> yAux1(get_base1(has_aux,1,"has_aux",1));
            stan::math::initialize(yAux1, DUMMY_VAR__);
            stan::math::fill(yAux1,DUMMY_VAR__);
            current_statement_begin__ = 2929;
            validate_non_negative_index("yAux2", "get_base1(has_aux,2,\"has_aux\",1)", get_base1(has_aux,2,"has_aux",1));
            vector<local_scalar_t__> yAux2(get_base1(has_aux,2,"has_aux",1));
            stan::math::initialize(yAux2, DUMMY_VAR__);
            stan::math::fill(yAux2,DUMMY_VAR__);
            current_statement_begin__ = 2930;
            validate_non_negative_index("yAux3", "get_base1(has_aux,3,\"has_aux\",1)", get_base1(has_aux,3,"has_aux",1));
            vector<local_scalar_t__> yAux3(get_base1(has_aux,3,"has_aux",1));
            stan::math::initialize(yAux3, DUMMY_VAR__);
            stan::math::fill(yAux3,DUMMY_VAR__);
            current_statement_begin__ = 2931;
            validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
            (void) theta_L;  // dummy to suppress unused var warning

            stan::math::initialize(theta_L, DUMMY_VAR__);
            stan::math::fill(theta_L,DUMMY_VAR__);
            current_statement_begin__ = 2932;
            local_scalar_t__ yAuxMaximum;
            (void) yAuxMaximum;  // dummy to suppress unused var warning

            stan::math::initialize(yAuxMaximum, DUMMY_VAR__);
            stan::math::fill(yAuxMaximum,DUMMY_VAR__);
            stan::math::assign(yAuxMaximum,1.0);
            current_statement_begin__ = 2935;
            validate_non_negative_index("bMat1", "(logical_gt(bK1,0) ? bN1 : 0 )", (logical_gt(bK1,0) ? bN1 : 0 ));
            validate_non_negative_index("bMat1", "bK1", bK1);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bMat1(static_cast<Eigen::VectorXd::Index>((logical_gt(bK1,0) ? bN1 : 0 )),static_cast<Eigen::VectorXd::Index>(bK1));
            (void) bMat1;  // dummy to suppress unused var warning

            stan::math::initialize(bMat1, DUMMY_VAR__);
            stan::math::fill(bMat1,DUMMY_VAR__);
            current_statement_begin__ = 2936;
            validate_non_negative_index("bMat2", "(logical_gt(bK2,0) ? bN2 : 0 )", (logical_gt(bK2,0) ? bN2 : 0 ));
            validate_non_negative_index("bMat2", "bK2", bK2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bMat2(static_cast<Eigen::VectorXd::Index>((logical_gt(bK2,0) ? bN2 : 0 )),static_cast<Eigen::VectorXd::Index>(bK2));
            (void) bMat2;  // dummy to suppress unused var warning

            stan::math::initialize(bMat2, DUMMY_VAR__);
            stan::math::fill(bMat2,DUMMY_VAR__);


            current_statement_begin__ = 2939;
            if (as_bool(logical_eq(get_base1(has_aux,1,"has_aux",1),1))) {

                current_statement_begin__ = 2940;
                stan::model::assign(yAux1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            make_aux(get_base1(yAux1_unscaled,1,"yAux1_unscaled",1),get_base1(y_prior_dist_for_aux,1,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,1,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,1,"y_prior_scale_for_aux",1), pstream__), 
                            "assigning variable yAux1");
                current_statement_begin__ = 2942;
                if (as_bool(logical_gt(get_base1(yAux1,1,"yAux1",1),yAuxMaximum))) {
                    current_statement_begin__ = 2943;
                    stan::math::assign(yAuxMaximum, get_base1(yAux1,1,"yAux1",1));
                }
            }
            current_statement_begin__ = 2946;
            if (as_bool(logical_gt(get_base1(yK,1,"yK",1),0))) {
                current_statement_begin__ = 2947;
                stan::math::assign(yBeta1, make_beta(z_yBeta1,get_base1(y_prior_dist,1,"y_prior_dist",1),y_prior_mean1,y_prior_scale1,y_prior_df1,get_base1(y_global_prior_scale,1,"y_global_prior_scale",1),yGlobal1,yLocal1,yOol1,yMix1,yAux1,get_base1(family,1,"family",1),get_base1(y_slab_scale,1,"y_slab_scale",1),y_caux1, pstream__));
            }
            current_statement_begin__ = 2951;
            if (as_bool(logical_gt(M,1))) {

                current_statement_begin__ = 2952;
                if (as_bool(logical_eq(get_base1(has_aux,2,"has_aux",1),1))) {

                    current_statement_begin__ = 2953;
                    stan::model::assign(yAux2, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                make_aux(get_base1(yAux2_unscaled,1,"yAux2_unscaled",1),get_base1(y_prior_dist_for_aux,2,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,2,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,2,"y_prior_scale_for_aux",1), pstream__), 
                                "assigning variable yAux2");
                    current_statement_begin__ = 2955;
                    if (as_bool(logical_gt(get_base1(yAux2,1,"yAux2",1),yAuxMaximum))) {
                        current_statement_begin__ = 2956;
                        stan::math::assign(yAuxMaximum, get_base1(yAux2,1,"yAux2",1));
                    }
                }
                current_statement_begin__ = 2958;
                if (as_bool(logical_gt(get_base1(yK,2,"yK",1),0))) {
                    current_statement_begin__ = 2959;
                    stan::math::assign(yBeta2, make_beta(z_yBeta2,get_base1(y_prior_dist,2,"y_prior_dist",1),y_prior_mean2,y_prior_scale2,y_prior_df2,get_base1(y_global_prior_scale,2,"y_global_prior_scale",1),yGlobal2,yLocal2,yOol2,yMix2,yAux2,get_base1(family,2,"family",1),get_base1(y_slab_scale,2,"y_slab_scale",1),y_caux2, pstream__));
                }
            }
            current_statement_begin__ = 2964;
            if (as_bool(logical_gt(M,2))) {

                current_statement_begin__ = 2965;
                if (as_bool(logical_eq(get_base1(has_aux,3,"has_aux",1),1))) {

                    current_statement_begin__ = 2966;
                    stan::model::assign(yAux3, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                make_aux(get_base1(yAux3_unscaled,1,"yAux3_unscaled",1),get_base1(y_prior_dist_for_aux,3,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,3,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,3,"y_prior_scale_for_aux",1), pstream__), 
                                "assigning variable yAux3");
                    current_statement_begin__ = 2968;
                    if (as_bool(logical_gt(get_base1(yAux3,1,"yAux3",1),yAuxMaximum))) {
                        current_statement_begin__ = 2969;
                        stan::math::assign(yAuxMaximum, get_base1(yAux3,1,"yAux3",1));
                    }
                }
                current_statement_begin__ = 2971;
                if (as_bool(logical_gt(get_base1(yK,3,"yK",1),0))) {
                    current_statement_begin__ = 2972;
                    stan::math::assign(yBeta3, make_beta(z_yBeta3,get_base1(y_prior_dist,3,"y_prior_dist",1),y_prior_mean3,y_prior_scale3,y_prior_df3,get_base1(y_global_prior_scale,3,"y_global_prior_scale",1),yGlobal3,yLocal3,yOol3,yMix3,yAux3,get_base1(family,3,"family",1),get_base1(y_slab_scale,3,"y_slab_scale",1),y_caux3, pstream__));
                }
            }
            current_statement_begin__ = 2979;
            if (as_bool(logical_eq(prior_dist_for_cov,1))) {
                {
                current_statement_begin__ = 2980;
                int mark(0);
                (void) mark;  // dummy to suppress unused var warning

                stan::math::fill(mark, std::numeric_limits<int>::min());
                stan::math::assign(mark,1);


                current_statement_begin__ = 2982;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,yAuxMaximum,tau,b_prior_scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 2985;
                if (as_bool(logical_gt(bK1,0))) {
                    current_statement_begin__ = 2986;
                    stan::math::assign(bMat1, make_b_matrix(z_b,theta_L,p,l,1, pstream__));
                }
                current_statement_begin__ = 2988;
                if (as_bool(logical_gt(bK2,0))) {
                    current_statement_begin__ = 2989;
                    stan::math::assign(bMat2, make_b_matrix(z_b,theta_L,p,l,2, pstream__));
                }
                }
            } else if (as_bool(logical_eq(prior_dist_for_cov,2))) {

                current_statement_begin__ = 2995;
                if (as_bool(logical_eq(bK1,1))) {
                    current_statement_begin__ = 2996;
                    stan::math::assign(bMat1, transpose(multiply(get_base1(bSd1,1,"bSd1",1),z_bMat1)));
                } else if (as_bool(logical_gt(bK1,1))) {
                    current_statement_begin__ = 2998;
                    stan::math::assign(bMat1, transpose(multiply(diag_pre_multiply(bSd1,bCholesky1),z_bMat1)));
                }
                current_statement_begin__ = 3000;
                if (as_bool(logical_eq(bK2,1))) {
                    current_statement_begin__ = 3001;
                    stan::math::assign(bMat2, transpose(multiply(get_base1(bSd2,1,"bSd2",1),z_bMat2)));
                } else if (as_bool(logical_gt(bK2,1))) {
                    current_statement_begin__ = 3003;
                    stan::math::assign(bMat2, transpose(multiply(diag_pre_multiply(bSd2,bCholesky2),z_bMat2)));
                }
            }
            current_statement_begin__ = 3014;
            stan::math::assign(e_beta01, make_beta(e_z_beta01,e_prior_dist01,e_prior_mean01,e_prior_scale01,e_prior_df01,e_global_prior_scale01,e_global01,e_local01,e_ool01,e_mix01,rep_array(1.0,0),0,e_slab_scale01,e_caux01, pstream__));
            current_statement_begin__ = 3018;
            stan::math::assign(e_beta02, make_beta(e_z_beta02,e_prior_dist02,e_prior_mean02,e_prior_scale02,e_prior_df02,e_global_prior_scale02,e_global02,e_local02,e_ool02,e_mix02,rep_array(1.0,0),0,e_slab_scale02,e_caux02, pstream__));
            current_statement_begin__ = 3023;
            stan::math::assign(e_beta12, make_beta(e_z_beta12,e_prior_dist12,e_prior_mean12,e_prior_scale12,e_prior_df12,e_global_prior_scale12,e_global12,e_local12,e_ool12,e_mix12,rep_array(1.0,0),0,e_slab_scale12,e_caux12, pstream__));
            current_statement_begin__ = 3029;
            stan::math::assign(a_beta01, make_beta(a_z_beta01,a_prior_dist01,a_prior_mean01,a_prior_scale01,a_prior_df01,a_global_prior_scale01,a_global01,a_local01,a_ool01,a_mix01,rep_array(1.0,0),0,a_slab_scale01,a_caux01, pstream__));
            current_statement_begin__ = 3033;
            stan::math::assign(a_beta02, make_beta(a_z_beta02,a_prior_dist02,a_prior_mean02,a_prior_scale02,a_prior_df02,a_global_prior_scale02,a_global02,a_local02,a_ool02,a_mix02,rep_array(1.0,0),0,a_slab_scale02,a_caux02, pstream__));
            current_statement_begin__ = 3037;
            stan::math::assign(a_beta12, make_beta(a_z_beta12,a_prior_dist12,a_prior_mean12,a_prior_scale12,a_prior_df12,a_global_prior_scale12,a_global12,a_local12,a_ool12,a_mix12,rep_array(1.0,0),0,a_slab_scale12,a_caux12, pstream__));
            current_statement_begin__ = 3042;
            stan::math::assign(e_aux01, make_basehaz_coef(e_aux_unscaled01,e_prior_dist_for_aux01,e_prior_mean_for_aux01,e_prior_scale_for_aux01, pstream__));
            current_statement_begin__ = 3044;
            stan::math::assign(e_aux02, make_basehaz_coef(e_aux_unscaled02,e_prior_dist_for_aux02,e_prior_mean_for_aux02,e_prior_scale_for_aux02, pstream__));
            current_statement_begin__ = 3046;
            stan::math::assign(e_aux12, make_basehaz_coef(e_aux_unscaled12,e_prior_dist_for_aux12,e_prior_mean_for_aux12,e_prior_scale_for_aux12, pstream__));

            // validate transformed parameters
            current_statement_begin__ = 2908;
            current_statement_begin__ = 2909;
            current_statement_begin__ = 2910;
            current_statement_begin__ = 2912;
            current_statement_begin__ = 2913;
            current_statement_begin__ = 2914;
            current_statement_begin__ = 2916;
            current_statement_begin__ = 2917;
            current_statement_begin__ = 2918;
            current_statement_begin__ = 2925;
            current_statement_begin__ = 2926;
            current_statement_begin__ = 2927;
            current_statement_begin__ = 2928;
            current_statement_begin__ = 2929;
            current_statement_begin__ = 2930;
            current_statement_begin__ = 2931;
            current_statement_begin__ = 2932;
            current_statement_begin__ = 2935;
            current_statement_begin__ = 2936;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < e_K01; ++k_0__) {
            vars__.push_back(e_beta01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < e_K02; ++k_0__) {
            vars__.push_back(e_beta02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < e_K12; ++k_0__) {
            vars__.push_back(e_beta12[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_K01; ++k_0__) {
            vars__.push_back(a_beta01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_K02; ++k_0__) {
            vars__.push_back(a_beta02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < a_K12; ++k_0__) {
            vars__.push_back(a_beta12[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < basehaz_nvars01; ++k_0__) {
            vars__.push_back(e_aux01[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < basehaz_nvars02; ++k_0__) {
            vars__.push_back(e_aux02[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < basehaz_nvars12; ++k_0__) {
            vars__.push_back(e_aux12[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,1,"yK",1); ++k_0__) {
            vars__.push_back(yBeta1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,2,"yK",1); ++k_0__) {
            vars__.push_back(yBeta2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,3,"yK",1); ++k_0__) {
            vars__.push_back(yBeta3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,1,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,2,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,3,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_theta_L; ++k_0__) {
            vars__.push_back(theta_L[k_0__]);
            }
        vars__.push_back(yAuxMaximum);
            for (int k_1__ = 0; k_1__ < bK1; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (logical_gt(bK1,0) ? bN1 : 0 ); ++k_0__) {
                vars__.push_back(bMat1(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < bK2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (logical_gt(bK2,0) ? bN2 : 0 ); ++k_0__) {
                vars__.push_back(bMat2(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 5219;
            local_scalar_t__ e_alpha01;
            (void) e_alpha01;  // dummy to suppress unused var warning

            stan::math::initialize(e_alpha01, DUMMY_VAR__);
            stan::math::fill(e_alpha01,DUMMY_VAR__);
            current_statement_begin__ = 5220;
            local_scalar_t__ e_alpha02;
            (void) e_alpha02;  // dummy to suppress unused var warning

            stan::math::initialize(e_alpha02, DUMMY_VAR__);
            stan::math::fill(e_alpha02,DUMMY_VAR__);
            current_statement_begin__ = 5221;
            local_scalar_t__ e_alpha12;
            (void) e_alpha12;  // dummy to suppress unused var warning

            stan::math::initialize(e_alpha12, DUMMY_VAR__);
            stan::math::fill(e_alpha12,DUMMY_VAR__);
            current_statement_begin__ = 5227;
            validate_non_negative_index("mean_PPD", "M", M);
            vector<local_scalar_t__> mean_PPD(M);
            stan::math::initialize(mean_PPD, DUMMY_VAR__);
            stan::math::fill(mean_PPD,DUMMY_VAR__);
            current_statement_begin__ = 5228;
            validate_non_negative_index("yAlpha1", "logical_gt(get_base1(intercept_type,1,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
            vector<local_scalar_t__> yAlpha1(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
            stan::math::initialize(yAlpha1, DUMMY_VAR__);
            stan::math::fill(yAlpha1,DUMMY_VAR__);
            current_statement_begin__ = 5229;
            validate_non_negative_index("yAlpha2", "logical_gt(get_base1(intercept_type,2,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
            vector<local_scalar_t__> yAlpha2(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
            stan::math::initialize(yAlpha2, DUMMY_VAR__);
            stan::math::fill(yAlpha2,DUMMY_VAR__);
            current_statement_begin__ = 5230;
            validate_non_negative_index("yAlpha3", "logical_gt(get_base1(intercept_type,3,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
            vector<local_scalar_t__> yAlpha3(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
            stan::math::initialize(yAlpha3, DUMMY_VAR__);
            stan::math::fill(yAlpha3,DUMMY_VAR__);
            current_statement_begin__ = 5231;
            validate_non_negative_index("bCov1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bCov1(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 )));
            (void) bCov1;  // dummy to suppress unused var warning

            stan::math::initialize(bCov1, DUMMY_VAR__);
            stan::math::fill(bCov1,DUMMY_VAR__);
            current_statement_begin__ = 5232;
            validate_non_negative_index("bCov2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bCov2(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 )));
            (void) bCov2;  // dummy to suppress unused var warning

            stan::math::initialize(bCov2, DUMMY_VAR__);
            stan::math::fill(bCov2,DUMMY_VAR__);
            current_statement_begin__ = 5233;
            validate_non_negative_index("b1", "(bN1 * bK1)", (bN1 * bK1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b1(static_cast<Eigen::VectorXd::Index>((bN1 * bK1)));
            (void) b1;  // dummy to suppress unused var warning

            stan::math::initialize(b1, DUMMY_VAR__);
            stan::math::fill(b1,DUMMY_VAR__);
            stan::math::assign(b1,to_vector(transpose(bMat1)));
            current_statement_begin__ = 5234;
            validate_non_negative_index("b2", "(bN2 * bK2)", (bN2 * bK2));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b2(static_cast<Eigen::VectorXd::Index>((bN2 * bK2)));
            (void) b2;  // dummy to suppress unused var warning

            stan::math::initialize(b2, DUMMY_VAR__);
            stan::math::fill(b2,DUMMY_VAR__);
            stan::math::assign(b2,to_vector(transpose(bMat2)));


            {
            current_statement_begin__ = 5238;
            int bMat1_colshift(0);
            (void) bMat1_colshift;  // dummy to suppress unused var warning

            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
            stan::math::assign(bMat1_colshift,0);
            current_statement_begin__ = 5239;
            int bMat2_colshift(0);
            (void) bMat2_colshift;  // dummy to suppress unused var warning

            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
            stan::math::assign(bMat2_colshift,0);


            current_statement_begin__ = 5242;
            if (as_bool(logical_gt(M,0))) {
                {
                current_statement_begin__ = 5243;
                validate_non_negative_index("yEta1", "get_base1(yNeta,1,\"yNeta\",1)", get_base1(yNeta,1,"yNeta",1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta1(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,1,"yNeta",1)));
                (void) yEta1;  // dummy to suppress unused var warning

                stan::math::initialize(yEta1, DUMMY_VAR__);
                stan::math::fill(yEta1,DUMMY_VAR__);
                stan::math::assign(yEta1,evaluate_mu(evaluate_eta(yX1,y1_Z1,y1_Z2,y1_Z1_id,y1_Z2_id,yGamma1,yBeta1,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,1,"intercept_type",1), pstream__),get_base1(family,1,"family",1),get_base1(link,1,"link",1), pstream__));


                current_statement_begin__ = 5247;
                stan::model::assign(mean_PPD, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            mean_PPD_rng(yEta1,yAux1,get_base1(family,1,"family",1), base_rng__, pstream__), 
                            "assigning variable mean_PPD");
                }
            }
            current_statement_begin__ = 5251;
            if (as_bool(logical_gt(M,1))) {
                {
                current_statement_begin__ = 5252;
                validate_non_negative_index("yEta2", "get_base1(yNeta,2,\"yNeta\",1)", get_base1(yNeta,2,"yNeta",1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta2(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,2,"yNeta",1)));
                (void) yEta2;  // dummy to suppress unused var warning

                stan::math::initialize(yEta2, DUMMY_VAR__);
                stan::math::fill(yEta2,DUMMY_VAR__);


                current_statement_begin__ = 5253;
                stan::math::assign(bMat1_colshift, (bMat1_colshift + get_base1(bK1_len,1,"bK1_len",1)));
                current_statement_begin__ = 5254;
                stan::math::assign(bMat2_colshift, (bMat2_colshift + get_base1(bK2_len,1,"bK2_len",1)));
                current_statement_begin__ = 5255;
                stan::math::assign(yEta2, evaluate_mu(evaluate_eta(yX2,y2_Z1,y2_Z2,y2_Z1_id,y2_Z2_id,yGamma2,yBeta2,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,2,"intercept_type",1), pstream__),get_base1(family,2,"family",1),get_base1(link,2,"link",1), pstream__));
                current_statement_begin__ = 5258;
                stan::model::assign(mean_PPD, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            mean_PPD_rng(yEta2,yAux2,get_base1(family,2,"family",1), base_rng__, pstream__), 
                            "assigning variable mean_PPD");
                }
            }
            current_statement_begin__ = 5262;
            if (as_bool(logical_gt(M,2))) {
                {
                current_statement_begin__ = 5263;
                validate_non_negative_index("yEta3", "get_base1(yNeta,3,\"yNeta\",1)", get_base1(yNeta,3,"yNeta",1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta3(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,3,"yNeta",1)));
                (void) yEta3;  // dummy to suppress unused var warning

                stan::math::initialize(yEta3, DUMMY_VAR__);
                stan::math::fill(yEta3,DUMMY_VAR__);


                current_statement_begin__ = 5264;
                stan::math::assign(bMat1_colshift, (bMat1_colshift + get_base1(bK1_len,2,"bK1_len",1)));
                current_statement_begin__ = 5265;
                stan::math::assign(bMat2_colshift, (bMat2_colshift + get_base1(bK2_len,2,"bK2_len",1)));
                current_statement_begin__ = 5266;
                stan::math::assign(yEta3, evaluate_mu(evaluate_eta(yX3,y3_Z1,y3_Z2,y3_Z1_id,y3_Z2_id,yGamma3,yBeta3,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,3,"intercept_type",1), pstream__),get_base1(family,3,"family",1),get_base1(link,3,"link",1), pstream__));
                current_statement_begin__ = 5269;
                stan::model::assign(mean_PPD, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                            mean_PPD_rng(yEta3,yAux3,get_base1(family,3,"family",1), base_rng__, pstream__), 
                            "assigning variable mean_PPD");
                }
            }
            }
            current_statement_begin__ = 5274;
            if (as_bool(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0))) {
                current_statement_begin__ = 5275;
                stan::model::assign(yAlpha1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(yGamma1,1,"yGamma1",1) - dot_product(yXbar1,yBeta1)), 
                            "assigning variable yAlpha1");
            }
            current_statement_begin__ = 5276;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0))))) {
                current_statement_begin__ = 5277;
                stan::model::assign(yAlpha2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(yGamma2,1,"yGamma2",1) - dot_product(yXbar2,yBeta2)), 
                            "assigning variable yAlpha2");
            }
            current_statement_begin__ = 5278;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0))))) {
                current_statement_begin__ = 5279;
                stan::model::assign(yAlpha3, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(yGamma3,1,"yGamma3",1) - dot_product(yXbar3,yBeta3)), 
                            "assigning variable yAlpha3");
            }
            current_statement_begin__ = 5284;
            if (as_bool((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_eq(bK1,1))))) {

                current_statement_begin__ = 5285;
                stan::model::assign(bCov1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(bSd1,1,"bSd1",1) * get_base1(bSd1,1,"bSd1",1)), 
                            "assigning variable bCov1");
            } else if (as_bool((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))))) {

                current_statement_begin__ = 5288;
                stan::math::assign(bCov1, stan::model::rvalue(to_vector(quad_form_diag(multiply_lower_tri_self_transpose(bCholesky1),bSd1)), stan::model::cons_list(stan::model::index_multi(bCov1_idx), stan::model::nil_index_list()), "to_vector(quad_form_diag(multiply_lower_tri_self_transpose(bCholesky1),bSd1))"));
            }
            current_statement_begin__ = 5293;
            if (as_bool((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_eq(bK2,1))))) {

                current_statement_begin__ = 5294;
                stan::model::assign(bCov2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(bSd2,1,"bSd2",1) * get_base1(bSd2,1,"bSd2",1)), 
                            "assigning variable bCov2");
            } else if (as_bool((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))))) {

                current_statement_begin__ = 5297;
                stan::math::assign(bCov2, stan::model::rvalue(to_vector(quad_form_diag(multiply_lower_tri_self_transpose(bCholesky2),bSd2)), stan::model::cons_list(stan::model::index_multi(bCov2_idx), stan::model::nil_index_list()), "to_vector(quad_form_diag(multiply_lower_tri_self_transpose(bCholesky2),bSd2))"));
            }
            current_statement_begin__ = 5306;
            if (as_bool(logical_eq(e_has_intercept01,1))) {
                current_statement_begin__ = 5307;
                stan::math::assign(e_alpha01, (((get_base1(e_gamma01,1,"e_gamma01",1) + norm_const01) - dot_product(e_xbar01,e_beta01)) - dot_product(a_xbar01,a_beta01)));
            } else {
                current_statement_begin__ = 5310;
                stan::math::assign(e_alpha01, ((norm_const01 - dot_product(e_xbar01,e_beta01)) - dot_product(a_xbar01,a_beta01)));
            }
            current_statement_begin__ = 5314;
            if (as_bool(logical_eq(e_has_intercept02,1))) {
                current_statement_begin__ = 5315;
                stan::math::assign(e_alpha02, (((get_base1(e_gamma02,1,"e_gamma02",1) + norm_const02) - dot_product(e_xbar02,e_beta02)) - dot_product(a_xbar02,a_beta02)));
            } else {
                current_statement_begin__ = 5318;
                stan::math::assign(e_alpha02, ((norm_const02 - dot_product(e_xbar02,e_beta02)) - dot_product(a_xbar02,a_beta02)));
            }
            current_statement_begin__ = 5322;
            if (as_bool(logical_eq(e_has_intercept12,1))) {
                current_statement_begin__ = 5323;
                stan::math::assign(e_alpha12, (((get_base1(e_gamma12,1,"e_gamma12",1) + norm_const12) - dot_product(e_xbar12,e_beta12)) - dot_product(a_xbar12,a_beta12)));
            } else {
                current_statement_begin__ = 5326;
                stan::math::assign(e_alpha12, ((norm_const12 - dot_product(e_xbar12,e_beta12)) - dot_product(a_xbar12,a_beta12)));
            }

            // validate generated quantities
            current_statement_begin__ = 5219;
            current_statement_begin__ = 5220;
            current_statement_begin__ = 5221;
            current_statement_begin__ = 5227;
            current_statement_begin__ = 5228;
            current_statement_begin__ = 5229;
            current_statement_begin__ = 5230;
            current_statement_begin__ = 5231;
            current_statement_begin__ = 5232;
            current_statement_begin__ = 5233;
            current_statement_begin__ = 5234;

            // write generated quantities
        vars__.push_back(e_alpha01);
        vars__.push_back(e_alpha02);
        vars__.push_back(e_alpha12);
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(mean_PPD[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yAlpha1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yAlpha2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yAlpha3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ); ++k_0__) {
            vars__.push_back(bCov1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ); ++k_0__) {
            vars__.push_back(bCov2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (bN1 * bK1); ++k_0__) {
            vars__.push_back(b1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (bN2 * bK2); ++k_0__) {
            vars__.push_back(b2[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_msjm";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,1,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,2,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,3,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? q : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? t : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bSd1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(bK1,0) ? bN1 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_bMat1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "bCholesky1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bSd2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(bK2,0) ? bN2 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_bMat2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "bCholesky2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,1,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux1_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,2,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux2_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,3,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux3_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,1,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs1; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,2,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,3,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs1,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs2,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs3,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,1,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,2,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,3,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= e_K01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_z_beta01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_has_intercept01,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_gamma01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_nvars01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_aux_unscaled01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_hs01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_global01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(e_hs01,0) * e_K01); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= e_hs01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_local01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(e_hs01,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_caux01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= e_K01; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_mix01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_prior_dist01,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_ool01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_K02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_z_beta02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_has_intercept02,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_gamma02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_nvars02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_aux_unscaled02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_hs02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_global02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(e_hs02,0) * e_K02); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= e_hs02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_local02" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(e_hs02,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_caux02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= e_K02; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_mix02" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_prior_dist02,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_ool02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_K12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_z_beta12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_has_intercept12,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_gamma12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_nvars12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_aux_unscaled12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_hs12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_global12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(e_hs12,0) * e_K12); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= e_hs12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_local12" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(e_hs12,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_caux12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= e_K12; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_mix12" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_prior_dist12,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_ool12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_K01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_z_beta01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_hs01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_global01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(a_hs01,0) * a_K01); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= a_hs01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_local01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(a_hs01,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_caux01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= a_K01; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_mix01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(a_prior_dist01,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_ool01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_K02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_z_beta02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_hs02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_global02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(a_hs02,0) * a_K02); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= a_hs02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_local02" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(a_hs02,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_caux02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= a_K02; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_mix02" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(a_prior_dist02,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_ool02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_K12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_z_beta12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_hs12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_global12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(a_hs12,0) * a_K12); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= a_hs12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_local12" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(a_hs12,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_caux12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= a_K12; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_mix12" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(a_prior_dist12,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_ool12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= e_K01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_beta01" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= e_K02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_beta02" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= e_K12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_beta12" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= a_K01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_beta01" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= a_K02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_beta02" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= a_K12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_beta12" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= basehaz_nvars01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_aux01" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= basehaz_nvars02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_aux02" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= basehaz_nvars12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_aux12" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,1,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta1" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,2,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta2" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,3,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta3" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,1,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux1" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,2,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux2" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,3,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux3" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_L" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAuxMaximum";
            param_names__.push_back(param_name_stream__.str());
            for (int k_1__ = 1; k_1__ <= bK1; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (logical_gt(bK1,0) ? bN1 : 0 ); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bMat1" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= bK2; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (logical_gt(bK2,0) ? bN2 : 0 ); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bMat2" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "e_alpha01";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "e_alpha02";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "e_alpha12";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_PPD" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCov1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCov2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (bN1 * bK1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (bN2 * bK2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,1,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,2,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,3,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? q : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? t : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bSd1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(bK1,0) ? bN1 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_bMat1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ) * (((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ) - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCholesky1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bSd2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(bK2,0) ? bN2 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_bMat2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ) * (((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ) - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCholesky2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,1,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux1_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,2,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux2_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,3,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux3_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,1,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs1; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,2,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,3,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs1,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs2,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs3,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,1,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,2,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,3,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= e_K01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_z_beta01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_has_intercept01,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_gamma01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_nvars01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_aux_unscaled01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_hs01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_global01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(e_hs01,0) * e_K01); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= e_hs01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_local01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(e_hs01,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_caux01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= e_K01; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(e_prior_dist01,5)) || primitive_value(logical_eq(e_prior_dist01,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_mix01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_prior_dist01,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_ool01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_K02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_z_beta02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_has_intercept02,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_gamma02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_nvars02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_aux_unscaled02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_hs02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_global02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(e_hs02,0) * e_K02); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= e_hs02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_local02" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(e_hs02,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_caux02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= e_K02; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(e_prior_dist02,5)) || primitive_value(logical_eq(e_prior_dist02,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_mix02" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_prior_dist02,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_ool02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_K12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_z_beta12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_has_intercept12,1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_gamma12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_nvars12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_aux_unscaled12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_hs12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_global12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(e_hs12,0) * e_K12); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= e_hs12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_local12" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(e_hs12,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_caux12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= e_K12; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(e_prior_dist12,5)) || primitive_value(logical_eq(e_prior_dist12,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_mix12" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(e_prior_dist12,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_ool12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_K01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_z_beta01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_hs01; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_global01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(a_hs01,0) * a_K01); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= a_hs01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_local01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(a_hs01,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_caux01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= a_K01; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(a_prior_dist01,5)) || primitive_value(logical_eq(a_prior_dist01,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_mix01" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(a_prior_dist01,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_ool01" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_K02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_z_beta02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_hs02; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_global02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(a_hs02,0) * a_K02); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= a_hs02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_local02" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(a_hs02,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_caux02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= a_K02; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(a_prior_dist02,5)) || primitive_value(logical_eq(a_prior_dist02,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_mix02" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(a_prior_dist02,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_ool02" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_K12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_z_beta12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_hs12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_global12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(a_hs12,0) * a_K12); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= a_hs12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_local12" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(a_hs12,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_caux12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= a_K12; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(a_prior_dist12,5)) || primitive_value(logical_eq(a_prior_dist12,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_mix12" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(a_prior_dist12,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_ool12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= e_K01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_beta01" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= e_K02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_beta02" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= e_K12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_beta12" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= a_K01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_beta01" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= a_K02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_beta02" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= a_K12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_beta12" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= basehaz_nvars01; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_aux01" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= basehaz_nvars02; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_aux02" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= basehaz_nvars12; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_aux12" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,1,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta1" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,2,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta2" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,3,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta3" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,1,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux1" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,2,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux2" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,3,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux3" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_L" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAuxMaximum";
            param_names__.push_back(param_name_stream__.str());
            for (int k_1__ = 1; k_1__ <= bK1; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (logical_gt(bK1,0) ? bN1 : 0 ); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bMat1" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= bK2; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (logical_gt(bK2,0) ? bN2 : 0 ); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bMat2" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "e_alpha01";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "e_alpha02";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "e_alpha12";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_PPD" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCov1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCov2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (bN1 * bK1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (bN2 * bK2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_msjm_namespace::model_msjm stan_model;


#endif
