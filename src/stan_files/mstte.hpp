/*
    mstte is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mstte is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mstte.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_mstte_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mstte");
    reader.add_event(724, 722, "end", "model_mstte");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
exponential_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 10;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct exponential_log_haz_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta, std::ostream* pstream__) const {
        return exponential_log_haz(eta, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
weibull_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                    const T2__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 22;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 23;
        stan::math::assign(res, add(add(stan::math::log(shape),multiply((shape - 1),stan::math::log(t))),eta));
        current_statement_begin__ = 24;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weibull_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                    const T2__& shape, std::ostream* pstream__) const {
        return weibull_log_haz(eta, t, shape, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
gompertz_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                     const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 36;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 37;
        stan::math::assign(res, add(multiply(scale,t),eta));
        current_statement_begin__ = 38;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gompertz_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                     const T2__& scale, std::ostream* pstream__) const {
        return gompertz_log_haz(eta, t, scale, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
bspline_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 50;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 51;
        stan::math::assign(res, add(multiply(basis,coefs),eta));
        current_statement_begin__ = 52;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct bspline_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) const {
        return bspline_log_haz(eta, basis, coefs, pstream__);
    }
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
quadrature_log_surv(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 66;
        local_scalar_t__ res;
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 67;
        stan::math::assign(res, -(dot_product(qwts,stan::math::exp(log_hazard))));
        current_statement_begin__ = 68;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct quadrature_log_surv_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard, std::ostream* pstream__) const {
        return quadrature_log_surv(qwts, log_hazard, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
quadrature_log_cdf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                       const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard,
                       const int& qnodes,
                       const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 72;
        int M(0);
        (void) M;  // dummy to suppress unused var warning

        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,rows(log_hazard));
        current_statement_begin__ = 73;
        validate_non_negative_index("hazard", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hazard(static_cast<Eigen::VectorXd::Index>(M));
        (void) hazard;  // dummy to suppress unused var warning

        stan::math::initialize(hazard, DUMMY_VAR__);
        stan::math::fill(hazard,DUMMY_VAR__);
        stan::math::assign(hazard,stan::math::exp(log_hazard));
        current_statement_begin__ = 74;
        validate_non_negative_index("qwts_mat", "N", N);
        validate_non_negative_index("qwts_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  qwts_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) qwts_mat;  // dummy to suppress unused var warning

        stan::math::initialize(qwts_mat, DUMMY_VAR__);
        stan::math::fill(qwts_mat,DUMMY_VAR__);
        stan::math::assign(qwts_mat,to_matrix(qwts,N,qnodes));
        current_statement_begin__ = 75;
        validate_non_negative_index("haz_mat", "N", N);
        validate_non_negative_index("haz_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  haz_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) haz_mat;  // dummy to suppress unused var warning

        stan::math::initialize(haz_mat, DUMMY_VAR__);
        stan::math::fill(haz_mat,DUMMY_VAR__);
        stan::math::assign(haz_mat,to_matrix(hazard,N,qnodes));
        current_statement_begin__ = 76;
        validate_non_negative_index("chaz", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chaz(static_cast<Eigen::VectorXd::Index>(N));
        (void) chaz;  // dummy to suppress unused var warning

        stan::math::initialize(chaz, DUMMY_VAR__);
        stan::math::fill(chaz,DUMMY_VAR__);
        stan::math::assign(chaz,rows_dot_product(qwts_mat,haz_mat));
        current_statement_begin__ = 77;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 78;
        stan::math::assign(res, stan::math::log(subtract(1,stan::math::exp(minus(chaz)))));
        current_statement_begin__ = 79;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct quadrature_log_cdf_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts,
                       const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard,
                       const int& qnodes,
                       const int& N, std::ostream* pstream__) const {
        return quadrature_log_cdf(qwts, log_hazard, qnodes, N, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
quadrature_log_cdf2(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts_lower,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard_lower,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,1>& qwts_upper,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,1>& log_hazard_upper,
                        const int& qnodes,
                        const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 85;
        int M(0);
        (void) M;  // dummy to suppress unused var warning

        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,rows(log_hazard_lower));
        current_statement_begin__ = 86;
        validate_non_negative_index("hazard_lower", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hazard_lower(static_cast<Eigen::VectorXd::Index>(M));
        (void) hazard_lower;  // dummy to suppress unused var warning

        stan::math::initialize(hazard_lower, DUMMY_VAR__);
        stan::math::fill(hazard_lower,DUMMY_VAR__);
        stan::math::assign(hazard_lower,stan::math::exp(log_hazard_lower));
        current_statement_begin__ = 87;
        validate_non_negative_index("hazard_upper", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hazard_upper(static_cast<Eigen::VectorXd::Index>(M));
        (void) hazard_upper;  // dummy to suppress unused var warning

        stan::math::initialize(hazard_upper, DUMMY_VAR__);
        stan::math::fill(hazard_upper,DUMMY_VAR__);
        stan::math::assign(hazard_upper,stan::math::exp(log_hazard_upper));
        current_statement_begin__ = 88;
        validate_non_negative_index("qwts_lower_mat", "N", N);
        validate_non_negative_index("qwts_lower_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  qwts_lower_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) qwts_lower_mat;  // dummy to suppress unused var warning

        stan::math::initialize(qwts_lower_mat, DUMMY_VAR__);
        stan::math::fill(qwts_lower_mat,DUMMY_VAR__);
        stan::math::assign(qwts_lower_mat,to_matrix(qwts_lower,N,qnodes));
        current_statement_begin__ = 89;
        validate_non_negative_index("qwts_upper_mat", "N", N);
        validate_non_negative_index("qwts_upper_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  qwts_upper_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) qwts_upper_mat;  // dummy to suppress unused var warning

        stan::math::initialize(qwts_upper_mat, DUMMY_VAR__);
        stan::math::fill(qwts_upper_mat,DUMMY_VAR__);
        stan::math::assign(qwts_upper_mat,to_matrix(qwts_upper,N,qnodes));
        current_statement_begin__ = 90;
        validate_non_negative_index("haz_lower_mat", "N", N);
        validate_non_negative_index("haz_lower_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  haz_lower_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) haz_lower_mat;  // dummy to suppress unused var warning

        stan::math::initialize(haz_lower_mat, DUMMY_VAR__);
        stan::math::fill(haz_lower_mat,DUMMY_VAR__);
        stan::math::assign(haz_lower_mat,to_matrix(hazard_lower,N,qnodes));
        current_statement_begin__ = 91;
        validate_non_negative_index("haz_upper_mat", "N", N);
        validate_non_negative_index("haz_upper_mat", "qnodes", qnodes);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  haz_upper_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(qnodes));
        (void) haz_upper_mat;  // dummy to suppress unused var warning

        stan::math::initialize(haz_upper_mat, DUMMY_VAR__);
        stan::math::fill(haz_upper_mat,DUMMY_VAR__);
        stan::math::assign(haz_upper_mat,to_matrix(hazard_upper,N,qnodes));
        current_statement_begin__ = 92;
        validate_non_negative_index("chaz_lower", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chaz_lower(static_cast<Eigen::VectorXd::Index>(N));
        (void) chaz_lower;  // dummy to suppress unused var warning

        stan::math::initialize(chaz_lower, DUMMY_VAR__);
        stan::math::fill(chaz_lower,DUMMY_VAR__);
        stan::math::assign(chaz_lower,rows_dot_product(qwts_lower_mat,haz_lower_mat));
        current_statement_begin__ = 93;
        validate_non_negative_index("chaz_upper", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chaz_upper(static_cast<Eigen::VectorXd::Index>(N));
        (void) chaz_upper;  // dummy to suppress unused var warning

        stan::math::initialize(chaz_upper, DUMMY_VAR__);
        stan::math::fill(chaz_upper,DUMMY_VAR__);
        stan::math::assign(chaz_upper,rows_dot_product(qwts_upper_mat,haz_upper_mat));
        current_statement_begin__ = 94;
        validate_non_negative_index("surv_lower", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_lower(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_lower;  // dummy to suppress unused var warning

        stan::math::initialize(surv_lower, DUMMY_VAR__);
        stan::math::fill(surv_lower,DUMMY_VAR__);
        stan::math::assign(surv_lower,stan::math::exp(minus(chaz_lower)));
        current_statement_begin__ = 95;
        validate_non_negative_index("surv_upper", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_upper(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_upper;  // dummy to suppress unused var warning

        stan::math::initialize(surv_upper, DUMMY_VAR__);
        stan::math::fill(surv_upper,DUMMY_VAR__);
        stan::math::assign(surv_upper,stan::math::exp(minus(chaz_upper)));
        current_statement_begin__ = 96;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 97;
        stan::math::assign(res, stan::math::log(subtract(surv_lower,surv_upper)));
        current_statement_begin__ = 98;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct quadrature_log_cdf2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& qwts_lower,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& log_hazard_lower,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,1>& qwts_upper,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,1>& log_hazard_upper,
                        const int& qnodes,
                        const int& N, std::ostream* pstream__) const {
        return quadrature_log_cdf2(qwts_lower, log_hazard_lower, qwts_upper, log_hazard_upper, qnodes, N, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
mspline_log_haz(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 111;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 112;
        stan::math::assign(res, add(stan::math::log(multiply(basis,coefs)),eta));
        current_statement_begin__ = 113;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mspline_log_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& basis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) const {
        return mspline_log_haz(eta, basis, coefs, pstream__);
    }
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
CFt(const T0__& z,
        const T1__& df, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 127;
        local_scalar_t__ z2;
        (void) z2;  // dummy to suppress unused var warning

        stan::math::initialize(z2, DUMMY_VAR__);
        stan::math::fill(z2,DUMMY_VAR__);
        stan::math::assign(z2,square(z));
        current_statement_begin__ = 128;
        local_scalar_t__ z3;
        (void) z3;  // dummy to suppress unused var warning

        stan::math::initialize(z3, DUMMY_VAR__);
        stan::math::fill(z3,DUMMY_VAR__);
        stan::math::assign(z3,(z2 * z));
        current_statement_begin__ = 129;
        local_scalar_t__ z5;
        (void) z5;  // dummy to suppress unused var warning

        stan::math::initialize(z5, DUMMY_VAR__);
        stan::math::fill(z5,DUMMY_VAR__);
        stan::math::assign(z5,(z2 * z3));
        current_statement_begin__ = 130;
        local_scalar_t__ z7;
        (void) z7;  // dummy to suppress unused var warning

        stan::math::initialize(z7, DUMMY_VAR__);
        stan::math::fill(z7,DUMMY_VAR__);
        stan::math::assign(z7,(z2 * z5));
        current_statement_begin__ = 131;
        local_scalar_t__ z9;
        (void) z9;  // dummy to suppress unused var warning

        stan::math::initialize(z9, DUMMY_VAR__);
        stan::math::fill(z9,DUMMY_VAR__);
        stan::math::assign(z9,(z2 * z7));
        current_statement_begin__ = 132;
        local_scalar_t__ df2;
        (void) df2;  // dummy to suppress unused var warning

        stan::math::initialize(df2, DUMMY_VAR__);
        stan::math::fill(df2,DUMMY_VAR__);
        stan::math::assign(df2,square(df));
        current_statement_begin__ = 133;
        local_scalar_t__ df3;
        (void) df3;  // dummy to suppress unused var warning

        stan::math::initialize(df3, DUMMY_VAR__);
        stan::math::fill(df3,DUMMY_VAR__);
        stan::math::assign(df3,(df2 * df));
        current_statement_begin__ = 134;
        local_scalar_t__ df4;
        (void) df4;  // dummy to suppress unused var warning

        stan::math::initialize(df4, DUMMY_VAR__);
        stan::math::fill(df4,DUMMY_VAR__);
        stan::math::assign(df4,(df2 * df2));


        current_statement_begin__ = 135;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((z + ((z3 + z) / (4 * df))) + ((((5 * z5) + (16 * z3)) + (3 * z)) / (96 * df2))) + (((((3 * z7) + (19 * z5)) + (17 * z3)) - (15 * z)) / (384 * df3))) + ((((((79 * z9) + (776 * z7)) + (1482 * z5)) - (1920 * z3)) - (945 * z)) / (92160 * df4))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CFt_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& z,
        const T1__& df, std::ostream* pstream__) const {
        return CFt(z, df, pstream__);
    }
};

double
coefs_lb(const int& type, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 147;
        local_scalar_t__ lb;
        (void) lb;  // dummy to suppress unused var warning

        stan::math::initialize(lb, DUMMY_VAR__);
        stan::math::fill(lb,DUMMY_VAR__);


        current_statement_begin__ = 148;
        if (as_bool(logical_eq(type,2))) {
            current_statement_begin__ = 149;
            stan::math::assign(lb, stan::math::negative_infinity());
        } else if (as_bool(logical_eq(type,3))) {
            current_statement_begin__ = 151;
            stan::math::assign(lb, stan::math::negative_infinity());
        } else {
            current_statement_begin__ = 153;
            stan::math::assign(lb, 0);
        }
        current_statement_begin__ = 154;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lb);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct coefs_lb_functor__ {
            double
    operator()(const int& type, std::ostream* pstream__) const {
        return coefs_lb(type, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__>::type, Eigen::Dynamic,1>
make_beta(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
              const int& prior_dist,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_mean,
              const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_scale,
              const Eigen::Matrix<T4__, Eigen::Dynamic,1>& prior_df, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 167;
        validate_non_negative_index("beta", "rows(z_beta)", rows(z_beta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(rows(z_beta)));
        (void) beta;  // dummy to suppress unused var warning

        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta,DUMMY_VAR__);


        current_statement_begin__ = 168;
        if (as_bool(logical_eq(prior_dist,0))) {
            current_statement_begin__ = 168;
            stan::math::assign(beta, z_beta);
        } else if (as_bool(logical_eq(prior_dist,1))) {
            current_statement_begin__ = 169;
            stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
        } else if (as_bool(logical_eq(prior_dist,2))) {
            current_statement_begin__ = 170;
            for (int k = 1; k <= rows(prior_mean); ++k) {

                current_statement_begin__ = 171;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            ((CFt(get_base1(z_beta,k,"z_beta",1),get_base1(prior_df,k,"prior_df",1), pstream__) * get_base1(prior_scale,k,"prior_scale",1)) + get_base1(prior_mean,k,"prior_mean",1)), 
                            "assigning variable beta");
            }
        }
        current_statement_begin__ = 173;
        return stan::math::promote_scalar<fun_return_scalar_t__>(beta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_beta_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
              const int& prior_dist,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_mean,
              const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_scale,
              const Eigen::Matrix<T4__, Eigen::Dynamic,1>& prior_df, std::ostream* pstream__) const {
        return make_beta(z_beta, prior_dist, prior_mean, prior_scale, prior_df, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T2__, T3__, T_lp__>::type
beta_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
            const int& prior_dist,
            const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_scale,
            const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 193;
        if (as_bool(logical_eq(prior_dist,1))) {
            current_statement_begin__ = 193;
            lp_accum__.add(normal_log(z_beta,0,1));
        } else if (as_bool(logical_eq(prior_dist,2))) {
            current_statement_begin__ = 194;
            lp_accum__.add(normal_log(z_beta,0,1));
        }
        current_statement_begin__ = 196;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct beta_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T2__, T3__, T_lp__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
            const int& prior_dist,
            const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_scale,
            const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return beta_lp(z_beta, prior_dist, prior_scale, prior_df, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T2__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T2__, T_lp__>::type
basehaz_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& aux_unscaled,
               const int& dist,
               const Eigen::Matrix<T2__, Eigen::Dynamic,1>& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 209;
        if (as_bool(logical_gt(dist,0))) {

            current_statement_begin__ = 210;
            if (as_bool(logical_eq(dist,1))) {
                current_statement_begin__ = 211;
                lp_accum__.add(normal_log(aux_unscaled,0,1));
            } else if (as_bool(logical_eq(dist,2))) {
                current_statement_begin__ = 213;
                lp_accum__.add(student_t_log(aux_unscaled,df,0,1));
            } else {
                current_statement_begin__ = 215;
                lp_accum__.add(exponential_log(aux_unscaled,1));
            }
        }
        current_statement_begin__ = 217;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct basehaz_lp_functor__ {
    template <typename T0__, typename T2__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T2__, T_lp__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& aux_unscaled,
               const int& dist,
               const Eigen::Matrix<T2__, Eigen::Dynamic,1>& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return basehaz_lp(aux_unscaled, dist, df, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type
gamma_lp(const T0__& gamma,
             const int& dist,
             const T2__& mean,
             const T3__& scale,
             const T4__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 231;
        if (as_bool(logical_eq(dist,1))) {
            current_statement_begin__ = 232;
            lp_accum__.add(normal_log(gamma,mean,scale));
        } else if (as_bool(logical_eq(dist,2))) {
            current_statement_begin__ = 234;
            lp_accum__.add(student_t_log(gamma,df,mean,scale));
        }
        current_statement_begin__ = 236;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gamma_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type
    operator()(const T0__& gamma,
             const int& dist,
             const T2__& mean,
             const T3__& scale,
             const T4__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return gamma_lp(gamma, dist, mean, scale, df, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
pow_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x,
            const T1__& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 247;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(x));
        current_statement_begin__ = 248;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 249;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 250;
            stan::model::assign(res, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        pow(get_base1(x,n,"x",1),y), 
                        "assigning variable res");
        }
        current_statement_begin__ = 251;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pow_vec_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x,
            const T1__& y, std::ostream* pstream__) const {
        return pow_vec(x, y, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
exponential_log_surv(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 262;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 263;
        stan::math::assign(res, elt_multiply(minus(t),stan::math::exp(eta)));
        current_statement_begin__ = 264;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct exponential_log_surv_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t, std::ostream* pstream__) const {
        return exponential_log_surv(eta, t, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
exponential_log_cdf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 268;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 269;
        stan::math::assign(res, stan::math::log(subtract(1,stan::math::exp(elt_multiply(minus(t),stan::math::exp(eta))))));
        current_statement_begin__ = 270;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct exponential_log_cdf_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t, std::ostream* pstream__) const {
        return exponential_log_cdf(eta, t, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
exponential_log_cdf2(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t_lower,
                         const Eigen::Matrix<T2__, Eigen::Dynamic,1>& t_upper, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 274;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 275;
        validate_non_negative_index("exp_eta", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  exp_eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) exp_eta;  // dummy to suppress unused var warning

        stan::math::initialize(exp_eta, DUMMY_VAR__);
        stan::math::fill(exp_eta,DUMMY_VAR__);
        stan::math::assign(exp_eta,stan::math::exp(eta));
        current_statement_begin__ = 276;
        validate_non_negative_index("surv_lower", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_lower(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_lower;  // dummy to suppress unused var warning

        stan::math::initialize(surv_lower, DUMMY_VAR__);
        stan::math::fill(surv_lower,DUMMY_VAR__);
        stan::math::assign(surv_lower,stan::math::exp(elt_multiply(minus(t_lower),exp_eta)));
        current_statement_begin__ = 277;
        validate_non_negative_index("surv_upper", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_upper(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_upper;  // dummy to suppress unused var warning

        stan::math::initialize(surv_upper, DUMMY_VAR__);
        stan::math::fill(surv_upper,DUMMY_VAR__);
        stan::math::assign(surv_upper,stan::math::exp(elt_multiply(minus(t_upper),exp_eta)));
        current_statement_begin__ = 278;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 279;
        stan::math::assign(res, stan::math::log(subtract(surv_lower,surv_upper)));
        current_statement_begin__ = 280;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct exponential_log_cdf2_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t_lower,
                         const Eigen::Matrix<T2__, Eigen::Dynamic,1>& t_upper, std::ostream* pstream__) const {
        return exponential_log_cdf2(eta, t_lower, t_upper, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
weibull_log_surv(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                     const T2__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 292;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 293;
        stan::math::assign(res, elt_multiply(minus(pow_vec(t,shape, pstream__)),stan::math::exp(eta)));
        current_statement_begin__ = 294;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weibull_log_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                     const T2__& shape, std::ostream* pstream__) const {
        return weibull_log_surv(eta, t, shape, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
weibull_log_cdf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                    const T2__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 298;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 299;
        stan::math::assign(res, stan::math::log(subtract(1,stan::math::exp(elt_multiply(minus(pow_vec(t,shape, pstream__)),stan::math::exp(eta))))));
        current_statement_begin__ = 300;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weibull_log_cdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                    const T2__& shape, std::ostream* pstream__) const {
        return weibull_log_cdf(eta, t, shape, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
weibull_log_cdf2(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t_lower,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& t_upper,
                     const T3__& shape, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 304;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 305;
        validate_non_negative_index("exp_eta", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  exp_eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) exp_eta;  // dummy to suppress unused var warning

        stan::math::initialize(exp_eta, DUMMY_VAR__);
        stan::math::fill(exp_eta,DUMMY_VAR__);
        stan::math::assign(exp_eta,stan::math::exp(eta));
        current_statement_begin__ = 306;
        validate_non_negative_index("surv_lower", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_lower(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_lower;  // dummy to suppress unused var warning

        stan::math::initialize(surv_lower, DUMMY_VAR__);
        stan::math::fill(surv_lower,DUMMY_VAR__);
        stan::math::assign(surv_lower,stan::math::exp(elt_multiply(minus(pow_vec(t_lower,shape, pstream__)),exp_eta)));
        current_statement_begin__ = 307;
        validate_non_negative_index("surv_upper", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_upper(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_upper;  // dummy to suppress unused var warning

        stan::math::initialize(surv_upper, DUMMY_VAR__);
        stan::math::fill(surv_upper,DUMMY_VAR__);
        stan::math::assign(surv_upper,stan::math::exp(elt_multiply(minus(pow_vec(t_upper,shape, pstream__)),exp_eta)));
        current_statement_begin__ = 308;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 309;
        stan::math::assign(res, stan::math::log(subtract(surv_lower,surv_upper)));
        current_statement_begin__ = 310;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weibull_log_cdf2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t_lower,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& t_upper,
                     const T3__& shape, std::ostream* pstream__) const {
        return weibull_log_cdf2(eta, t_lower, t_upper, shape, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
gompertz_log_surv(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                      const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 322;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 323;
        stan::math::assign(res, elt_multiply(multiply(inv(scale),minus(subtract(stan::math::exp(multiply(scale,t)),1))),stan::math::exp(eta)));
        current_statement_begin__ = 324;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gompertz_log_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                      const T2__& scale, std::ostream* pstream__) const {
        return gompertz_log_surv(eta, t, scale, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
gompertz_log_cdf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                     const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 328;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 329;
        stan::math::assign(res, stan::math::log(subtract(1,stan::math::exp(elt_multiply(multiply(inv(scale),minus(subtract(stan::math::exp(multiply(scale,t)),1))),stan::math::exp(eta))))));
        current_statement_begin__ = 330;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gompertz_log_cdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t,
                     const T2__& scale, std::ostream* pstream__) const {
        return gompertz_log_cdf(eta, t, scale, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
gompertz_log_cdf2(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t_lower,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,1>& t_upper,
                      const T3__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 334;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 335;
        local_scalar_t__ inv_scale;
        (void) inv_scale;  // dummy to suppress unused var warning

        stan::math::initialize(inv_scale, DUMMY_VAR__);
        stan::math::fill(inv_scale,DUMMY_VAR__);
        stan::math::assign(inv_scale,inv(scale));
        current_statement_begin__ = 336;
        validate_non_negative_index("exp_eta", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  exp_eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) exp_eta;  // dummy to suppress unused var warning

        stan::math::initialize(exp_eta, DUMMY_VAR__);
        stan::math::fill(exp_eta,DUMMY_VAR__);
        stan::math::assign(exp_eta,stan::math::exp(eta));
        current_statement_begin__ = 337;
        validate_non_negative_index("surv_lower", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_lower(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_lower;  // dummy to suppress unused var warning

        stan::math::initialize(surv_lower, DUMMY_VAR__);
        stan::math::fill(surv_lower,DUMMY_VAR__);
        stan::math::assign(surv_lower,stan::math::exp(elt_multiply(multiply(inv_scale,minus(subtract(stan::math::exp(multiply(scale,t_lower)),1))),exp_eta)));
        current_statement_begin__ = 338;
        validate_non_negative_index("surv_upper", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_upper(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_upper;  // dummy to suppress unused var warning

        stan::math::initialize(surv_upper, DUMMY_VAR__);
        stan::math::fill(surv_upper,DUMMY_VAR__);
        stan::math::assign(surv_upper,stan::math::exp(elt_multiply(multiply(inv_scale,minus(subtract(stan::math::exp(multiply(scale,t_upper)),1))),exp_eta)));
        current_statement_begin__ = 339;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 340;
        stan::math::assign(res, stan::math::log(subtract(surv_lower,surv_upper)));
        current_statement_begin__ = 341;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gompertz_log_cdf2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& t_lower,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,1>& t_upper,
                      const T3__& scale, std::ostream* pstream__) const {
        return gompertz_log_cdf2(eta, t_lower, t_upper, scale, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
mspline_log_surv(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& ibasis,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 353;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 354;
        stan::math::assign(res, elt_multiply(minus(multiply(ibasis,coefs)),stan::math::exp(eta)));
        current_statement_begin__ = 355;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mspline_log_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& ibasis,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) const {
        return mspline_log_surv(eta, ibasis, coefs, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
mspline_log_cdf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& ibasis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 359;
        validate_non_negative_index("res", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 360;
        stan::math::assign(res, stan::math::log(subtract(1,stan::math::exp(elt_multiply(minus(multiply(ibasis,coefs)),stan::math::exp(eta))))));
        current_statement_begin__ = 361;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mspline_log_cdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& ibasis,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) const {
        return mspline_log_cdf(eta, ibasis, coefs, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
mspline_log_cdf2(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& ibasis_lower,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& ibasis_upper,
                     const Eigen::Matrix<T3__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 365;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 366;
        validate_non_negative_index("exp_eta", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  exp_eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) exp_eta;  // dummy to suppress unused var warning

        stan::math::initialize(exp_eta, DUMMY_VAR__);
        stan::math::fill(exp_eta,DUMMY_VAR__);
        stan::math::assign(exp_eta,stan::math::exp(eta));
        current_statement_begin__ = 367;
        validate_non_negative_index("surv_lower", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_lower(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_lower;  // dummy to suppress unused var warning

        stan::math::initialize(surv_lower, DUMMY_VAR__);
        stan::math::fill(surv_lower,DUMMY_VAR__);
        stan::math::assign(surv_lower,stan::math::exp(elt_multiply(minus(multiply(ibasis_lower,coefs)),exp_eta)));
        current_statement_begin__ = 368;
        validate_non_negative_index("surv_upper", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  surv_upper(static_cast<Eigen::VectorXd::Index>(N));
        (void) surv_upper;  // dummy to suppress unused var warning

        stan::math::initialize(surv_upper, DUMMY_VAR__);
        stan::math::fill(surv_upper,DUMMY_VAR__);
        stan::math::assign(surv_upper,stan::math::exp(elt_multiply(minus(multiply(ibasis_upper,coefs)),exp_eta)));
        current_statement_begin__ = 369;
        validate_non_negative_index("res", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  res(static_cast<Eigen::VectorXd::Index>(N));
        (void) res;  // dummy to suppress unused var warning

        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res,DUMMY_VAR__);


        current_statement_begin__ = 370;
        stan::math::assign(res, stan::math::log(subtract(surv_lower,surv_upper)));
        current_statement_begin__ = 371;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mspline_log_cdf2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& ibasis_lower,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& ibasis_upper,
                     const Eigen::Matrix<T3__, Eigen::Dynamic,1>& coefs, std::ostream* pstream__) const {
        return mspline_log_cdf2(eta, ibasis_lower, ibasis_upper, coefs, pstream__);
    }
};

#include <meta_header.hpp>
 class model_mstte : public prob_grad {
private:
    int nt;
    vector<int> s_K;
    int nK;
    vector<int> s_vars;
    int Nvars;
    vector<int> s_event;
    vector<int> s_rcens;
    int Nevent;
    int Nrcens;
    vector_d log_crude_event_rate;
    vector_d x_bar;
    vector_d t_event;
    vector_d t_rcens;
    int Nxevent;
    int Nxrcens;
    vector_d x_event;
    vector_d x_rcens;
    int Nbasis_event;
    int Nibasis_event;
    int Nibasis_rcens;
    vector_d basis_event;
    vector_d ibasis_event;
    vector_d ibasis_rcens;
    vector<int> type;
    vector<int> has_intercept;
    int N_has_intercept;
    int prior_PD;
    vector<int> prior_dist;
    vector<int> prior_dist_for_intercept;
    vector<int> prior_dist_for_aux;
    vector_d prior_mean;
    vector_d prior_scale;
    vector_d prior_df;
    vector<double> global_prior_scale;
    vector<double> global_prior_df;
    vector<double> slab_scale;
    vector<double> slab_df;
    vector<double> prior_mean_for_intercept;
    vector<double> prior_scale_for_intercept;
    vector<double> prior_df_for_intercept;
    vector_d prior_scale_for_aux;
    vector_d prior_df_for_aux;
public:
    model_mstte(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_mstte(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_mstte_namespace::model_mstte";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 377;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            current_statement_begin__ = 378;
            validate_non_negative_index("s_K", "nt", nt);
            context__.validate_dims("data initialization", "s_K", "int", context__.to_vec(nt));
            validate_non_negative_index("s_K", "nt", nt);
            s_K = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("s_K");
            pos__ = 0;
            size_t s_K_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < s_K_limit_0__; ++i_0__) {
                s_K[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 379;
            context__.validate_dims("data initialization", "nK", "int", context__.to_vec());
            nK = int(0);
            vals_i__ = context__.vals_i("nK");
            pos__ = 0;
            nK = vals_i__[pos__++];
            current_statement_begin__ = 380;
            validate_non_negative_index("s_vars", "nt", nt);
            context__.validate_dims("data initialization", "s_vars", "int", context__.to_vec(nt));
            validate_non_negative_index("s_vars", "nt", nt);
            s_vars = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("s_vars");
            pos__ = 0;
            size_t s_vars_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < s_vars_limit_0__; ++i_0__) {
                s_vars[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 381;
            context__.validate_dims("data initialization", "Nvars", "int", context__.to_vec());
            Nvars = int(0);
            vals_i__ = context__.vals_i("Nvars");
            pos__ = 0;
            Nvars = vals_i__[pos__++];
            current_statement_begin__ = 382;
            validate_non_negative_index("s_event", "nt", nt);
            context__.validate_dims("data initialization", "s_event", "int", context__.to_vec(nt));
            validate_non_negative_index("s_event", "nt", nt);
            s_event = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("s_event");
            pos__ = 0;
            size_t s_event_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < s_event_limit_0__; ++i_0__) {
                s_event[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 383;
            validate_non_negative_index("s_rcens", "nt", nt);
            context__.validate_dims("data initialization", "s_rcens", "int", context__.to_vec(nt));
            validate_non_negative_index("s_rcens", "nt", nt);
            s_rcens = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("s_rcens");
            pos__ = 0;
            size_t s_rcens_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < s_rcens_limit_0__; ++i_0__) {
                s_rcens[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 384;
            context__.validate_dims("data initialization", "Nevent", "int", context__.to_vec());
            Nevent = int(0);
            vals_i__ = context__.vals_i("Nevent");
            pos__ = 0;
            Nevent = vals_i__[pos__++];
            current_statement_begin__ = 385;
            context__.validate_dims("data initialization", "Nrcens", "int", context__.to_vec());
            Nrcens = int(0);
            vals_i__ = context__.vals_i("Nrcens");
            pos__ = 0;
            Nrcens = vals_i__[pos__++];
            current_statement_begin__ = 388;
            validate_non_negative_index("log_crude_event_rate", "nt", nt);
            context__.validate_dims("data initialization", "log_crude_event_rate", "vector_d", context__.to_vec(nt));
            validate_non_negative_index("log_crude_event_rate", "nt", nt);
            log_crude_event_rate = vector_d(static_cast<Eigen::VectorXd::Index>(nt));
            vals_r__ = context__.vals_r("log_crude_event_rate");
            pos__ = 0;
            size_t log_crude_event_rate_i_vec_lim__ = nt;
            for (size_t i_vec__ = 0; i_vec__ < log_crude_event_rate_i_vec_lim__; ++i_vec__) {
                log_crude_event_rate[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 391;
            validate_non_negative_index("x_bar", "nK", nK);
            context__.validate_dims("data initialization", "x_bar", "vector_d", context__.to_vec(nK));
            validate_non_negative_index("x_bar", "nK", nK);
            x_bar = vector_d(static_cast<Eigen::VectorXd::Index>(nK));
            vals_r__ = context__.vals_r("x_bar");
            pos__ = 0;
            size_t x_bar_i_vec_lim__ = nK;
            for (size_t i_vec__ = 0; i_vec__ < x_bar_i_vec_lim__; ++i_vec__) {
                x_bar[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 393;
            validate_non_negative_index("t_event", "Nevent", Nevent);
            context__.validate_dims("data initialization", "t_event", "vector_d", context__.to_vec(Nevent));
            validate_non_negative_index("t_event", "Nevent", Nevent);
            t_event = vector_d(static_cast<Eigen::VectorXd::Index>(Nevent));
            vals_r__ = context__.vals_r("t_event");
            pos__ = 0;
            size_t t_event_i_vec_lim__ = Nevent;
            for (size_t i_vec__ = 0; i_vec__ < t_event_i_vec_lim__; ++i_vec__) {
                t_event[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 394;
            validate_non_negative_index("t_rcens", "Nrcens", Nrcens);
            context__.validate_dims("data initialization", "t_rcens", "vector_d", context__.to_vec(Nrcens));
            validate_non_negative_index("t_rcens", "Nrcens", Nrcens);
            t_rcens = vector_d(static_cast<Eigen::VectorXd::Index>(Nrcens));
            vals_r__ = context__.vals_r("t_rcens");
            pos__ = 0;
            size_t t_rcens_i_vec_lim__ = Nrcens;
            for (size_t i_vec__ = 0; i_vec__ < t_rcens_i_vec_lim__; ++i_vec__) {
                t_rcens[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 396;
            context__.validate_dims("data initialization", "Nxevent", "int", context__.to_vec());
            Nxevent = int(0);
            vals_i__ = context__.vals_i("Nxevent");
            pos__ = 0;
            Nxevent = vals_i__[pos__++];
            current_statement_begin__ = 397;
            context__.validate_dims("data initialization", "Nxrcens", "int", context__.to_vec());
            Nxrcens = int(0);
            vals_i__ = context__.vals_i("Nxrcens");
            pos__ = 0;
            Nxrcens = vals_i__[pos__++];
            current_statement_begin__ = 398;
            validate_non_negative_index("x_event", "Nxevent", Nxevent);
            context__.validate_dims("data initialization", "x_event", "vector_d", context__.to_vec(Nxevent));
            validate_non_negative_index("x_event", "Nxevent", Nxevent);
            x_event = vector_d(static_cast<Eigen::VectorXd::Index>(Nxevent));
            vals_r__ = context__.vals_r("x_event");
            pos__ = 0;
            size_t x_event_i_vec_lim__ = Nxevent;
            for (size_t i_vec__ = 0; i_vec__ < x_event_i_vec_lim__; ++i_vec__) {
                x_event[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 399;
            validate_non_negative_index("x_rcens", "Nxrcens", Nxrcens);
            context__.validate_dims("data initialization", "x_rcens", "vector_d", context__.to_vec(Nxrcens));
            validate_non_negative_index("x_rcens", "Nxrcens", Nxrcens);
            x_rcens = vector_d(static_cast<Eigen::VectorXd::Index>(Nxrcens));
            vals_r__ = context__.vals_r("x_rcens");
            pos__ = 0;
            size_t x_rcens_i_vec_lim__ = Nxrcens;
            for (size_t i_vec__ = 0; i_vec__ < x_rcens_i_vec_lim__; ++i_vec__) {
                x_rcens[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 402;
            context__.validate_dims("data initialization", "Nbasis_event", "int", context__.to_vec());
            Nbasis_event = int(0);
            vals_i__ = context__.vals_i("Nbasis_event");
            pos__ = 0;
            Nbasis_event = vals_i__[pos__++];
            current_statement_begin__ = 403;
            context__.validate_dims("data initialization", "Nibasis_event", "int", context__.to_vec());
            Nibasis_event = int(0);
            vals_i__ = context__.vals_i("Nibasis_event");
            pos__ = 0;
            Nibasis_event = vals_i__[pos__++];
            current_statement_begin__ = 404;
            context__.validate_dims("data initialization", "Nibasis_rcens", "int", context__.to_vec());
            Nibasis_rcens = int(0);
            vals_i__ = context__.vals_i("Nibasis_rcens");
            pos__ = 0;
            Nibasis_rcens = vals_i__[pos__++];
            current_statement_begin__ = 406;
            validate_non_negative_index("basis_event", "Nbasis_event", Nbasis_event);
            context__.validate_dims("data initialization", "basis_event", "vector_d", context__.to_vec(Nbasis_event));
            validate_non_negative_index("basis_event", "Nbasis_event", Nbasis_event);
            basis_event = vector_d(static_cast<Eigen::VectorXd::Index>(Nbasis_event));
            vals_r__ = context__.vals_r("basis_event");
            pos__ = 0;
            size_t basis_event_i_vec_lim__ = Nbasis_event;
            for (size_t i_vec__ = 0; i_vec__ < basis_event_i_vec_lim__; ++i_vec__) {
                basis_event[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 407;
            validate_non_negative_index("ibasis_event", "Nibasis_event", Nibasis_event);
            context__.validate_dims("data initialization", "ibasis_event", "vector_d", context__.to_vec(Nibasis_event));
            validate_non_negative_index("ibasis_event", "Nibasis_event", Nibasis_event);
            ibasis_event = vector_d(static_cast<Eigen::VectorXd::Index>(Nibasis_event));
            vals_r__ = context__.vals_r("ibasis_event");
            pos__ = 0;
            size_t ibasis_event_i_vec_lim__ = Nibasis_event;
            for (size_t i_vec__ = 0; i_vec__ < ibasis_event_i_vec_lim__; ++i_vec__) {
                ibasis_event[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 408;
            validate_non_negative_index("ibasis_rcens", "Nibasis_rcens", Nibasis_rcens);
            context__.validate_dims("data initialization", "ibasis_rcens", "vector_d", context__.to_vec(Nibasis_rcens));
            validate_non_negative_index("ibasis_rcens", "Nibasis_rcens", Nibasis_rcens);
            ibasis_rcens = vector_d(static_cast<Eigen::VectorXd::Index>(Nibasis_rcens));
            vals_r__ = context__.vals_r("ibasis_rcens");
            pos__ = 0;
            size_t ibasis_rcens_i_vec_lim__ = Nibasis_rcens;
            for (size_t i_vec__ = 0; i_vec__ < ibasis_rcens_i_vec_lim__; ++i_vec__) {
                ibasis_rcens[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 417;
            validate_non_negative_index("type", "nt", nt);
            context__.validate_dims("data initialization", "type", "int", context__.to_vec(nt));
            validate_non_negative_index("type", "nt", nt);
            type = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("type");
            pos__ = 0;
            size_t type_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < type_limit_0__; ++i_0__) {
                type[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 420;
            validate_non_negative_index("has_intercept", "nt", nt);
            context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec(nt));
            validate_non_negative_index("has_intercept", "nt", nt);
            has_intercept = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("has_intercept");
            pos__ = 0;
            size_t has_intercept_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < has_intercept_limit_0__; ++i_0__) {
                has_intercept[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 421;
            context__.validate_dims("data initialization", "N_has_intercept", "int", context__.to_vec());
            N_has_intercept = int(0);
            vals_i__ = context__.vals_i("N_has_intercept");
            pos__ = 0;
            N_has_intercept = vals_i__[pos__++];
            current_statement_begin__ = 422;
            context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
            prior_PD = int(0);
            vals_i__ = context__.vals_i("prior_PD");
            pos__ = 0;
            prior_PD = vals_i__[pos__++];
            current_statement_begin__ = 428;
            validate_non_negative_index("prior_dist", "nt", nt);
            context__.validate_dims("data initialization", "prior_dist", "int", context__.to_vec(nt));
            validate_non_negative_index("prior_dist", "nt", nt);
            prior_dist = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("prior_dist");
            pos__ = 0;
            size_t prior_dist_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < prior_dist_limit_0__; ++i_0__) {
                prior_dist[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 434;
            validate_non_negative_index("prior_dist_for_intercept", "nt", nt);
            context__.validate_dims("data initialization", "prior_dist_for_intercept", "int", context__.to_vec(nt));
            validate_non_negative_index("prior_dist_for_intercept", "nt", nt);
            prior_dist_for_intercept = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("prior_dist_for_intercept");
            pos__ = 0;
            size_t prior_dist_for_intercept_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < prior_dist_for_intercept_limit_0__; ++i_0__) {
                prior_dist_for_intercept[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 441;
            validate_non_negative_index("prior_dist_for_aux", "nt", nt);
            context__.validate_dims("data initialization", "prior_dist_for_aux", "int", context__.to_vec(nt));
            validate_non_negative_index("prior_dist_for_aux", "nt", nt);
            prior_dist_for_aux = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("prior_dist_for_aux");
            pos__ = 0;
            size_t prior_dist_for_aux_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < prior_dist_for_aux_limit_0__; ++i_0__) {
                prior_dist_for_aux[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 445;
            validate_non_negative_index("prior_mean", "nK", nK);
            context__.validate_dims("data initialization", "prior_mean", "vector_d", context__.to_vec(nK));
            validate_non_negative_index("prior_mean", "nK", nK);
            prior_mean = vector_d(static_cast<Eigen::VectorXd::Index>(nK));
            vals_r__ = context__.vals_r("prior_mean");
            pos__ = 0;
            size_t prior_mean_i_vec_lim__ = nK;
            for (size_t i_vec__ = 0; i_vec__ < prior_mean_i_vec_lim__; ++i_vec__) {
                prior_mean[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 446;
            validate_non_negative_index("prior_scale", "nK", nK);
            context__.validate_dims("data initialization", "prior_scale", "vector_d", context__.to_vec(nK));
            validate_non_negative_index("prior_scale", "nK", nK);
            prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(nK));
            vals_r__ = context__.vals_r("prior_scale");
            pos__ = 0;
            size_t prior_scale_i_vec_lim__ = nK;
            for (size_t i_vec__ = 0; i_vec__ < prior_scale_i_vec_lim__; ++i_vec__) {
                prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 448;
            validate_non_negative_index("prior_df", "nK", nK);
            context__.validate_dims("data initialization", "prior_df", "vector_d", context__.to_vec(nK));
            validate_non_negative_index("prior_df", "nK", nK);
            prior_df = vector_d(static_cast<Eigen::VectorXd::Index>(nK));
            vals_r__ = context__.vals_r("prior_df");
            pos__ = 0;
            size_t prior_df_i_vec_lim__ = nK;
            for (size_t i_vec__ = 0; i_vec__ < prior_df_i_vec_lim__; ++i_vec__) {
                prior_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 449;
            validate_non_negative_index("global_prior_scale", "nt", nt);
            context__.validate_dims("data initialization", "global_prior_scale", "double", context__.to_vec(nt));
            validate_non_negative_index("global_prior_scale", "nt", nt);
            global_prior_scale = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("global_prior_scale");
            pos__ = 0;
            size_t global_prior_scale_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < global_prior_scale_limit_0__; ++i_0__) {
                global_prior_scale[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 450;
            validate_non_negative_index("global_prior_df", "nt", nt);
            context__.validate_dims("data initialization", "global_prior_df", "double", context__.to_vec(nt));
            validate_non_negative_index("global_prior_df", "nt", nt);
            global_prior_df = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("global_prior_df");
            pos__ = 0;
            size_t global_prior_df_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < global_prior_df_limit_0__; ++i_0__) {
                global_prior_df[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 451;
            validate_non_negative_index("slab_scale", "nt", nt);
            context__.validate_dims("data initialization", "slab_scale", "double", context__.to_vec(nt));
            validate_non_negative_index("slab_scale", "nt", nt);
            slab_scale = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("slab_scale");
            pos__ = 0;
            size_t slab_scale_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < slab_scale_limit_0__; ++i_0__) {
                slab_scale[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 452;
            validate_non_negative_index("slab_df", "nt", nt);
            context__.validate_dims("data initialization", "slab_df", "double", context__.to_vec(nt));
            validate_non_negative_index("slab_df", "nt", nt);
            slab_df = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("slab_df");
            pos__ = 0;
            size_t slab_df_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < slab_df_limit_0__; ++i_0__) {
                slab_df[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 455;
            validate_non_negative_index("prior_mean_for_intercept", "nt", nt);
            context__.validate_dims("data initialization", "prior_mean_for_intercept", "double", context__.to_vec(nt));
            validate_non_negative_index("prior_mean_for_intercept", "nt", nt);
            prior_mean_for_intercept = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("prior_mean_for_intercept");
            pos__ = 0;
            size_t prior_mean_for_intercept_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < prior_mean_for_intercept_limit_0__; ++i_0__) {
                prior_mean_for_intercept[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 456;
            validate_non_negative_index("prior_scale_for_intercept", "nt", nt);
            context__.validate_dims("data initialization", "prior_scale_for_intercept", "double", context__.to_vec(nt));
            validate_non_negative_index("prior_scale_for_intercept", "nt", nt);
            prior_scale_for_intercept = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("prior_scale_for_intercept");
            pos__ = 0;
            size_t prior_scale_for_intercept_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < prior_scale_for_intercept_limit_0__; ++i_0__) {
                prior_scale_for_intercept[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 457;
            validate_non_negative_index("prior_df_for_intercept", "nt", nt);
            context__.validate_dims("data initialization", "prior_df_for_intercept", "double", context__.to_vec(nt));
            validate_non_negative_index("prior_df_for_intercept", "nt", nt);
            prior_df_for_intercept = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("prior_df_for_intercept");
            pos__ = 0;
            size_t prior_df_for_intercept_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < prior_df_for_intercept_limit_0__; ++i_0__) {
                prior_df_for_intercept[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 460;
            validate_non_negative_index("prior_scale_for_aux", "Nvars", Nvars);
            context__.validate_dims("data initialization", "prior_scale_for_aux", "vector_d", context__.to_vec(Nvars));
            validate_non_negative_index("prior_scale_for_aux", "Nvars", Nvars);
            prior_scale_for_aux = vector_d(static_cast<Eigen::VectorXd::Index>(Nvars));
            vals_r__ = context__.vals_r("prior_scale_for_aux");
            pos__ = 0;
            size_t prior_scale_for_aux_i_vec_lim__ = Nvars;
            for (size_t i_vec__ = 0; i_vec__ < prior_scale_for_aux_i_vec_lim__; ++i_vec__) {
                prior_scale_for_aux[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 461;
            validate_non_negative_index("prior_df_for_aux", "Nvars", Nvars);
            context__.validate_dims("data initialization", "prior_df_for_aux", "vector_d", context__.to_vec(Nvars));
            validate_non_negative_index("prior_df_for_aux", "Nvars", Nvars);
            prior_df_for_aux = vector_d(static_cast<Eigen::VectorXd::Index>(Nvars));
            vals_r__ = context__.vals_r("prior_df_for_aux");
            pos__ = 0;
            size_t prior_df_for_aux_i_vec_lim__ = Nvars;
            for (size_t i_vec__ = 0; i_vec__ < prior_df_for_aux_i_vec_lim__; ++i_vec__) {
                prior_df_for_aux[i_vec__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 377;
            check_greater_or_equal(function__,"nt",nt,1);
            current_statement_begin__ = 378;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"s_K[k0__]",s_K[k0__],1);
            }
            current_statement_begin__ = 379;
            check_greater_or_equal(function__,"nK",nK,0);
            current_statement_begin__ = 380;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"s_vars[k0__]",s_vars[k0__],0);
            }
            current_statement_begin__ = 381;
            check_greater_or_equal(function__,"Nvars",Nvars,0);
            current_statement_begin__ = 382;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"s_event[k0__]",s_event[k0__],0);
            }
            current_statement_begin__ = 383;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"s_rcens[k0__]",s_rcens[k0__],0);
            }
            current_statement_begin__ = 384;
            check_greater_or_equal(function__,"Nevent",Nevent,0);
            current_statement_begin__ = 385;
            check_greater_or_equal(function__,"Nrcens",Nrcens,0);
            current_statement_begin__ = 388;
            current_statement_begin__ = 391;
            current_statement_begin__ = 393;
            current_statement_begin__ = 394;
            current_statement_begin__ = 396;
            check_greater_or_equal(function__,"Nxevent",Nxevent,0);
            current_statement_begin__ = 397;
            check_greater_or_equal(function__,"Nxrcens",Nxrcens,0);
            current_statement_begin__ = 398;
            current_statement_begin__ = 399;
            current_statement_begin__ = 402;
            check_greater_or_equal(function__,"Nbasis_event",Nbasis_event,0);
            current_statement_begin__ = 403;
            check_greater_or_equal(function__,"Nibasis_event",Nibasis_event,0);
            current_statement_begin__ = 404;
            check_greater_or_equal(function__,"Nibasis_rcens",Nibasis_rcens,0);
            current_statement_begin__ = 406;
            current_statement_begin__ = 407;
            current_statement_begin__ = 408;
            current_statement_begin__ = 417;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"type[k0__]",type[k0__],1);
                check_less_or_equal(function__,"type[k0__]",type[k0__],7);
            }
            current_statement_begin__ = 420;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"has_intercept[k0__]",has_intercept[k0__],0);
                check_less_or_equal(function__,"has_intercept[k0__]",has_intercept[k0__],1);
            }
            current_statement_begin__ = 421;
            check_greater_or_equal(function__,"N_has_intercept",N_has_intercept,0);
            current_statement_begin__ = 422;
            check_greater_or_equal(function__,"prior_PD",prior_PD,0);
            check_less_or_equal(function__,"prior_PD",prior_PD,1);
            current_statement_begin__ = 428;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"prior_dist[k0__]",prior_dist[k0__],0);
                check_less_or_equal(function__,"prior_dist[k0__]",prior_dist[k0__],2);
            }
            current_statement_begin__ = 434;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"prior_dist_for_intercept[k0__]",prior_dist_for_intercept[k0__],0);
                check_less_or_equal(function__,"prior_dist_for_intercept[k0__]",prior_dist_for_intercept[k0__],2);
            }
            current_statement_begin__ = 441;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"prior_dist_for_aux[k0__]",prior_dist_for_aux[k0__],0);
                check_less_or_equal(function__,"prior_dist_for_aux[k0__]",prior_dist_for_aux[k0__],3);
            }
            current_statement_begin__ = 445;
            current_statement_begin__ = 446;
            check_greater_or_equal(function__,"prior_scale",prior_scale,0);
            current_statement_begin__ = 448;
            check_greater_or_equal(function__,"prior_df",prior_df,0);
            current_statement_begin__ = 449;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"global_prior_scale[k0__]",global_prior_scale[k0__],0);
            }
            current_statement_begin__ = 450;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"global_prior_df[k0__]",global_prior_df[k0__],0);
            }
            current_statement_begin__ = 451;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"slab_scale[k0__]",slab_scale[k0__],0);
            }
            current_statement_begin__ = 452;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"slab_df[k0__]",slab_df[k0__],0);
            }
            current_statement_begin__ = 455;
            current_statement_begin__ = 456;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"prior_scale_for_intercept[k0__]",prior_scale_for_intercept[k0__],0);
            }
            current_statement_begin__ = 457;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"prior_df_for_intercept[k0__]",prior_df_for_intercept[k0__],0);
            }
            current_statement_begin__ = 460;
            check_greater_or_equal(function__,"prior_scale_for_aux",prior_scale_for_aux,0);
            current_statement_begin__ = 461;
            check_greater_or_equal(function__,"prior_df_for_aux",prior_df_for_aux,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 480;
            validate_non_negative_index("z_beta", "nK", nK);
            num_params_r__ += nK;
            current_statement_begin__ = 488;
            validate_non_negative_index("z_coefs", "Nvars", Nvars);
            num_params_r__ += Nvars;
            current_statement_begin__ = 491;
            validate_non_negative_index("gamma", "N_has_intercept", N_has_intercept);
            num_params_r__ += N_has_intercept;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_mstte() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        validate_non_negative_index("z_beta", "nK", nK);
        context__.validate_dims("initialization", "z_beta", "vector_d", context__.to_vec(nK));
        vector_d z_beta(static_cast<Eigen::VectorXd::Index>(nK));
        for (int j1__ = 0U; j1__ < nK; ++j1__)
            z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("z_coefs")))
            throw std::runtime_error("variable z_coefs missing");
        vals_r__ = context__.vals_r("z_coefs");
        pos__ = 0U;
        validate_non_negative_index("z_coefs", "Nvars", Nvars);
        context__.validate_dims("initialization", "z_coefs", "vector_d", context__.to_vec(Nvars));
        vector_d z_coefs(static_cast<Eigen::VectorXd::Index>(Nvars));
        for (int j1__ = 0U; j1__ < Nvars; ++j1__)
            z_coefs(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,z_coefs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_coefs: ") + e.what());
        }

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "N_has_intercept", N_has_intercept);
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec(N_has_intercept));
        std::vector<double> gamma(N_has_intercept,double(0));
        for (int i0__ = 0U; i0__ < N_has_intercept; ++i0__)
            gamma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_has_intercept; ++i0__)
            try {
            writer__.scalar_unconstrain(gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_beta;
            (void) z_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                z_beta = in__.vector_constrain(nK,lp__);
            else
                z_beta = in__.vector_constrain(nK);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_coefs;
            (void) z_coefs;  // dummy to suppress unused var warning
            if (jacobian__)
                z_coefs = in__.vector_lb_constrain(0,Nvars,lp__);
            else
                z_coefs = in__.vector_lb_constrain(0,Nvars);

            vector<local_scalar_t__> gamma;
            size_t dim_gamma_0__ = N_has_intercept;
            gamma.reserve(dim_gamma_0__);
            for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
                if (jacobian__)
                    gamma.push_back(in__.scalar_constrain(lp__));
                else
                    gamma.push_back(in__.scalar_constrain());
            }


            // transformed parameters
            current_statement_begin__ = 507;
            validate_non_negative_index("beta", "nK", nK);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(nK));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 510;
            validate_non_negative_index("coefs", "Nvars", Nvars);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  coefs(static_cast<Eigen::VectorXd::Index>(Nvars));
            (void) coefs;  // dummy to suppress unused var warning

            stan::math::initialize(coefs, DUMMY_VAR__);
            stan::math::fill(coefs,DUMMY_VAR__);


            {
            current_statement_begin__ = 514;
            int pos(0);
            (void) pos;  // dummy to suppress unused var warning

            stan::math::fill(pos, std::numeric_limits<int>::min());
            stan::math::assign(pos,1);


            current_statement_begin__ = 515;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 516;
                if (as_bool(logical_gt(get_base1(s_K,k,"s_K",1),0))) {

                    current_statement_begin__ = 517;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(s_K,k,"s_K",1)) - 1)), stan::model::nil_index_list()), 
                                make_beta(segment(z_beta,pos,get_base1(s_K,k,"s_K",1)),get_base1(prior_dist,k,"prior_dist",1),segment(prior_mean,pos,get_base1(s_K,k,"s_K",1)),segment(prior_scale,pos,get_base1(s_K,k,"s_K",1)),segment(prior_df,pos,get_base1(s_K,k,"s_K",1)), pstream__), 
                                "assigning variable beta");
                }
                current_statement_begin__ = 519;
                stan::math::assign(pos, (pos + get_base1(s_K,k,"s_K",1)));
            }
            }
            {
            current_statement_begin__ = 526;
            int pos(0);
            (void) pos;  // dummy to suppress unused var warning

            stan::math::fill(pos, std::numeric_limits<int>::min());
            stan::math::assign(pos,1);


            current_statement_begin__ = 527;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 528;
                if (as_bool(logical_gt(get_base1(s_vars,k,"s_vars",1),0))) {

                    current_statement_begin__ = 529;
                    stan::model::assign(coefs, 
                                stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(s_vars,k,"s_vars",1)) - 1)), stan::model::nil_index_list()), 
                                elt_multiply(segment(z_coefs,pos,get_base1(s_vars,k,"s_vars",1)),segment(prior_scale_for_aux,pos,get_base1(s_vars,k,"s_vars",1))), 
                                "assigning variable coefs");
                }
                current_statement_begin__ = 531;
                stan::math::assign(pos, (pos + get_base1(s_vars,k,"s_vars",1)));
            }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < nK; ++i0__) {
                if (stan::math::is_uninitialized(beta(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < Nvars; ++i0__) {
                if (stan::math::is_uninitialized(coefs(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: coefs" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 507;
            current_statement_begin__ = 510;

            // model body
            {
            current_statement_begin__ = 538;
            validate_non_negative_index("eta_rcens", "Nrcens", Nrcens);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta_rcens(static_cast<Eigen::VectorXd::Index>(Nrcens));
            (void) eta_rcens;  // dummy to suppress unused var warning

            stan::math::initialize(eta_rcens, DUMMY_VAR__);
            stan::math::fill(eta_rcens,DUMMY_VAR__);
            current_statement_begin__ = 539;
            validate_non_negative_index("eta_event", "Nevent", Nevent);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta_event(static_cast<Eigen::VectorXd::Index>(Nevent));
            (void) eta_event;  // dummy to suppress unused var warning

            stan::math::initialize(eta_event, DUMMY_VAR__);
            stan::math::fill(eta_event,DUMMY_VAR__);
            current_statement_begin__ = 542;
            int pos(0);
            (void) pos;  // dummy to suppress unused var warning

            stan::math::fill(pos, std::numeric_limits<int>::min());
            current_statement_begin__ = 543;
            int pos_e(0);
            (void) pos_e;  // dummy to suppress unused var warning

            stan::math::fill(pos_e, std::numeric_limits<int>::min());
            current_statement_begin__ = 544;
            int pos_i_e(0);
            (void) pos_i_e;  // dummy to suppress unused var warning

            stan::math::fill(pos_i_e, std::numeric_limits<int>::min());
            current_statement_begin__ = 545;
            int pos_rc(0);
            (void) pos_rc;  // dummy to suppress unused var warning

            stan::math::fill(pos_rc, std::numeric_limits<int>::min());
            current_statement_begin__ = 546;
            int pos_i_rc(0);
            (void) pos_i_rc;  // dummy to suppress unused var warning

            stan::math::fill(pos_i_rc, std::numeric_limits<int>::min());
            current_statement_begin__ = 547;
            int pos_b(0);
            (void) pos_b;  // dummy to suppress unused var warning

            stan::math::fill(pos_b, std::numeric_limits<int>::min());
            current_statement_begin__ = 548;
            int pos_g(0);
            (void) pos_g;  // dummy to suppress unused var warning

            stan::math::fill(pos_g, std::numeric_limits<int>::min());
            current_statement_begin__ = 549;
            int pos_coefs(0);
            (void) pos_coefs;  // dummy to suppress unused var warning

            stan::math::fill(pos_coefs, std::numeric_limits<int>::min());
            current_statement_begin__ = 550;
            int pos_vars(0);
            (void) pos_vars;  // dummy to suppress unused var warning

            stan::math::fill(pos_vars, std::numeric_limits<int>::min());
            current_statement_begin__ = 551;
            int pos_spline_event(0);
            (void) pos_spline_event;  // dummy to suppress unused var warning

            stan::math::fill(pos_spline_event, std::numeric_limits<int>::min());
            current_statement_begin__ = 552;
            int pos_spline_rcens(0);
            (void) pos_spline_rcens;  // dummy to suppress unused var warning

            stan::math::fill(pos_spline_rcens, std::numeric_limits<int>::min());


            current_statement_begin__ = 555;
            stan::math::assign(pos_e, 1);
            current_statement_begin__ = 556;
            stan::math::assign(pos_i_e, 1);
            current_statement_begin__ = 557;
            stan::math::assign(pos_rc, 1);
            current_statement_begin__ = 558;
            stan::math::assign(pos_i_rc, 1);
            current_statement_begin__ = 559;
            stan::math::assign(pos_b, 1);
            current_statement_begin__ = 560;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 561;
                if (as_bool(logical_gt(get_base1(s_K,k,"s_K",1),0))) {

                    current_statement_begin__ = 562;
                    if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {
                        {
                        current_statement_begin__ = 563;
                        validate_non_negative_index("X_event", "get_base1(s_event,k,\"s_event\",1)", get_base1(s_event,k,"s_event",1));
                        validate_non_negative_index("X_event", "get_base1(s_K,k,\"s_K\",1)", get_base1(s_K,k,"s_K",1));
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  X_event(static_cast<Eigen::VectorXd::Index>(get_base1(s_event,k,"s_event",1)),static_cast<Eigen::VectorXd::Index>(get_base1(s_K,k,"s_K",1)));
                        (void) X_event;  // dummy to suppress unused var warning

                        stan::math::initialize(X_event, DUMMY_VAR__);
                        stan::math::fill(X_event,DUMMY_VAR__);


                        current_statement_begin__ = 564;
                        stan::math::assign(X_event, to_matrix(segment(x_event,pos_e,(get_base1(s_event,k,"s_event",1) * get_base1(s_K,k,"s_K",1))),get_base1(s_event,k,"s_event",1),get_base1(s_K,k,"s_K",1)));
                        current_statement_begin__ = 567;
                        stan::model::assign(eta_event, 
                                    stan::model::cons_list(stan::model::index_min_max(pos_i_e, ((pos_i_e + get_base1(s_event,k,"s_event",1)) - 1)), stan::model::nil_index_list()), 
                                    multiply(X_event,segment(beta,pos_b,get_base1(s_K,k,"s_K",1))), 
                                    "assigning variable eta_event");
                        }
                    }
                    current_statement_begin__ = 569;
                    if (as_bool(logical_gt(get_base1(s_rcens,k,"s_rcens",1),0))) {
                        {
                        current_statement_begin__ = 570;
                        validate_non_negative_index("X_rcens", "get_base1(s_rcens,k,\"s_rcens\",1)", get_base1(s_rcens,k,"s_rcens",1));
                        validate_non_negative_index("X_rcens", "get_base1(s_K,k,\"s_K\",1)", get_base1(s_K,k,"s_K",1));
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  X_rcens(static_cast<Eigen::VectorXd::Index>(get_base1(s_rcens,k,"s_rcens",1)),static_cast<Eigen::VectorXd::Index>(get_base1(s_K,k,"s_K",1)));
                        (void) X_rcens;  // dummy to suppress unused var warning

                        stan::math::initialize(X_rcens, DUMMY_VAR__);
                        stan::math::fill(X_rcens,DUMMY_VAR__);
                        stan::math::assign(X_rcens,to_matrix(segment(x_rcens,pos_rc,(get_base1(s_rcens,k,"s_rcens",1) * get_base1(s_K,k,"s_K",1))),get_base1(s_rcens,k,"s_rcens",1),get_base1(s_K,k,"s_K",1)));


                        current_statement_begin__ = 573;
                        stan::model::assign(eta_rcens, 
                                    stan::model::cons_list(stan::model::index_min_max(pos_i_rc, ((pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)) - 1)), stan::model::nil_index_list()), 
                                    multiply(X_rcens,segment(beta,pos_b,get_base1(s_K,k,"s_K",1))), 
                                    "assigning variable eta_rcens");
                        }
                    }
                }
                current_statement_begin__ = 576;
                stan::math::assign(pos_e, (pos_e + (get_base1(s_event,k,"s_event",1) * get_base1(s_K,k,"s_K",1))));
                current_statement_begin__ = 577;
                stan::math::assign(pos_i_e, (pos_i_e + get_base1(s_event,k,"s_event",1)));
                current_statement_begin__ = 578;
                stan::math::assign(pos_rc, (pos_rc + (get_base1(s_rcens,k,"s_rcens",1) * get_base1(s_K,k,"s_K",1))));
                current_statement_begin__ = 579;
                stan::math::assign(pos_i_rc, (pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)));
                current_statement_begin__ = 580;
                stan::math::assign(pos_b, (pos_b + get_base1(s_K,k,"s_K",1)));
            }
            current_statement_begin__ = 585;
            stan::math::assign(pos_i_e, 1);
            current_statement_begin__ = 586;
            stan::math::assign(pos_i_rc, 1);
            current_statement_begin__ = 587;
            stan::math::assign(pos_g, 1);
            current_statement_begin__ = 588;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 589;
                if (as_bool(logical_eq(get_base1(has_intercept,k,"has_intercept",1),1))) {

                    current_statement_begin__ = 590;
                    stan::model::assign(eta_event, 
                                stan::model::cons_list(stan::model::index_min_max(pos_i_e, ((pos_i_e + get_base1(s_event,k,"s_event",1)) - 1)), stan::model::nil_index_list()), 
                                add(stan::model::rvalue(eta_event, stan::model::cons_list(stan::model::index_min_max(pos_i_e, ((pos_i_e + get_base1(s_event,k,"s_event",1)) - 1)), stan::model::nil_index_list()), "eta_event"), get_base1(gamma,pos_g,"gamma",1)), 
                                "assigning variable eta_event");
                    current_statement_begin__ = 591;
                    stan::model::assign(eta_rcens, 
                                stan::model::cons_list(stan::model::index_min_max(pos_i_rc, ((pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)) - 1)), stan::model::nil_index_list()), 
                                add(stan::model::rvalue(eta_rcens, stan::model::cons_list(stan::model::index_min_max(pos_i_rc, ((pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)) - 1)), stan::model::nil_index_list()), "eta_rcens"), get_base1(gamma,pos_g,"gamma",1)), 
                                "assigning variable eta_rcens");
                    current_statement_begin__ = 592;
                    stan::math::assign(pos_g, (pos_g + 1));
                }
                current_statement_begin__ = 594;
                stan::math::assign(pos_i_e, (pos_i_e + get_base1(s_event,k,"s_event",1)));
                current_statement_begin__ = 595;
                stan::math::assign(pos_i_rc, (pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)));
            }
            current_statement_begin__ = 599;
            stan::math::assign(pos_i_e, 1);
            current_statement_begin__ = 600;
            stan::math::assign(pos_i_rc, 1);
            current_statement_begin__ = 601;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 602;
                if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {

                    current_statement_begin__ = 603;
                    stan::model::assign(eta_event, 
                                stan::model::cons_list(stan::model::index_min_max(pos_i_e, ((pos_i_e + get_base1(s_event,k,"s_event",1)) - 1)), stan::model::nil_index_list()), 
                                add(stan::model::rvalue(eta_event, stan::model::cons_list(stan::model::index_min_max(pos_i_e, ((pos_i_e + get_base1(s_event,k,"s_event",1)) - 1)), stan::model::nil_index_list()), "eta_event"), get_base1(log_crude_event_rate,k,"log_crude_event_rate",1)), 
                                "assigning variable eta_event");
                }
                current_statement_begin__ = 605;
                if (as_bool(logical_gt(get_base1(s_rcens,k,"s_rcens",1),0))) {

                    current_statement_begin__ = 606;
                    stan::model::assign(eta_rcens, 
                                stan::model::cons_list(stan::model::index_min_max(pos_i_rc, ((pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)) - 1)), stan::model::nil_index_list()), 
                                add(stan::model::rvalue(eta_rcens, stan::model::cons_list(stan::model::index_min_max(pos_i_rc, ((pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)) - 1)), stan::model::nil_index_list()), "eta_rcens"), get_base1(log_crude_event_rate,k,"log_crude_event_rate",1)), 
                                "assigning variable eta_rcens");
                }
                current_statement_begin__ = 608;
                stan::math::assign(pos_i_e, (pos_i_e + get_base1(s_event,k,"s_event",1)));
                current_statement_begin__ = 609;
                stan::math::assign(pos_i_rc, (pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)));
            }
            current_statement_begin__ = 614;
            stan::math::assign(pos_i_e, 1);
            current_statement_begin__ = 615;
            stan::math::assign(pos_i_rc, 1);
            current_statement_begin__ = 616;
            stan::math::assign(pos_coefs, 1);
            current_statement_begin__ = 617;
            stan::math::assign(pos_spline_event, 1);
            current_statement_begin__ = 618;
            stan::math::assign(pos_spline_rcens, 1);
            current_statement_begin__ = 619;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 620;
                if (as_bool(logical_eq(get_base1(type,k,"type",1),1))) {
                    {
                    current_statement_begin__ = 621;
                    local_scalar_t__ shape;
                    (void) shape;  // dummy to suppress unused var warning

                    stan::math::initialize(shape, DUMMY_VAR__);
                    stan::math::fill(shape,DUMMY_VAR__);
                    stan::math::assign(shape,get_base1(coefs,pos_coefs,"coefs",1));


                    current_statement_begin__ = 622;
                    if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {
                        current_statement_begin__ = 622;
                        lp_accum__.add(weibull_log_haz(segment(eta_event,pos_i_e,get_base1(s_event,k,"s_event",1)),segment(t_event,pos_i_e,get_base1(s_event,k,"s_event",1)),shape, pstream__));
                    }
                    current_statement_begin__ = 623;
                    if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {
                        current_statement_begin__ = 623;
                        lp_accum__.add(weibull_log_surv(segment(eta_event,pos_i_e,get_base1(s_event,k,"s_event",1)),segment(t_event,pos_i_e,get_base1(s_event,k,"s_event",1)),shape, pstream__));
                    }
                    current_statement_begin__ = 624;
                    if (as_bool(logical_gt(get_base1(s_rcens,k,"s_rcens",1),0))) {
                        current_statement_begin__ = 624;
                        lp_accum__.add(weibull_log_surv(segment(eta_rcens,pos_i_rc,get_base1(s_rcens,k,"s_rcens",1)),segment(t_rcens,pos_i_rc,get_base1(s_rcens,k,"s_rcens",1)),shape, pstream__));
                    }
                    }
                } else if (as_bool(logical_eq(get_base1(type,k,"type",1),4))) {

                    current_statement_begin__ = 627;
                    if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {
                        {
                        current_statement_begin__ = 628;
                        validate_non_negative_index("iBasis_event", "get_base1(s_event,k,\"s_event\",1)", get_base1(s_event,k,"s_event",1));
                        validate_non_negative_index("iBasis_event", "get_base1(s_vars,k,\"s_vars\",1)", get_base1(s_vars,k,"s_vars",1));
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  iBasis_event(static_cast<Eigen::VectorXd::Index>(get_base1(s_event,k,"s_event",1)),static_cast<Eigen::VectorXd::Index>(get_base1(s_vars,k,"s_vars",1)));
                        (void) iBasis_event;  // dummy to suppress unused var warning

                        stan::math::initialize(iBasis_event, DUMMY_VAR__);
                        stan::math::fill(iBasis_event,DUMMY_VAR__);
                        stan::math::assign(iBasis_event,to_matrix(segment(ibasis_event,pos_spline_event,(get_base1(s_event,k,"s_event",1) * get_base1(s_vars,k,"s_vars",1))),get_base1(s_event,k,"s_event",1),get_base1(s_vars,k,"s_vars",1)));
                        current_statement_begin__ = 631;
                        validate_non_negative_index("Basis_event", "get_base1(s_event,k,\"s_event\",1)", get_base1(s_event,k,"s_event",1));
                        validate_non_negative_index("Basis_event", "get_base1(s_vars,k,\"s_vars\",1)", get_base1(s_vars,k,"s_vars",1));
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Basis_event(static_cast<Eigen::VectorXd::Index>(get_base1(s_event,k,"s_event",1)),static_cast<Eigen::VectorXd::Index>(get_base1(s_vars,k,"s_vars",1)));
                        (void) Basis_event;  // dummy to suppress unused var warning

                        stan::math::initialize(Basis_event, DUMMY_VAR__);
                        stan::math::fill(Basis_event,DUMMY_VAR__);
                        stan::math::assign(Basis_event,to_matrix(segment(basis_event,pos_spline_event,(get_base1(s_event,k,"s_event",1) * get_base1(s_vars,k,"s_vars",1))),get_base1(s_event,k,"s_event",1),get_base1(s_vars,k,"s_vars",1)));


                        current_statement_begin__ = 634;
                        lp_accum__.add(mspline_log_haz(segment(eta_event,pos_i_e,get_base1(s_event,k,"s_event",1)),Basis_event,segment(coefs,pos_coefs,get_base1(s_vars,k,"s_vars",1)), pstream__));
                        current_statement_begin__ = 636;
                        lp_accum__.add(mspline_log_surv(segment(eta_event,pos_i_e,get_base1(s_event,k,"s_event",1)),iBasis_event,segment(coefs,pos_coefs,get_base1(s_vars,k,"s_vars",1)), pstream__));
                        }
                    }
                    current_statement_begin__ = 637;
                    if (as_bool(logical_gt(get_base1(s_rcens,k,"s_rcens",1),0))) {
                        {
                        current_statement_begin__ = 638;
                        validate_non_negative_index("iBasis_rcens", "get_base1(s_rcens,k,\"s_rcens\",1)", get_base1(s_rcens,k,"s_rcens",1));
                        validate_non_negative_index("iBasis_rcens", "get_base1(s_vars,k,\"s_vars\",1)", get_base1(s_vars,k,"s_vars",1));
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  iBasis_rcens(static_cast<Eigen::VectorXd::Index>(get_base1(s_rcens,k,"s_rcens",1)),static_cast<Eigen::VectorXd::Index>(get_base1(s_vars,k,"s_vars",1)));
                        (void) iBasis_rcens;  // dummy to suppress unused var warning

                        stan::math::initialize(iBasis_rcens, DUMMY_VAR__);
                        stan::math::fill(iBasis_rcens,DUMMY_VAR__);
                        stan::math::assign(iBasis_rcens,to_matrix(segment(ibasis_rcens,pos_spline_rcens,(get_base1(s_rcens,k,"s_rcens",1) * get_base1(s_vars,k,"s_vars",1))),get_base1(s_rcens,k,"s_rcens",1),get_base1(s_vars,k,"s_vars",1)));


                        current_statement_begin__ = 641;
                        lp_accum__.add(mspline_log_surv(segment(eta_rcens,pos_i_rc,get_base1(s_rcens,k,"s_rcens",1)),iBasis_rcens,segment(coefs,pos_coefs,get_base1(s_vars,k,"s_vars",1)), pstream__));
                        }
                    }
                } else if (as_bool(logical_eq(get_base1(type,k,"type",1),5))) {

                    current_statement_begin__ = 645;
                    if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {
                        current_statement_begin__ = 645;
                        lp_accum__.add(exponential_log_haz(segment(eta_event,pos_i_e,get_base1(s_event,k,"s_event",1)), pstream__));
                    }
                    current_statement_begin__ = 646;
                    if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {
                        current_statement_begin__ = 646;
                        lp_accum__.add(exponential_log_surv(segment(eta_event,pos_i_e,get_base1(s_event,k,"s_event",1)),segment(t_event,pos_i_e,get_base1(s_event,k,"s_event",1)), pstream__));
                    }
                    current_statement_begin__ = 647;
                    if (as_bool(logical_gt(get_base1(s_rcens,k,"s_rcens",1),0))) {
                        current_statement_begin__ = 647;
                        lp_accum__.add(exponential_log_surv(segment(eta_rcens,pos_i_rc,get_base1(s_rcens,k,"s_rcens",1)),segment(t_rcens,pos_i_rc,get_base1(s_rcens,k,"s_rcens",1)), pstream__));
                    }
                } else if (as_bool(logical_eq(get_base1(type,k,"type",1),6))) {
                    {
                    current_statement_begin__ = 650;
                    local_scalar_t__ scale;
                    (void) scale;  // dummy to suppress unused var warning

                    stan::math::initialize(scale, DUMMY_VAR__);
                    stan::math::fill(scale,DUMMY_VAR__);
                    stan::math::assign(scale,get_base1(coefs,pos_coefs,"coefs",1));


                    current_statement_begin__ = 651;
                    if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {
                        current_statement_begin__ = 651;
                        lp_accum__.add(gompertz_log_haz(segment(eta_event,pos_i_e,get_base1(s_event,k,"s_event",1)),segment(t_event,pos_i_e,get_base1(s_event,k,"s_event",1)),scale, pstream__));
                    }
                    current_statement_begin__ = 652;
                    if (as_bool(logical_gt(get_base1(s_event,k,"s_event",1),0))) {
                        current_statement_begin__ = 652;
                        lp_accum__.add(gompertz_log_surv(segment(eta_event,pos_i_e,get_base1(s_event,k,"s_event",1)),segment(t_event,pos_i_e,get_base1(s_event,k,"s_event",1)),scale, pstream__));
                    }
                    current_statement_begin__ = 653;
                    if (as_bool(logical_gt(get_base1(s_rcens,k,"s_rcens",1),0))) {
                        current_statement_begin__ = 653;
                        lp_accum__.add(gompertz_log_surv(segment(eta_rcens,pos_i_rc,get_base1(s_rcens,k,"s_rcens",1)),segment(t_rcens,pos_i_rc,get_base1(s_rcens,k,"s_rcens",1)),scale, pstream__));
                    }
                    current_statement_begin__ = 654;
                    stan::math::assign(pos_coefs, (pos_coefs + 1));
                    }
                } else {

                    current_statement_begin__ = 657;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "Bug found: invalid baseline hazard (without quadrature).";
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 659;
                stan::math::assign(pos_i_e, (pos_i_e + get_base1(s_event,k,"s_event",1)));
                current_statement_begin__ = 660;
                stan::math::assign(pos_i_rc, (pos_i_rc + get_base1(s_rcens,k,"s_rcens",1)));
                current_statement_begin__ = 661;
                stan::math::assign(pos_coefs, (pos_coefs + get_base1(s_vars,k,"s_vars",1)));
                current_statement_begin__ = 662;
                stan::math::assign(pos_spline_event, (pos_spline_event + (get_base1(s_event,k,"s_event",1) * get_base1(s_vars,k,"s_vars",1))));
                current_statement_begin__ = 663;
                stan::math::assign(pos_spline_rcens, (pos_spline_rcens + (get_base1(s_rcens,k,"s_rcens",1) * get_base1(s_vars,k,"s_vars",1))));
            }
            current_statement_begin__ = 669;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 670;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 671;
                if (as_bool(logical_gt(get_base1(s_K,k,"s_K",1),0))) {
                    {
                    current_statement_begin__ = 672;
                    local_scalar_t__ dummy;
                    (void) dummy;  // dummy to suppress unused var warning

                    stan::math::initialize(dummy, DUMMY_VAR__);
                    stan::math::fill(dummy,DUMMY_VAR__);
                    stan::math::assign(dummy,beta_lp(segment(z_beta,pos,get_base1(s_K,k,"s_K",1)),get_base1(prior_dist,k,"prior_dist",1),segment(prior_scale,pos,get_base1(s_K,k,"s_K",1)),segment(prior_df,pos,get_base1(s_K,k,"s_K",1)), lp__, lp_accum__, pstream__));


                    }
                }
                current_statement_begin__ = 674;
                stan::math::assign(pos, (pos + get_base1(s_K,k,"s_K",1)));
            }
            current_statement_begin__ = 678;
            stan::math::assign(pos_g, 1);
            current_statement_begin__ = 679;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 680;
                if (as_bool(logical_eq(get_base1(has_intercept,k,"has_intercept",1),1))) {
                    {
                    current_statement_begin__ = 681;
                    local_scalar_t__ dummy;
                    (void) dummy;  // dummy to suppress unused var warning

                    stan::math::initialize(dummy, DUMMY_VAR__);
                    stan::math::fill(dummy,DUMMY_VAR__);
                    stan::math::assign(dummy,gamma_lp(get_base1(gamma,pos_g,"gamma",1),get_base1(prior_dist_for_intercept,k,"prior_dist_for_intercept",1),get_base1(prior_mean_for_intercept,k,"prior_mean_for_intercept",1),get_base1(prior_scale_for_intercept,k,"prior_scale_for_intercept",1),get_base1(prior_df_for_intercept,k,"prior_df_for_intercept",1), lp__, lp_accum__, pstream__));


                    current_statement_begin__ = 683;
                    stan::math::assign(pos_g, (pos_g + 1));
                    }
                }
            }
            current_statement_begin__ = 688;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 689;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 690;
                if (as_bool(logical_gt(get_base1(s_vars,k,"s_vars",1),0))) {
                    {
                    current_statement_begin__ = 691;
                    local_scalar_t__ dummy;
                    (void) dummy;  // dummy to suppress unused var warning

                    stan::math::initialize(dummy, DUMMY_VAR__);
                    stan::math::fill(dummy,DUMMY_VAR__);
                    stan::math::assign(dummy,basehaz_lp(segment(z_coefs,pos,get_base1(s_vars,k,"s_vars",1)),get_base1(prior_dist_for_aux,k,"prior_dist_for_aux",1),segment(prior_df_for_aux,pos,get_base1(s_vars,k,"s_vars",1)), lp__, lp_accum__, pstream__));


                    }
                }
                current_statement_begin__ = 692;
                stan::math::assign(pos, (pos + get_base1(s_vars,k,"s_vars",1)));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("z_beta");
        names__.push_back("z_coefs");
        names__.push_back("gamma");
        names__.push_back("beta");
        names__.push_back("coefs");
        names__.push_back("alpha");
        names__.push_back("aux");
        names__.push_back("pos_b");
        names__.push_back("pos_vars");
        names__.push_back("pos_g");
        names__.push_back("pos_int");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nK);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nvars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nK);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nvars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nvars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_mstte_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d z_beta = in__.vector_constrain(nK);
        vector_d z_coefs = in__.vector_lb_constrain(0,Nvars);
        vector<double> gamma;
        size_t dim_gamma_0__ = N_has_intercept;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            gamma.push_back(in__.scalar_constrain());
        }
            for (int k_0__ = 0; k_0__ < nK; ++k_0__) {
            vars__.push_back(z_beta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < Nvars; ++k_0__) {
            vars__.push_back(z_coefs[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N_has_intercept; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 507;
            validate_non_negative_index("beta", "nK", nK);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(nK));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 510;
            validate_non_negative_index("coefs", "Nvars", Nvars);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  coefs(static_cast<Eigen::VectorXd::Index>(Nvars));
            (void) coefs;  // dummy to suppress unused var warning

            stan::math::initialize(coefs, DUMMY_VAR__);
            stan::math::fill(coefs,DUMMY_VAR__);


            {
            current_statement_begin__ = 514;
            int pos(0);
            (void) pos;  // dummy to suppress unused var warning

            stan::math::fill(pos, std::numeric_limits<int>::min());
            stan::math::assign(pos,1);


            current_statement_begin__ = 515;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 516;
                if (as_bool(logical_gt(get_base1(s_K,k,"s_K",1),0))) {

                    current_statement_begin__ = 517;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(s_K,k,"s_K",1)) - 1)), stan::model::nil_index_list()), 
                                make_beta(segment(z_beta,pos,get_base1(s_K,k,"s_K",1)),get_base1(prior_dist,k,"prior_dist",1),segment(prior_mean,pos,get_base1(s_K,k,"s_K",1)),segment(prior_scale,pos,get_base1(s_K,k,"s_K",1)),segment(prior_df,pos,get_base1(s_K,k,"s_K",1)), pstream__), 
                                "assigning variable beta");
                }
                current_statement_begin__ = 519;
                stan::math::assign(pos, (pos + get_base1(s_K,k,"s_K",1)));
            }
            }
            {
            current_statement_begin__ = 526;
            int pos(0);
            (void) pos;  // dummy to suppress unused var warning

            stan::math::fill(pos, std::numeric_limits<int>::min());
            stan::math::assign(pos,1);


            current_statement_begin__ = 527;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 528;
                if (as_bool(logical_gt(get_base1(s_vars,k,"s_vars",1),0))) {

                    current_statement_begin__ = 529;
                    stan::model::assign(coefs, 
                                stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(s_vars,k,"s_vars",1)) - 1)), stan::model::nil_index_list()), 
                                elt_multiply(segment(z_coefs,pos,get_base1(s_vars,k,"s_vars",1)),segment(prior_scale_for_aux,pos,get_base1(s_vars,k,"s_vars",1))), 
                                "assigning variable coefs");
                }
                current_statement_begin__ = 531;
                stan::math::assign(pos, (pos + get_base1(s_vars,k,"s_vars",1)));
            }
            }

            // validate transformed parameters
            current_statement_begin__ = 507;
            current_statement_begin__ = 510;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < nK; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < Nvars; ++k_0__) {
            vars__.push_back(coefs[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 701;
            validate_non_negative_index("alpha", "N_has_intercept", N_has_intercept);
            vector<local_scalar_t__> alpha(N_has_intercept);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 702;
            validate_non_negative_index("aux", "Nvars", Nvars);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aux(static_cast<Eigen::VectorXd::Index>(Nvars));
            (void) aux;  // dummy to suppress unused var warning

            stan::math::initialize(aux, DUMMY_VAR__);
            stan::math::fill(aux,DUMMY_VAR__);
            current_statement_begin__ = 704;
            int pos_b(0);
            (void) pos_b;  // dummy to suppress unused var warning

            stan::math::fill(pos_b, std::numeric_limits<int>::min());
            stan::math::assign(pos_b,1);
            current_statement_begin__ = 705;
            int pos_vars(0);
            (void) pos_vars;  // dummy to suppress unused var warning

            stan::math::fill(pos_vars, std::numeric_limits<int>::min());
            stan::math::assign(pos_vars,1);
            current_statement_begin__ = 706;
            int pos_g(0);
            (void) pos_g;  // dummy to suppress unused var warning

            stan::math::fill(pos_g, std::numeric_limits<int>::min());
            stan::math::assign(pos_g,1);
            current_statement_begin__ = 707;
            int pos_int(0);
            (void) pos_int;  // dummy to suppress unused var warning

            stan::math::fill(pos_int, std::numeric_limits<int>::min());
            stan::math::assign(pos_int,1);


            current_statement_begin__ = 708;
            for (int k = 1; k <= nt; ++k) {

                current_statement_begin__ = 709;
                if (as_bool(logical_eq(get_base1(type,k,"type",1),4))) {

                    current_statement_begin__ = 710;
                    stan::model::assign(aux, 
                                stan::model::cons_list(stan::model::index_min_max(pos_vars, ((pos_vars + get_base1(s_vars,k,"s_vars",1)) - 1)), stan::model::nil_index_list()), 
                                multiply(segment(coefs,pos_vars,get_base1(s_vars,k,"s_vars",1)),stan::math::exp((get_base1(log_crude_event_rate,k,"log_crude_event_rate",1) - dot_product(segment(x_bar,pos_b,get_base1(s_K,k,"s_K",1)),segment(beta,pos_b,get_base1(s_K,k,"s_K",1)))))), 
                                "assigning variable aux");
                } else {

                    current_statement_begin__ = 713;
                    stan::model::assign(aux, 
                                stan::model::cons_list(stan::model::index_uni(pos_vars), stan::model::nil_index_list()), 
                                get_base1(coefs,pos_vars,"coefs",1), 
                                "assigning variable aux");
                    current_statement_begin__ = 714;
                    stan::model::assign(alpha, 
                                stan::model::cons_list(stan::model::index_uni(pos_int), stan::model::nil_index_list()), 
                                ((get_base1(log_crude_event_rate,k,"log_crude_event_rate",1) - dot_product(segment(x_bar,pos_b,get_base1(s_K,k,"s_K",1)),segment(beta,pos_b,get_base1(s_K,k,"s_K",1)))) + get_base1(gamma,pos_g,"gamma",1)), 
                                "assigning variable alpha");
                    current_statement_begin__ = 715;
                    stan::math::assign(pos_g, (pos_g + 1));
                    current_statement_begin__ = 716;
                    stan::math::assign(pos_int, (pos_int + 1));
                }
                current_statement_begin__ = 718;
                stan::math::assign(pos_vars, (pos_vars + get_base1(s_vars,k,"s_vars",1)));
                current_statement_begin__ = 719;
                stan::math::assign(pos_b, (pos_b + get_base1(s_K,k,"s_K",1)));
            }

            // validate generated quantities
            current_statement_begin__ = 701;
            current_statement_begin__ = 702;
            current_statement_begin__ = 704;
            current_statement_begin__ = 705;
            current_statement_begin__ = 706;
            current_statement_begin__ = 707;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < N_has_intercept; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < Nvars; ++k_0__) {
            vars__.push_back(aux[k_0__]);
            }
        vars__.push_back(pos_b);
        vars__.push_back(pos_vars);
        vars__.push_back(pos_g);
        vars__.push_back(pos_int);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_mstte";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nK; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Nvars; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_coefs" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= nK; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= Nvars; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "coefs" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N_has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Nvars; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pos_b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pos_vars";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pos_g";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pos_int";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nK; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Nvars; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_coefs" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= nK; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= Nvars; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "coefs" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N_has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Nvars; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pos_b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pos_vars";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pos_g";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pos_int";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_mstte_namespace::model_mstte stan_model;


#endif
