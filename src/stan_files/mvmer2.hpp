/*
    mstte is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mstte is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mstte.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_mvmer2_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mvmer2");
    reader.add_event(1775, 1773, "end", "model_mvmer2");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_beta_z(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                   const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 16;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 16;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 17;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 18;
            return stan::math::promote_scalar<fun_return_scalar_t__>(square(eta));
        } else {
            current_statement_begin__ = 19;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_beta_z_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                   const int& link, std::ostream* pstream__) const {
        return linkinv_beta_z(eta, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_beta(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 31;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 31;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 32;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 33;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 34;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(0.5,divide(stan::math::atan(eta),stan::math::pi())));
        } else if (as_bool(logical_eq(link,5))) {
            current_statement_begin__ = 35;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,6))) {
            current_statement_begin__ = 36;
            return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(1,inv_cloglog(minus(eta))));
        } else {
            current_statement_begin__ = 37;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 38;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_beta_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) const {
        return linkinv_beta(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_beta_z(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_z,
              const int& link,
              const int& link_phi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 52;
        validate_non_negative_index("ll", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);
        current_statement_begin__ = 53;
        validate_non_negative_index("mu", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::assign(mu,linkinv_beta(eta,link, pstream__));
        current_statement_begin__ = 54;
        validate_non_negative_index("mu_z", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu_z(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) mu_z;  // dummy to suppress unused var warning

        stan::math::initialize(mu_z, DUMMY_VAR__);
        stan::math::fill(mu_z,DUMMY_VAR__);
        stan::math::assign(mu_z,linkinv_beta_z(eta_z,link_phi, pstream__));


        current_statement_begin__ = 55;
        for (int n = 1; n <= rows(y); ++n) {

            current_statement_begin__ = 56;
            stan::model::assign(ll, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        beta_log(get_base1(y,n,"y",1),(get_base1(mu,n,"mu",1) * get_base1(mu_z,n,"mu_z",1)),((1 - get_base1(mu,n,"mu",1)) * get_base1(mu_z,n,"mu_z",1))), 
                        "assigning variable ll");
        }
        current_statement_begin__ = 58;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_beta_z_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_z,
              const int& link,
              const int& link_phi, std::ostream* pstream__) const {
        return pw_beta_z(y, eta, eta_z, link, link_phi, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_binom(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 69;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 69;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 70;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 71;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(divide(stan::math::atan(eta),stan::math::pi()),0.5));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 72;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,5))) {
            current_statement_begin__ = 73;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else {
            current_statement_begin__ = 74;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 75;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_binom_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_binom(eta, link, pstream__);
    }
};

template <typename T2__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T2__, T_lp__>::type
ll_binom_lp(const std::vector<int>& y,
                const std::vector<int>& trials,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
                const int& link, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 87;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 87;
            lp_accum__.add(binomial_logit_log(y,trials,eta));
        } else if (as_bool(logical_lt(link,4))) {
            current_statement_begin__ = 88;
            lp_accum__.add(binomial_log(y,trials,linkinv_binom(eta,link, pstream__)));
        } else if (as_bool(logical_eq(link,4))) {

            current_statement_begin__ = 90;
            for (int n = 1; n <= num_elements(y); ++n) {

                current_statement_begin__ = 91;
                lp_accum__.add((get_base1(y,n,"y",1) * get_base1(eta,n,"eta",1)));
                current_statement_begin__ = 92;
                lp_accum__.add(((get_base1(trials,n,"trials",1) - get_base1(y,n,"y",1)) * log1m_exp(get_base1(eta,n,"eta",1))));
                current_statement_begin__ = 93;
                lp_accum__.add(binomial_coefficient_log(get_base1(trials,n,"trials",1),get_base1(y,n,"y",1)));
            }
        } else if (as_bool(logical_eq(link,5))) {

            current_statement_begin__ = 97;
            for (int n = 1; n <= num_elements(y); ++n) {
                {
                current_statement_begin__ = 98;
                local_scalar_t__ neg_exp_eta;
                (void) neg_exp_eta;  // dummy to suppress unused var warning

                stan::math::initialize(neg_exp_eta, DUMMY_VAR__);
                stan::math::fill(neg_exp_eta,DUMMY_VAR__);
                stan::math::assign(neg_exp_eta,-(stan::math::exp(get_base1(eta,n,"eta",1))));


                current_statement_begin__ = 99;
                lp_accum__.add((get_base1(y,n,"y",1) * log1m_exp(neg_exp_eta)));
                current_statement_begin__ = 100;
                lp_accum__.add(((get_base1(trials,n,"trials",1) - get_base1(y,n,"y",1)) * neg_exp_eta));
                current_statement_begin__ = 101;
                lp_accum__.add(binomial_coefficient_log(get_base1(trials,n,"trials",1),get_base1(y,n,"y",1)));
                }
            }
        } else {
            current_statement_begin__ = 104;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 105;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_binom_lp_functor__ {
    template <typename T2__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T2__, T_lp__>::type
    operator()(const std::vector<int>& y,
                const std::vector<int>& trials,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
                const int& link, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_binom_lp(y, trials, eta, link, lp__, lp_accum__, pstream__);
    }
};

template <typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,1>
pw_binom(const std::vector<int>& y,
             const std::vector<int>& trials,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 116;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 117;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 118;
        if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 119;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 120;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            binomial_logit_log(get_base1(y,n,"y",1),get_base1(trials,n,"trials",1),get_base1(eta,n,"eta",1)), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_lte(link,5))) {
            {
            current_statement_begin__ = 123;
            validate_non_negative_index("pi", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(N));
            (void) pi;  // dummy to suppress unused var warning

            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi,DUMMY_VAR__);
            stan::math::assign(pi,linkinv_binom(eta,link, pstream__));


            current_statement_begin__ = 124;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 124;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            binomial_log(get_base1(y,n,"y",1),get_base1(trials,n,"trials",1),get_base1(pi,n,"pi",1)), 
                            "assigning variable ll");
            }
            }
        } else {
            current_statement_begin__ = 126;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 127;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_binom_functor__ {
    template <typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
             const std::vector<int>& trials,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
             const int& link, std::ostream* pstream__) const {
        return pw_binom(y, trials, eta, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_bern(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 139;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 139;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 140;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 141;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(divide(stan::math::atan(eta),stan::math::pi()),0.5));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 142;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,5))) {
            current_statement_begin__ = 143;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else {
            current_statement_begin__ = 144;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 145;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_bern_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                 const int& link, std::ostream* pstream__) const {
        return linkinv_bern(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
ll_bern_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
               const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
               const int& link,
               const std::vector<int>& N, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 158;
        if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 159;
            lp_accum__.add(logistic_ccdf_log(eta0,0,1));
            current_statement_begin__ = 160;
            lp_accum__.add(logistic_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,2))) {

            current_statement_begin__ = 163;
            lp_accum__.add(normal_ccdf_log(eta0,0,1));
            current_statement_begin__ = 164;
            lp_accum__.add(normal_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,3))) {

            current_statement_begin__ = 167;
            lp_accum__.add(cauchy_ccdf_log(eta0,0,1));
            current_statement_begin__ = 168;
            lp_accum__.add(cauchy_cdf_log(eta1,0,1));
        } else if (as_bool(logical_eq(link,4))) {

            current_statement_begin__ = 171;
            lp_accum__.add(log1m_exp(eta0));
            current_statement_begin__ = 172;
            lp_accum__.add(eta1);
        } else if (as_bool(logical_eq(link,5))) {

            current_statement_begin__ = 175;
            lp_accum__.add(log1m_exp(minus(stan::math::exp(eta1))));
            current_statement_begin__ = 176;
            lp_accum__.add(minus(stan::math::exp(eta0)));
        } else {
            current_statement_begin__ = 178;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 179;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_bern_lp_functor__ {
    template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
               const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
               const int& link,
               const std::vector<int>& N, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_bern_lp(eta0, eta1, link, N, lp__, lp_accum__, pstream__);
    }
};

template <typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
pw_bern(const int& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 192;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 193;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 194;
        if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 195;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 195;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            bernoulli_logit_log(y,get_base1(eta,n,"eta",1)), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_lte(link,5))) {
            {
            current_statement_begin__ = 198;
            validate_non_negative_index("pi", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(N));
            (void) pi;  // dummy to suppress unused var warning

            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi,DUMMY_VAR__);
            stan::math::assign(pi,linkinv_bern(eta,link, pstream__));


            current_statement_begin__ = 199;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 199;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            bernoulli_log(y,get_base1(pi,n,"pi",1)), 
                            "assigning variable ll");
            }
            }
        } else {
            current_statement_begin__ = 201;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 202;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_bern_functor__ {
    template <typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
    operator()(const int& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) const {
        return pw_bern(y, eta, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_gauss(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 213;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 213;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 214;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 215;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(eta));
        } else {
            current_statement_begin__ = 216;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 217;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_gauss_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_gauss(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_gauss(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& sigma,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 228;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract((-(0.5) * stan::math::log((6.2831853071795862 * sigma))),multiply(0.5,square(divide(subtract(y,linkinv_gauss(eta,link, pstream__)),sigma)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_gauss_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& sigma,
             const int& link, std::ostream* pstream__) const {
        return pw_gauss(y, eta, sigma, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_gamma(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 240;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 240;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 241;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 242;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(eta));
        } else {
            current_statement_begin__ = 243;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 244;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_gamma_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_gamma(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
GammaReg(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link,
             const T4__& sum_log_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 259;
        local_scalar_t__ ret;
        (void) ret;  // dummy to suppress unused var warning

        stan::math::initialize(ret, DUMMY_VAR__);
        stan::math::fill(ret,DUMMY_VAR__);
        stan::math::assign(ret,((rows(y) * ((shape * stan::math::log(shape)) - stan::math::lgamma(shape))) + ((shape - 1) * sum_log_y)));


        current_statement_begin__ = 261;
        if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 262;
            stan::math::assign(ret, (ret - ((shape * sum(eta)) + (shape * sum(elt_divide(y,stan::math::exp(eta)))))));
        } else if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 264;
            stan::math::assign(ret, (ret - ((shape * sum(stan::math::log(eta))) + (shape * sum(elt_divide(y,eta))))));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 266;
            stan::math::assign(ret, (ret + ((shape * sum(stan::math::log(eta))) - (shape * dot_product(eta,y)))));
        } else {
            current_statement_begin__ = 267;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 268;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct GammaReg_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link,
             const T4__& sum_log_y, std::ostream* pstream__) const {
        return GammaReg(y, eta, shape, link, sum_log_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_gamma(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 280;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 281;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 282;
        if (as_bool(logical_eq(link,3))) {

            current_statement_begin__ = 283;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 284;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            gamma_log(get_base1(y,n,"y",1),shape,(shape * get_base1(eta,n,"eta",1))), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_eq(link,2))) {

            current_statement_begin__ = 288;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 289;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            gamma_log(get_base1(y,n,"y",1),shape,(shape / stan::math::exp(get_base1(eta,n,"eta",1)))), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 293;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 294;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            gamma_log(get_base1(y,n,"y",1),shape,(shape / get_base1(eta,n,"eta",1))), 
                            "assigning variable ll");
            }
        } else {
            current_statement_begin__ = 297;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 298;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_gamma_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link, std::ostream* pstream__) const {
        return pw_gamma(y, eta, shape, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 309;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 309;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 310;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 311;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(eta));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 312;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_sqrt(eta));
        } else {
            current_statement_begin__ = 313;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 314;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_inv_gaussian_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const int& link, std::ostream* pstream__) const {
        return linkinv_inv_gaussian(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                 const T2__& lambda,
                 const T3__& sum_log_y,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 329;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((0.5 * rows(y)) * stan::math::log((lambda / 6.2831853071795862))) - (1.5 * sum_log_y)) - ((0.5 * lambda) * dot_self(elt_divide(subtract(y,mu),elt_multiply(mu,sqrt_y))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_gaussian_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                 const T2__& lambda,
                 const T3__& sum_log_y,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) const {
        return inv_gaussian(y, mu, lambda, sum_log_y, sqrt_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
pw_inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                    const T2__& lambda,
                    const int& link,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& log_y,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 347;
        validate_non_negative_index("mu", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::assign(mu,linkinv_inv_gaussian(eta,link, pstream__));


        current_statement_begin__ = 348;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(multiply((-(0.5) * lambda),square(elt_divide(subtract(y,mu),elt_multiply(mu,sqrt_y)))),(0.5 * stan::math::log((lambda / 6.2831853071795862)))),multiply(1.5,log_y)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_inv_gaussian_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                    const T2__& lambda,
                    const int& link,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& log_y,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) const {
        return pw_inv_gaussian(y, eta, lambda, link, log_y, sqrt_y, pstream__);
    }
};

template <typename T0__, typename T1__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__>::type
inv_gaussian_rng(const T0__& mu,
                     const T1__& lambda, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 362;
        local_scalar_t__ mu2;
        (void) mu2;  // dummy to suppress unused var warning

        stan::math::initialize(mu2, DUMMY_VAR__);
        stan::math::fill(mu2,DUMMY_VAR__);
        stan::math::assign(mu2,square(mu));
        current_statement_begin__ = 363;
        local_scalar_t__ z;
        (void) z;  // dummy to suppress unused var warning

        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z,DUMMY_VAR__);
        stan::math::assign(z,uniform_rng(0,1, base_rng__));
        current_statement_begin__ = 364;
        local_scalar_t__ y;
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);
        stan::math::assign(y,square(normal_rng(0,1, base_rng__)));
        current_statement_begin__ = 365;
        local_scalar_t__ x;
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::assign(x,(mu + (((mu2 * y) - (mu * stan::math::sqrt(((((4 * mu) * lambda) * y) + (mu2 * square(y)))))) / (2 * lambda))));


        current_statement_begin__ = 367;
        if (as_bool(logical_lte(z,(mu / (mu + x))))) {
            current_statement_begin__ = 367;
            return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        } else {
            current_statement_begin__ = 368;
            return stan::math::promote_scalar<fun_return_scalar_t__>((mu2 / x));
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_gaussian_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mu,
                     const T1__& lambda, RNG& base_rng__, std::ostream* pstream__) const {
        return inv_gaussian_rng(mu, lambda, base_rng__, pstream__);
    }
};

template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
make_theta_L(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 391;
        validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
        (void) theta_L;  // dummy to suppress unused var warning

        stan::math::initialize(theta_L, DUMMY_VAR__);
        stan::math::fill(theta_L,DUMMY_VAR__);
        current_statement_begin__ = 392;
        int zeta_mark(0);
        (void) zeta_mark;  // dummy to suppress unused var warning

        stan::math::fill(zeta_mark, std::numeric_limits<int>::min());
        stan::math::assign(zeta_mark,1);
        current_statement_begin__ = 393;
        int rho_mark(0);
        (void) rho_mark;  // dummy to suppress unused var warning

        stan::math::fill(rho_mark, std::numeric_limits<int>::min());
        stan::math::assign(rho_mark,1);
        current_statement_begin__ = 394;
        int z_T_mark(0);
        (void) z_T_mark;  // dummy to suppress unused var warning

        stan::math::fill(z_T_mark, std::numeric_limits<int>::min());
        stan::math::assign(z_T_mark,1);
        current_statement_begin__ = 395;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning

        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);


        current_statement_begin__ = 398;
        for (int i = 1; i <= size(p); ++i) {
            {
            current_statement_begin__ = 399;
            int nc(0);
            (void) nc;  // dummy to suppress unused var warning

            stan::math::fill(nc, std::numeric_limits<int>::min());
            stan::math::assign(nc,get_base1(p,i,"p",1));


            current_statement_begin__ = 400;
            if (as_bool(logical_eq(nc,1))) {

                current_statement_begin__ = 401;
                stan::model::assign(theta_L, 
                            stan::model::cons_list(stan::model::index_uni(theta_L_mark), stan::model::nil_index_list()), 
                            ((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion), 
                            "assigning variable theta_L");
                current_statement_begin__ = 403;
                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
            } else {
                {
                current_statement_begin__ = 406;
                validate_non_negative_index("T_i", "nc", nc);
                validate_non_negative_index("T_i", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
                (void) T_i;  // dummy to suppress unused var warning

                stan::math::initialize(T_i, DUMMY_VAR__);
                stan::math::fill(T_i,DUMMY_VAR__);
                current_statement_begin__ = 407;
                local_scalar_t__ std_dev;
                (void) std_dev;  // dummy to suppress unused var warning

                stan::math::initialize(std_dev, DUMMY_VAR__);
                stan::math::fill(std_dev,DUMMY_VAR__);
                current_statement_begin__ = 408;
                local_scalar_t__ T21;
                (void) T21;  // dummy to suppress unused var warning

                stan::math::initialize(T21, DUMMY_VAR__);
                stan::math::fill(T21,DUMMY_VAR__);
                current_statement_begin__ = 409;
                local_scalar_t__ trace_T_i;
                (void) trace_T_i;  // dummy to suppress unused var warning

                stan::math::initialize(trace_T_i, DUMMY_VAR__);
                stan::math::fill(trace_T_i,DUMMY_VAR__);
                stan::math::assign(trace_T_i,(square(((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion)) * nc));
                current_statement_begin__ = 410;
                validate_non_negative_index("pi", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(nc));
                (void) pi;  // dummy to suppress unused var warning

                stan::math::initialize(pi, DUMMY_VAR__);
                stan::math::fill(pi,DUMMY_VAR__);
                stan::math::assign(pi,segment(zeta,zeta_mark,nc));


                current_statement_begin__ = 411;
                stan::math::assign(pi, divide(pi, sum(pi)));
                current_statement_begin__ = 414;
                stan::math::assign(zeta_mark, (zeta_mark + nc));
                current_statement_begin__ = 415;
                stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,1,"pi",1) * trace_T_i)));
                current_statement_begin__ = 416;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            std_dev, 
                            "assigning variable T_i");
                current_statement_begin__ = 419;
                stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,2,"pi",1) * trace_T_i)));
                current_statement_begin__ = 420;
                stan::math::assign(T21, ((2.0 * get_base1(rho,rho_mark,"rho",1)) - 1.0));
                current_statement_begin__ = 421;
                stan::math::assign(rho_mark, (rho_mark + 1));
                current_statement_begin__ = 422;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (std_dev * stan::math::sqrt((1.0 - square(T21)))), 
                            "assigning variable T_i");
                current_statement_begin__ = 423;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (std_dev * T21), 
                            "assigning variable T_i");
                current_statement_begin__ = 425;
                for (int r = 2; r <= (nc - 1); ++r) {
                    {
                    current_statement_begin__ = 426;
                    int rp1(0);
                    (void) rp1;  // dummy to suppress unused var warning

                    stan::math::fill(rp1, std::numeric_limits<int>::min());
                    stan::math::assign(rp1,(r + 1));
                    current_statement_begin__ = 427;
                    validate_non_negative_index("T_row", "r", r);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  T_row(static_cast<Eigen::VectorXd::Index>(r));
                    (void) T_row;  // dummy to suppress unused var warning

                    stan::math::initialize(T_row, DUMMY_VAR__);
                    stan::math::fill(T_row,DUMMY_VAR__);
                    stan::math::assign(T_row,segment(z_T,z_T_mark,r));
                    current_statement_begin__ = 428;
                    local_scalar_t__ scale_factor;
                    (void) scale_factor;  // dummy to suppress unused var warning

                    stan::math::initialize(scale_factor, DUMMY_VAR__);
                    stan::math::fill(scale_factor,DUMMY_VAR__);
                    stan::math::assign(scale_factor,(stan::math::sqrt((get_base1(rho,rho_mark,"rho",1) / dot_self(T_row))) * std_dev));


                    current_statement_begin__ = 429;
                    stan::math::assign(z_T_mark, (z_T_mark + r));
                    current_statement_begin__ = 430;
                    stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,rp1,"pi",1) * trace_T_i)));
                    current_statement_begin__ = 431;
                    for (int c = 1; c <= r; ++c) {
                        current_statement_begin__ = 431;
                        stan::model::assign(T_i, 
                                    stan::model::cons_list(stan::model::index_uni(rp1), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(T_row,c,"T_row",1) * scale_factor), 
                                    "assigning variable T_i");
                    }
                    current_statement_begin__ = 432;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(rp1), stan::model::cons_list(stan::model::index_uni(rp1), stan::model::nil_index_list())), 
                                (stan::math::sqrt((1.0 - get_base1(rho,rho_mark,"rho",1))) * std_dev), 
                                "assigning variable T_i");
                    current_statement_begin__ = 433;
                    stan::math::assign(rho_mark, (rho_mark + 1));
                    }
                }
                current_statement_begin__ = 437;
                for (int c = 1; c <= nc; ++c) {
                    current_statement_begin__ = 437;
                    for (int r = c; r <= nc; ++r) {

                        current_statement_begin__ = 438;
                        stan::model::assign(theta_L, 
                                    stan::model::cons_list(stan::model::index_uni(theta_L_mark), stan::model::nil_index_list()), 
                                    get_base1(T_i,r,c,"T_i",1), 
                                    "assigning variable theta_L");
                        current_statement_begin__ = 439;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 443;
        return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 458;
        validate_non_negative_index("b", "rows(z_b)", rows(z_b));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>(rows(z_b)));
        (void) b;  // dummy to suppress unused var warning

        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        current_statement_begin__ = 459;
        int b_mark(0);
        (void) b_mark;  // dummy to suppress unused var warning

        stan::math::fill(b_mark, std::numeric_limits<int>::min());
        stan::math::assign(b_mark,1);
        current_statement_begin__ = 460;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning

        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);


        current_statement_begin__ = 461;
        for (int i = 1; i <= size(p); ++i) {
            {
            current_statement_begin__ = 462;
            int nc(0);
            (void) nc;  // dummy to suppress unused var warning

            stan::math::fill(nc, std::numeric_limits<int>::min());
            stan::math::assign(nc,get_base1(p,i,"p",1));


            current_statement_begin__ = 463;
            if (as_bool(logical_eq(nc,1))) {
                {
                current_statement_begin__ = 464;
                local_scalar_t__ theta_L_start;
                (void) theta_L_start;  // dummy to suppress unused var warning

                stan::math::initialize(theta_L_start, DUMMY_VAR__);
                stan::math::fill(theta_L_start,DUMMY_VAR__);
                stan::math::assign(theta_L_start,get_base1(theta_L,theta_L_mark,"theta_L",1));


                current_statement_begin__ = 465;
                for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                    current_statement_begin__ = 466;
                    stan::model::assign(b, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (theta_L_start * get_base1(z_b,s,"z_b",1)), 
                                "assigning variable b");
                }
                current_statement_begin__ = 467;
                stan::math::assign(b_mark, (b_mark + get_base1(l,i,"l",1)));
                current_statement_begin__ = 468;
                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                }
            } else {
                {
                current_statement_begin__ = 471;
                validate_non_negative_index("T_i", "nc", nc);
                validate_non_negative_index("T_i", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
                (void) T_i;  // dummy to suppress unused var warning

                stan::math::initialize(T_i, DUMMY_VAR__);
                stan::math::fill(T_i,DUMMY_VAR__);
                stan::math::assign(T_i,rep_matrix(0,nc,nc));


                current_statement_begin__ = 472;
                for (int c = 1; c <= nc; ++c) {

                    current_statement_begin__ = 473;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                get_base1(theta_L,theta_L_mark,"theta_L",1), 
                                "assigning variable T_i");
                    current_statement_begin__ = 474;
                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    current_statement_begin__ = 475;
                    for (int r = (c + 1); r <= nc; ++r) {

                        current_statement_begin__ = 476;
                        stan::model::assign(T_i, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(theta_L,theta_L_mark,"theta_L",1), 
                                    "assigning variable T_i");
                        current_statement_begin__ = 477;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    }
                }
                current_statement_begin__ = 480;
                for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                    {
                    current_statement_begin__ = 481;
                    validate_non_negative_index("temp", "nc", nc);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  temp(static_cast<Eigen::VectorXd::Index>(nc));
                    (void) temp;  // dummy to suppress unused var warning

                    stan::math::initialize(temp, DUMMY_VAR__);
                    stan::math::fill(temp,DUMMY_VAR__);
                    stan::math::assign(temp,multiply(T_i,segment(z_b,b_mark,nc)));


                    current_statement_begin__ = 482;
                    stan::math::assign(b_mark, (b_mark - 1));
                    current_statement_begin__ = 483;
                    for (int s = 1; s <= nc; ++s) {
                        current_statement_begin__ = 483;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni((b_mark + s)), stan::model::nil_index_list()), 
                                    get_base1(temp,s,"temp",1), 
                                    "assigning variable b");
                    }
                    current_statement_begin__ = 484;
                    stan::math::assign(b_mark, (b_mark + (nc + 1)));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 488;
        return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 509;
        int pos_reg(0);
        (void) pos_reg;  // dummy to suppress unused var warning

        stan::math::fill(pos_reg, std::numeric_limits<int>::min());
        stan::math::assign(pos_reg,1);
        current_statement_begin__ = 510;
        int pos_rho(0);
        (void) pos_rho;  // dummy to suppress unused var warning

        stan::math::fill(pos_rho, std::numeric_limits<int>::min());
        stan::math::assign(pos_rho,1);


        current_statement_begin__ = 511;
        lp_accum__.add(normal_log(z_b,0,1));
        current_statement_begin__ = 512;
        lp_accum__.add(normal_log(z_T,0,1));
        current_statement_begin__ = 513;
        for (int i = 1; i <= t; ++i) {
            current_statement_begin__ = 513;
            if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                {
                current_statement_begin__ = 514;
                validate_non_negative_index("shape1", "(get_base1(p,i,\"p\",1) - 1)", (get_base1(p,i,"p",1) - 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  shape1(static_cast<Eigen::VectorXd::Index>((get_base1(p,i,"p",1) - 1)));
                (void) shape1;  // dummy to suppress unused var warning

                stan::math::initialize(shape1, DUMMY_VAR__);
                stan::math::fill(shape1,DUMMY_VAR__);
                current_statement_begin__ = 515;
                validate_non_negative_index("shape2", "(get_base1(p,i,\"p\",1) - 1)", (get_base1(p,i,"p",1) - 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  shape2(static_cast<Eigen::VectorXd::Index>((get_base1(p,i,"p",1) - 1)));
                (void) shape2;  // dummy to suppress unused var warning

                stan::math::initialize(shape2, DUMMY_VAR__);
                stan::math::fill(shape2,DUMMY_VAR__);
                current_statement_begin__ = 516;
                local_scalar_t__ nu;
                (void) nu;  // dummy to suppress unused var warning

                stan::math::initialize(nu, DUMMY_VAR__);
                stan::math::fill(nu,DUMMY_VAR__);
                stan::math::assign(nu,(get_base1(regularization,pos_reg,"regularization",1) + (0.5 * (get_base1(p,i,"p",1) - 2))));


                current_statement_begin__ = 517;
                stan::math::assign(pos_reg, (pos_reg + 1));
                current_statement_begin__ = 518;
                stan::model::assign(shape1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            nu, 
                            "assigning variable shape1");
                current_statement_begin__ = 519;
                stan::model::assign(shape2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            nu, 
                            "assigning variable shape2");
                current_statement_begin__ = 520;
                for (int j = 2; j <= (get_base1(p,i,"p",1) - 1); ++j) {

                    current_statement_begin__ = 521;
                    stan::math::assign(nu, (nu - 0.5));
                    current_statement_begin__ = 522;
                    stan::model::assign(shape1, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                (0.5 * j), 
                                "assigning variable shape1");
                    current_statement_begin__ = 523;
                    stan::model::assign(shape2, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                nu, 
                                "assigning variable shape2");
                }
                current_statement_begin__ = 525;
                lp_accum__.add(beta_log(stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(pos_rho, ((pos_rho + get_base1(p,i,"p",1)) - 2)), stan::model::nil_index_list()), "rho"),shape1,shape2));
                current_statement_begin__ = 526;
                stan::math::assign(pos_rho, (pos_rho + (get_base1(p,i,"p",1) - 1)));
                }
            }
        }
        current_statement_begin__ = 528;
        lp_accum__.add(gamma_log(zeta,delta,1));
        current_statement_begin__ = 529;
        lp_accum__.add(gamma_log(tau,shape,1));
        current_statement_begin__ = 530;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
hs_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
             const T3__& global_prior_scale,
             const T4__& error_scale,
             const T5__& c2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 546;
        int K(0);
        (void) K;  // dummy to suppress unused var warning

        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(z_beta));
        current_statement_begin__ = 547;
        validate_non_negative_index("lambda", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda;  // dummy to suppress unused var warning

        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda,DUMMY_VAR__);
        stan::math::assign(lambda,elt_multiply(get_base1(local,1,"local",1),stan::math::sqrt(get_base1(local,2,"local",1))));
        current_statement_begin__ = 548;
        local_scalar_t__ tau;
        (void) tau;  // dummy to suppress unused var warning

        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau,DUMMY_VAR__);
        stan::math::assign(tau,(((get_base1(global,1,"global",1) * stan::math::sqrt(get_base1(global,2,"global",1))) * global_prior_scale) * error_scale));
        current_statement_begin__ = 549;
        validate_non_negative_index("lambda2", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda2(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda2;  // dummy to suppress unused var warning

        stan::math::initialize(lambda2, DUMMY_VAR__);
        stan::math::fill(lambda2,DUMMY_VAR__);
        stan::math::assign(lambda2,square(lambda));
        current_statement_begin__ = 550;
        validate_non_negative_index("lambda_tilde", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_tilde(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_tilde;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde,DUMMY_VAR__);
        stan::math::assign(lambda_tilde,stan::math::sqrt(elt_divide(multiply(c2,lambda2),add(c2,multiply(square(tau),lambda2)))));


        current_statement_begin__ = 551;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(elt_multiply(z_beta,lambda_tilde),tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hs_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
             const T3__& global_prior_scale,
             const T4__& error_scale,
             const T5__& c2, std::ostream* pstream__) const {
        return hs_prior(z_beta, global, local, global_prior_scale, error_scale, c2, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
hsplus_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
                 const T3__& global_prior_scale,
                 const T4__& error_scale,
                 const T5__& c2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 567;
        int K(0);
        (void) K;  // dummy to suppress unused var warning

        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(z_beta));
        current_statement_begin__ = 568;
        validate_non_negative_index("lambda", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda;  // dummy to suppress unused var warning

        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda,DUMMY_VAR__);
        stan::math::assign(lambda,elt_multiply(get_base1(local,1,"local",1),stan::math::sqrt(get_base1(local,2,"local",1))));
        current_statement_begin__ = 569;
        validate_non_negative_index("eta", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(K));
        (void) eta;  // dummy to suppress unused var warning

        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);
        stan::math::assign(eta,elt_multiply(get_base1(local,3,"local",1),stan::math::sqrt(get_base1(local,4,"local",1))));
        current_statement_begin__ = 570;
        local_scalar_t__ tau;
        (void) tau;  // dummy to suppress unused var warning

        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau,DUMMY_VAR__);
        stan::math::assign(tau,(((get_base1(global,1,"global",1) * stan::math::sqrt(get_base1(global,2,"global",1))) * global_prior_scale) * error_scale));
        current_statement_begin__ = 571;
        validate_non_negative_index("lambda_eta2", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_eta2(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_eta2;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_eta2, DUMMY_VAR__);
        stan::math::fill(lambda_eta2,DUMMY_VAR__);
        stan::math::assign(lambda_eta2,square(elt_multiply(lambda,eta)));
        current_statement_begin__ = 572;
        validate_non_negative_index("lambda_tilde", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_tilde(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_tilde;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde,DUMMY_VAR__);
        stan::math::assign(lambda_tilde,stan::math::sqrt(elt_divide(multiply(c2,lambda_eta2),add(c2,multiply(square(tau),lambda_eta2)))));


        current_statement_begin__ = 574;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(elt_multiply(z_beta,lambda_tilde),tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hsplus_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
                 const T3__& global_prior_scale,
                 const T4__& error_scale,
                 const T5__& c2, std::ostream* pstream__) const {
        return hsplus_prior(z_beta, global, local, global_prior_scale, error_scale, c2, pstream__);
    }
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
CFt(const T0__& z,
        const T1__& df, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 588;
        local_scalar_t__ z2;
        (void) z2;  // dummy to suppress unused var warning

        stan::math::initialize(z2, DUMMY_VAR__);
        stan::math::fill(z2,DUMMY_VAR__);
        stan::math::assign(z2,square(z));
        current_statement_begin__ = 589;
        local_scalar_t__ z3;
        (void) z3;  // dummy to suppress unused var warning

        stan::math::initialize(z3, DUMMY_VAR__);
        stan::math::fill(z3,DUMMY_VAR__);
        stan::math::assign(z3,(z2 * z));
        current_statement_begin__ = 590;
        local_scalar_t__ z5;
        (void) z5;  // dummy to suppress unused var warning

        stan::math::initialize(z5, DUMMY_VAR__);
        stan::math::fill(z5,DUMMY_VAR__);
        stan::math::assign(z5,(z2 * z3));
        current_statement_begin__ = 591;
        local_scalar_t__ z7;
        (void) z7;  // dummy to suppress unused var warning

        stan::math::initialize(z7, DUMMY_VAR__);
        stan::math::fill(z7,DUMMY_VAR__);
        stan::math::assign(z7,(z2 * z5));
        current_statement_begin__ = 592;
        local_scalar_t__ z9;
        (void) z9;  // dummy to suppress unused var warning

        stan::math::initialize(z9, DUMMY_VAR__);
        stan::math::fill(z9,DUMMY_VAR__);
        stan::math::assign(z9,(z2 * z7));
        current_statement_begin__ = 593;
        local_scalar_t__ df2;
        (void) df2;  // dummy to suppress unused var warning

        stan::math::initialize(df2, DUMMY_VAR__);
        stan::math::fill(df2,DUMMY_VAR__);
        stan::math::assign(df2,square(df));
        current_statement_begin__ = 594;
        local_scalar_t__ df3;
        (void) df3;  // dummy to suppress unused var warning

        stan::math::initialize(df3, DUMMY_VAR__);
        stan::math::fill(df3,DUMMY_VAR__);
        stan::math::assign(df3,(df2 * df));
        current_statement_begin__ = 595;
        local_scalar_t__ df4;
        (void) df4;  // dummy to suppress unused var warning

        stan::math::initialize(df4, DUMMY_VAR__);
        stan::math::fill(df4,DUMMY_VAR__);
        stan::math::assign(df4,(df2 * df2));


        current_statement_begin__ = 596;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((z + ((z3 + z) / (4 * df))) + ((((5 * z5) + (16 * z3)) + (3 * z)) / (96 * df2))) + (((((3 * z7) + (19 * z5)) + (17 * z3)) - (15 * z)) / (384 * df3))) + ((((((79 * z9) + (776 * z7)) + (1482 * z5)) - (1920 * z3)) - (945 * z)) / (92160 * df4))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CFt_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& z,
        const T1__& df, std::ostream* pstream__) const {
        return CFt(z, df, pstream__);
    }
};

std::vector<std::vector<int> >
make_V(const int& N,
           const int& t,
           const std::vector<int>& v, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 610;
        validate_non_negative_index("V", "t", t);
        validate_non_negative_index("V", "N", N);
        vector<vector<int> > V(t, (vector<int>(N, 0)));
        stan::math::fill(V, std::numeric_limits<int>::min());
        current_statement_begin__ = 611;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning

        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);


        current_statement_begin__ = 612;
        if (as_bool(logical_gt(t,0))) {
            current_statement_begin__ = 612;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 612;
                for (int i = 1; i <= t; ++i) {

                    current_statement_begin__ = 613;
                    stan::model::assign(V, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(v,pos,"v",1) + 1), 
                                "assigning variable V");
                    current_statement_begin__ = 614;
                    stan::math::assign(pos, (pos + 1));
                }
            }
        }
        current_statement_begin__ = 616;
        return stan::math::promote_scalar<fun_return_scalar_t__>(V);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_V_functor__ {
            std::vector<std::vector<int> >
    operator()(const int& N,
           const int& t,
           const std::vector<int>& v, std::ostream* pstream__) const {
        return make_V(N, t, v, pstream__);
    }
};

template <typename T2__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T5__>::type, Eigen::Dynamic,1>
csr_matrix_times_vector2(const int& m,
                             const int& n,
                             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& w,
                             const std::vector<int>& v,
                             const std::vector<int>& u,
                             const Eigen::Matrix<T5__, Eigen::Dynamic,1>& b, std::ostream* pstream__);

double
make_lower(const int& family,
               const int& link, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 650;
        if (as_bool(logical_eq(family,1))) {
            current_statement_begin__ = 650;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
        }
        current_statement_begin__ = 651;
        if (as_bool(logical_lte(family,3))) {

            current_statement_begin__ = 652;
            if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 652;
                return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
            }
            current_statement_begin__ = 653;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
        current_statement_begin__ = 655;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_lower_functor__ {
            double
    operator()(const int& family,
               const int& link, std::ostream* pstream__) const {
        return make_lower(family, link, pstream__);
    }
};

double
make_upper(const int& family,
               const int& link, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 666;
        if (as_bool((primitive_value(logical_eq(family,4)) && primitive_value(logical_eq(link,5))))) {
            current_statement_begin__ = 666;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
        current_statement_begin__ = 667;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::positive_infinity());
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_upper_functor__ {
            double
    operator()(const int& family,
               const int& link, std::ostream* pstream__) const {
        return make_upper(family, link, pstream__);
    }
};

int
get_nvars_for_hs(const int& prior_dist, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 677;
        int hs(0);
        (void) hs;  // dummy to suppress unused var warning

        stan::math::fill(hs, std::numeric_limits<int>::min());
        stan::math::assign(hs,0);


        current_statement_begin__ = 678;
        if (as_bool(logical_eq(prior_dist,3))) {
            current_statement_begin__ = 678;
            stan::math::assign(hs, 2);
        } else if (as_bool(logical_eq(prior_dist,4))) {
            current_statement_begin__ = 679;
            stan::math::assign(hs, 4);
        }
        current_statement_begin__ = 680;
        return stan::math::promote_scalar<fun_return_scalar_t__>(hs);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_nvars_for_hs_functor__ {
            int
    operator()(const int& prior_dist, std::ostream* pstream__) const {
        return get_nvars_for_hs(prior_dist, pstream__);
    }
};

double
lb(const int& intercept_type, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 691;
        local_scalar_t__ lb;
        (void) lb;  // dummy to suppress unused var warning

        stan::math::initialize(lb, DUMMY_VAR__);
        stan::math::fill(lb,DUMMY_VAR__);


        current_statement_begin__ = 692;
        if (as_bool(logical_eq(intercept_type,2))) {
            current_statement_begin__ = 692;
            stan::math::assign(lb, 0);
        } else {
            current_statement_begin__ = 693;
            stan::math::assign(lb, stan::math::negative_infinity());
        }
        current_statement_begin__ = 694;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lb);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lb_functor__ {
            double
    operator()(const int& intercept_type, std::ostream* pstream__) const {
        return lb(intercept_type, pstream__);
    }
};

double
ub(const int& intercept_type, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 697;
        local_scalar_t__ ub;
        (void) ub;  // dummy to suppress unused var warning

        stan::math::initialize(ub, DUMMY_VAR__);
        stan::math::fill(ub,DUMMY_VAR__);


        current_statement_begin__ = 698;
        if (as_bool(logical_eq(intercept_type,3))) {
            current_statement_begin__ = 698;
            stan::math::assign(ub, 0);
        } else {
            current_statement_begin__ = 699;
            stan::math::assign(ub, stan::math::positive_infinity());
        }
        current_statement_begin__ = 700;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ub);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ub_functor__ {
            double
    operator()(const int& intercept_type, std::ostream* pstream__) const {
        return ub(intercept_type, pstream__);
    }
};

std::vector<int>
lower_tri_indices(const int& dim, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 710;
        validate_non_negative_index("indices", "(dim + choose(dim,2))", (dim + choose(dim,2)));
        vector<int> indices((dim + choose(dim,2)), 0);
        stan::math::fill(indices, std::numeric_limits<int>::min());
        current_statement_begin__ = 711;
        int mark(0);
        (void) mark;  // dummy to suppress unused var warning

        stan::math::fill(mark, std::numeric_limits<int>::min());
        stan::math::assign(mark,1);


        current_statement_begin__ = 712;
        for (int r = 1; r <= dim; ++r) {

            current_statement_begin__ = 713;
            for (int c = r; c <= dim; ++c) {

                current_statement_begin__ = 714;
                stan::model::assign(indices, 
                            stan::model::cons_list(stan::model::index_uni(mark), stan::model::nil_index_list()), 
                            (((r - 1) * dim) + c), 
                            "assigning variable indices");
                current_statement_begin__ = 715;
                stan::math::assign(mark, (mark + 1));
            }
        }
        current_statement_begin__ = 718;
        return stan::math::promote_scalar<fun_return_scalar_t__>(indices);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lower_tri_indices_functor__ {
            std::vector<int>
    operator()(const int& dim, std::ostream* pstream__) const {
        return lower_tri_indices(dim, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T2__, T3__>::type
make_aux(const T0__& aux_unscaled,
             const int& prior_dist,
             const T2__& prior_mean,
             const T3__& prior_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 732;
        local_scalar_t__ aux;
        (void) aux;  // dummy to suppress unused var warning

        stan::math::initialize(aux, DUMMY_VAR__);
        stan::math::fill(aux,DUMMY_VAR__);


        current_statement_begin__ = 733;
        if (as_bool(logical_eq(prior_dist,0))) {
            current_statement_begin__ = 734;
            stan::math::assign(aux, aux_unscaled);
        } else {

            current_statement_begin__ = 736;
            stan::math::assign(aux, (prior_scale * aux_unscaled));
            current_statement_begin__ = 737;
            if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 738;
                stan::math::assign(aux, (aux + prior_mean));
            }
        }
        current_statement_begin__ = 740;
        return stan::math::promote_scalar<fun_return_scalar_t__>(aux);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_aux_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T2__, T3__>::type
    operator()(const T0__& aux_unscaled,
             const int& prior_dist,
             const T2__& prior_mean,
             const T3__& prior_scale, std::ostream* pstream__) const {
        return make_aux(aux_unscaled, prior_dist, prior_mean, prior_scale, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T12__, typename T13__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T12__, T13__>::type>::type>::type, Eigen::Dynamic,1>
make_beta(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
              const int& prior_dist,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_mean,
              const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_scale,
              const Eigen::Matrix<T4__, Eigen::Dynamic,1>& prior_df,
              const T5__& global_prior_scale,
              const std::vector<T6__>& global,
              const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& local,
              const std::vector<T8__>& ool,
              const std::vector<Eigen::Matrix<T9__, Eigen::Dynamic,1> >& mix,
              const std::vector<T10__>& aux,
              const int& family,
              const T12__& slab_scale,
              const std::vector<T13__>& caux, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T12__, T13__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 756;
        validate_non_negative_index("beta", "rows(z_beta)", rows(z_beta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(rows(z_beta)));
        (void) beta;  // dummy to suppress unused var warning

        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta,DUMMY_VAR__);


        current_statement_begin__ = 757;
        if (as_bool(logical_eq(prior_dist,0))) {
            current_statement_begin__ = 757;
            stan::math::assign(beta, z_beta);
        } else if (as_bool(logical_eq(prior_dist,1))) {
            current_statement_begin__ = 758;
            stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale),prior_mean));
        } else if (as_bool(logical_eq(prior_dist,2))) {
            current_statement_begin__ = 759;
            for (int k = 1; k <= rows(prior_mean); ++k) {

                current_statement_begin__ = 760;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            ((CFt(get_base1(z_beta,k,"z_beta",1),get_base1(prior_df,k,"prior_df",1), pstream__) * get_base1(prior_scale,k,"prior_scale",1)) + get_base1(prior_mean,k,"prior_mean",1)), 
                            "assigning variable beta");
            }
        } else if (as_bool(logical_eq(prior_dist,3))) {
            {
            current_statement_begin__ = 763;
            local_scalar_t__ c2;
            (void) c2;  // dummy to suppress unused var warning

            stan::math::initialize(c2, DUMMY_VAR__);
            stan::math::fill(c2,DUMMY_VAR__);
            stan::math::assign(c2,(square(slab_scale) * get_base1(caux,1,"caux",1)));


            current_statement_begin__ = 764;
            if (as_bool(logical_eq(family,1))) {
                current_statement_begin__ = 765;
                stan::math::assign(beta, hs_prior(z_beta,global,local,global_prior_scale,get_base1(aux,1,"aux",1),c2, pstream__));
            } else {
                current_statement_begin__ = 767;
                stan::math::assign(beta, hs_prior(z_beta,global,local,global_prior_scale,1,c2, pstream__));
            }
            }
        } else if (as_bool(logical_eq(prior_dist,4))) {
            {
            current_statement_begin__ = 770;
            local_scalar_t__ c2;
            (void) c2;  // dummy to suppress unused var warning

            stan::math::initialize(c2, DUMMY_VAR__);
            stan::math::fill(c2,DUMMY_VAR__);
            stan::math::assign(c2,(square(slab_scale) * get_base1(caux,1,"caux",1)));


            current_statement_begin__ = 771;
            if (as_bool(logical_eq(family,1))) {
                current_statement_begin__ = 772;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local,global_prior_scale,get_base1(aux,1,"aux",1),c2, pstream__));
            } else {
                current_statement_begin__ = 774;
                stan::math::assign(beta, hsplus_prior(z_beta,global,local,global_prior_scale,1,c2, pstream__));
            }
            }
        } else if (as_bool(logical_eq(prior_dist,5))) {
            current_statement_begin__ = 777;
            stan::math::assign(beta, add(prior_mean,elt_multiply(elt_multiply(prior_scale,stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_beta)));
        } else if (as_bool(logical_eq(prior_dist,6))) {
            current_statement_begin__ = 779;
            stan::math::assign(beta, add(prior_mean,elt_multiply(elt_multiply(multiply(get_base1(ool,1,"ool",1),prior_scale),stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_beta)));
        }
        current_statement_begin__ = 780;
        return stan::math::promote_scalar<fun_return_scalar_t__>(beta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_beta_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T12__, typename T13__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T12__, T13__>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
              const int& prior_dist,
              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_mean,
              const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_scale,
              const Eigen::Matrix<T4__, Eigen::Dynamic,1>& prior_df,
              const T5__& global_prior_scale,
              const std::vector<T6__>& global,
              const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& local,
              const std::vector<T8__>& ool,
              const std::vector<Eigen::Matrix<T9__, Eigen::Dynamic,1> >& mix,
              const std::vector<T10__>& aux,
              const int& family,
              const T12__& slab_scale,
              const std::vector<T13__>& caux, std::ostream* pstream__) const {
        return make_beta(z_beta, prior_dist, prior_mean, prior_scale, prior_df, global_prior_scale, global, local, ool, mix, aux, family, slab_scale, caux, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
make_b_matrix(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
                  const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
                  const std::vector<int>& p,
                  const std::vector<int>& l,
                  const int& i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 797;
        validate_non_negative_index("b_matrix", "get_base1(p,i,\"p\",1)", get_base1(p,i,"p",1));
        validate_non_negative_index("b_matrix", "get_base1(l,i,\"l\",1)", get_base1(l,i,"l",1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  b_matrix(static_cast<Eigen::VectorXd::Index>(get_base1(p,i,"p",1)),static_cast<Eigen::VectorXd::Index>(get_base1(l,i,"l",1)));
        (void) b_matrix;  // dummy to suppress unused var warning

        stan::math::initialize(b_matrix, DUMMY_VAR__);
        stan::math::fill(b_matrix,DUMMY_VAR__);
        current_statement_begin__ = 798;
        int nc(0);
        (void) nc;  // dummy to suppress unused var warning

        stan::math::fill(nc, std::numeric_limits<int>::min());
        stan::math::assign(nc,get_base1(p,i,"p",1));
        current_statement_begin__ = 799;
        int b_mark(0);
        (void) b_mark;  // dummy to suppress unused var warning

        stan::math::fill(b_mark, std::numeric_limits<int>::min());
        stan::math::assign(b_mark,1);
        current_statement_begin__ = 800;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning

        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);


        current_statement_begin__ = 801;
        if (as_bool(logical_gt(i,1))) {

            current_statement_begin__ = 802;
            for (int j = 1; j <= (i - 1); ++j) {

                current_statement_begin__ = 803;
                stan::math::assign(theta_L_mark, (theta_L_mark + (get_base1(p,j,"p",1) + choose(get_base1(p,j,"p",1),2))));
                current_statement_begin__ = 804;
                stan::math::assign(b_mark, (b_mark + (get_base1(p,j,"p",1) * get_base1(l,j,"l",1))));
            }
        }
        current_statement_begin__ = 807;
        if (as_bool(logical_eq(nc,1))) {
            {
            current_statement_begin__ = 808;
            local_scalar_t__ theta_L_start;
            (void) theta_L_start;  // dummy to suppress unused var warning

            stan::math::initialize(theta_L_start, DUMMY_VAR__);
            stan::math::fill(theta_L_start,DUMMY_VAR__);
            stan::math::assign(theta_L_start,get_base1(theta_L,theta_L_mark,"theta_L",1));


            current_statement_begin__ = 809;
            for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                current_statement_begin__ = 810;
                stan::model::assign(b_matrix, 
                            stan::model::cons_list(stan::model::index_uni(nc), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), 
                            (theta_L_start * get_base1(z_b,s,"z_b",1)), 
                            "assigning variable b_matrix");
            }
            }
        } else {
            {
            current_statement_begin__ = 813;
            validate_non_negative_index("T_i", "nc", nc);
            validate_non_negative_index("T_i", "nc", nc);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
            (void) T_i;  // dummy to suppress unused var warning

            stan::math::initialize(T_i, DUMMY_VAR__);
            stan::math::fill(T_i,DUMMY_VAR__);
            stan::math::assign(T_i,rep_matrix(0,nc,nc));


            current_statement_begin__ = 814;
            for (int c = 1; c <= nc; ++c) {

                current_statement_begin__ = 815;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                            get_base1(theta_L,theta_L_mark,"theta_L",1), 
                            "assigning variable T_i");
                current_statement_begin__ = 816;
                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                current_statement_begin__ = 817;
                for (int r = (c + 1); r <= nc; ++r) {

                    current_statement_begin__ = 818;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                get_base1(theta_L,theta_L_mark,"theta_L",1), 
                                "assigning variable T_i");
                    current_statement_begin__ = 819;
                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                }
            }
            current_statement_begin__ = 822;
            for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                {
                current_statement_begin__ = 823;
                validate_non_negative_index("temp", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  temp(static_cast<Eigen::VectorXd::Index>(nc));
                (void) temp;  // dummy to suppress unused var warning

                stan::math::initialize(temp, DUMMY_VAR__);
                stan::math::fill(temp,DUMMY_VAR__);
                stan::math::assign(temp,multiply(T_i,segment(z_b,b_mark,nc)));


                current_statement_begin__ = 824;
                stan::model::assign(b_matrix, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            temp, 
                            "assigning variable b_matrix");
                current_statement_begin__ = 825;
                stan::math::assign(b_mark, (b_mark + nc));
                }
            }
            }
        }
        current_statement_begin__ = 828;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(b_matrix));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
                  const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
                  const std::vector<int>& p,
                  const std::vector<int>& l,
                  const int& i, std::ostream* pstream__) const {
        return make_b_matrix(z_b, theta_L, p, l, i, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T5__, typename T6__, typename T7__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__>::type>::type, Eigen::Dynamic,1>
evaluate_eta(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X,
                 const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic,1> >& Z1,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& Z2,
                 const std::vector<int>& Z1_id,
                 const std::vector<int>& Z2_id,
                 const std::vector<T5__>& gamma,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& beta,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,Eigen::Dynamic>& b1Mat,
                 const Eigen::Matrix<T8__, Eigen::Dynamic,Eigen::Dynamic>& b2Mat,
                 const int& b1Mat_colshift,
                 const int& b2Mat_colshift,
                 const int& intercept_type, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 853;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(X));
        current_statement_begin__ = 854;
        int K(0);
        (void) K;  // dummy to suppress unused var warning

        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(beta));
        current_statement_begin__ = 855;
        int p1(0);
        (void) p1;  // dummy to suppress unused var warning

        stan::math::fill(p1, std::numeric_limits<int>::min());
        stan::math::assign(p1,size(Z1));
        current_statement_begin__ = 856;
        int p2(0);
        (void) p2;  // dummy to suppress unused var warning

        stan::math::fill(p2, std::numeric_limits<int>::min());
        stan::math::assign(p2,size(Z2));
        current_statement_begin__ = 857;
        validate_non_negative_index("eta", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) eta;  // dummy to suppress unused var warning

        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);


        current_statement_begin__ = 859;
        if (as_bool(logical_gt(K,0))) {
            current_statement_begin__ = 859;
            stan::math::assign(eta, multiply(X,beta));
        } else {
            current_statement_begin__ = 860;
            stan::math::assign(eta, rep_vector(0.0,N));
        }
        current_statement_begin__ = 862;
        if (as_bool(logical_gt(intercept_type,0))) {

            current_statement_begin__ = 863;
            if (as_bool(logical_eq(intercept_type,1))) {
                current_statement_begin__ = 863;
                stan::math::assign(eta, add(eta, get_base1(gamma,1,"gamma",1)));
            } else if (as_bool(logical_eq(intercept_type,2))) {
                current_statement_begin__ = 864;
                stan::math::assign(eta, add(eta, (get_base1(gamma,1,"gamma",1) - max(eta))));
            } else if (as_bool(logical_eq(intercept_type,3))) {
                current_statement_begin__ = 865;
                stan::math::assign(eta, add(eta, (get_base1(gamma,1,"gamma",1) - min(eta))));
            }
        }
        current_statement_begin__ = 868;
        if (as_bool(logical_gt(p1,0))) {

            current_statement_begin__ = 869;
            for (int k = 1; k <= p1; ++k) {
                current_statement_begin__ = 870;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 871;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "eta") + (get_base1(b1Mat,get_base1(Z1_id,n,"Z1_id",1),(k + b1Mat_colshift),"b1Mat",1) * get_base1(get_base1(Z1,k,"Z1",1),n,"Z1",2))), 
                                "assigning variable eta");
                }
            }
        }
        current_statement_begin__ = 873;
        if (as_bool(logical_gt(p2,0))) {

            current_statement_begin__ = 874;
            for (int k = 1; k <= p2; ++k) {
                current_statement_begin__ = 875;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 876;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "eta") + (get_base1(b2Mat,get_base1(Z2_id,n,"Z2_id",1),(k + b2Mat_colshift),"b2Mat",1) * get_base1(get_base1(Z2,k,"Z2",1),n,"Z2",2))), 
                                "assigning variable eta");
                }
            }
        }
        current_statement_begin__ = 879;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct evaluate_eta_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T5__, typename T6__, typename T7__, typename T8__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X,
                 const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic,1> >& Z1,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& Z2,
                 const std::vector<int>& Z1_id,
                 const std::vector<int>& Z2_id,
                 const std::vector<T5__>& gamma,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& beta,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,Eigen::Dynamic>& b1Mat,
                 const Eigen::Matrix<T8__, Eigen::Dynamic,Eigen::Dynamic>& b2Mat,
                 const int& b1Mat_colshift,
                 const int& b2Mat_colshift,
                 const int& intercept_type, std::ostream* pstream__) const {
        return evaluate_eta(X, Z1, Z2, Z1_id, Z2_id, gamma, beta, b1Mat, b2Mat, b1Mat_colshift, b2Mat_colshift, intercept_type, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_count(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 890;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 890;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 891;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 892;
            return stan::math::promote_scalar<fun_return_scalar_t__>(square(eta));
        } else {
            current_statement_begin__ = 893;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 894;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_count_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_count(eta, link, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
evaluate_mu(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                const int& family,
                const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 907;
        validate_non_negative_index("mu", "rows(eta)", rows(eta));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(eta)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);


        current_statement_begin__ = 908;
        if (as_bool(logical_eq(family,1))) {
            current_statement_begin__ = 909;
            stan::math::assign(mu, linkinv_gauss(eta,link, pstream__));
        } else if (as_bool(logical_eq(family,2))) {
            current_statement_begin__ = 911;
            stan::math::assign(mu, linkinv_gamma(eta,link, pstream__));
        } else if (as_bool(logical_eq(family,3))) {
            current_statement_begin__ = 913;
            stan::math::assign(mu, linkinv_inv_gaussian(eta,link, pstream__));
        } else if (as_bool(logical_eq(family,4))) {
            current_statement_begin__ = 915;
            stan::math::assign(mu, linkinv_bern(eta,link, pstream__));
        } else if (as_bool(logical_eq(family,5))) {
            current_statement_begin__ = 917;
            stan::math::assign(mu, linkinv_binom(eta,link, pstream__));
        } else if (as_bool((primitive_value((primitive_value(logical_eq(family,6)) || primitive_value(logical_eq(family,7)))) || primitive_value(logical_eq(family,8))))) {
            current_statement_begin__ = 919;
            stan::math::assign(mu, linkinv_count(eta,link, pstream__));
        }
        current_statement_begin__ = 920;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct evaluate_mu_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                const int& family,
                const int& link, std::ostream* pstream__) const {
        return evaluate_mu(eta, family, link, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T6__, typename T7__, typename T8__, typename T_lp__, typename T_lp_accum__>
void
glm_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y_real,
           const std::vector<int>& y_integer,
           const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
           const std::vector<T3__>& aux,
           const int& family,
           const int& link,
           const T6__& sum_log_y,
           const Eigen::Matrix<T7__, Eigen::Dynamic,1>& sqrt_y,
           const Eigen::Matrix<T8__, Eigen::Dynamic,1>& log_y, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 934;
        if (as_bool(logical_eq(family,1))) {

            current_statement_begin__ = 935;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 935;
                lp_accum__.add(normal_log(y_real,eta,get_base1(aux,1,"aux",1)));
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 936;
                lp_accum__.add(lognormal_log(y_real,eta,get_base1(aux,1,"aux",1)));
            } else {
                current_statement_begin__ = 937;
                lp_accum__.add(normal_log(y_real,inv(eta),get_base1(aux,1,"aux",1)));
            }
        } else if (as_bool(logical_eq(family,2))) {

            current_statement_begin__ = 940;
            lp_accum__.add(GammaReg(y_real,eta,get_base1(aux,1,"aux",1),link,sum_log_y, pstream__));
        } else if (as_bool(logical_eq(family,3))) {

            current_statement_begin__ = 943;
            lp_accum__.add(inv_gaussian(y_real,linkinv_inv_gaussian(eta,link, pstream__),get_base1(aux,1,"aux",1),sum_log_y,sqrt_y, pstream__));
        } else if (as_bool(logical_eq(family,4))) {

            current_statement_begin__ = 947;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 947;
                lp_accum__.add(bernoulli_logit_log(y_integer,eta));
            } else {
                current_statement_begin__ = 948;
                lp_accum__.add(bernoulli_log(y_integer,linkinv_bern(eta,link, pstream__)));
            }
        } else if (as_bool(logical_eq(family,5))) {

            current_statement_begin__ = 951;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Binomial with >1 trials not allowed.";
            throw std::domain_error(errmsg_stream__.str());
        } else if (as_bool((primitive_value(logical_eq(family,6)) || primitive_value(logical_eq(family,8))))) {

            current_statement_begin__ = 954;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 954;
                lp_accum__.add(poisson_log_log(y_integer,eta));
            } else {
                current_statement_begin__ = 955;
                lp_accum__.add(poisson_log(y_integer,linkinv_count(eta,link, pstream__)));
            }
        } else if (as_bool(logical_eq(family,7))) {

            current_statement_begin__ = 958;
            if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 958;
                lp_accum__.add(neg_binomial_2_log_log(y_integer,eta,get_base1(aux,1,"aux",1)));
            } else {
                current_statement_begin__ = 959;
                lp_accum__.add(neg_binomial_2_log(y_integer,linkinv_count(eta,link, pstream__),get_base1(aux,1,"aux",1)));
            }
        } else {
            current_statement_begin__ = 961;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid family.";
            throw std::domain_error(errmsg_stream__.str());
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct glm_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T6__, typename T7__, typename T8__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y_real,
           const std::vector<int>& y_integer,
           const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
           const std::vector<T3__>& aux,
           const int& family,
           const int& link,
           const T6__& sum_log_y,
           const Eigen::Matrix<T7__, Eigen::Dynamic,1>& sqrt_y,
           const Eigen::Matrix<T8__, Eigen::Dynamic,1>& log_y, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return glm_lp(y_real, y_integer, eta, aux, family, link, sum_log_y, sqrt_y, log_y, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T_lp__, typename T_lp_accum__>
void
beta_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
            const int& prior_dist,
            const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_scale,
            const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_df,
            const T4__& global_prior_df,
            const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic,1> >& local,
            const std::vector<T6__>& global,
            const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& mix,
            const std::vector<T8__>& one_over_lambda,
            const T9__& slab_df,
            const std::vector<T10__>& caux, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__, T10__, T_lp__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 982;
        if (as_bool(logical_eq(prior_dist,1))) {
            current_statement_begin__ = 982;
            lp_accum__.add(normal_log(z_beta,0,1));
        } else if (as_bool(logical_eq(prior_dist,2))) {
            current_statement_begin__ = 983;
            lp_accum__.add(normal_log(z_beta,0,1));
        } else if (as_bool(logical_eq(prior_dist,3))) {

            current_statement_begin__ = 985;
            lp_accum__.add(normal_log(z_beta,0,1));
            current_statement_begin__ = 986;
            lp_accum__.add(normal_log(get_base1(local,1,"local",1),0,1));
            current_statement_begin__ = 987;
            lp_accum__.add(inv_gamma_log(get_base1(local,2,"local",1),multiply(0.5,prior_df),multiply(0.5,prior_df)));
            current_statement_begin__ = 988;
            lp_accum__.add(normal_log(get_base1(global,1,"global",1),0,1));
            current_statement_begin__ = 989;
            lp_accum__.add(inv_gamma_log(get_base1(global,2,"global",1),(0.5 * global_prior_df),(0.5 * global_prior_df)));
            current_statement_begin__ = 990;
            lp_accum__.add(inv_gamma_log(caux,(0.5 * slab_df),(0.5 * slab_df)));
        } else if (as_bool(logical_eq(prior_dist,4))) {

            current_statement_begin__ = 993;
            lp_accum__.add(normal_log(z_beta,0,1));
            current_statement_begin__ = 994;
            lp_accum__.add(normal_log(get_base1(local,1,"local",1),0,1));
            current_statement_begin__ = 995;
            lp_accum__.add(inv_gamma_log(get_base1(local,2,"local",1),multiply(0.5,prior_df),multiply(0.5,prior_df)));
            current_statement_begin__ = 996;
            lp_accum__.add(normal_log(get_base1(local,3,"local",1),0,1));
            current_statement_begin__ = 998;
            lp_accum__.add(inv_gamma_log(get_base1(local,4,"local",1),multiply(0.5,prior_scale),multiply(0.5,prior_scale)));
            current_statement_begin__ = 999;
            lp_accum__.add(normal_log(get_base1(global,1,"global",1),0,1));
            current_statement_begin__ = 1000;
            lp_accum__.add(inv_gamma_log(get_base1(global,2,"global",1),(0.5 * global_prior_df),(0.5 * global_prior_df)));
            current_statement_begin__ = 1001;
            lp_accum__.add(inv_gamma_log(caux,(0.5 * slab_df),(0.5 * slab_df)));
        } else if (as_bool(logical_eq(prior_dist,5))) {

            current_statement_begin__ = 1004;
            lp_accum__.add(normal_log(z_beta,0,1));
            current_statement_begin__ = 1005;
            lp_accum__.add(exponential_log(get_base1(mix,1,"mix",1),1));
        } else if (as_bool(logical_eq(prior_dist,6))) {

            current_statement_begin__ = 1008;
            lp_accum__.add(normal_log(z_beta,0,1));
            current_statement_begin__ = 1009;
            lp_accum__.add(exponential_log(get_base1(mix,1,"mix",1),1));
            current_statement_begin__ = 1010;
            lp_accum__.add(chi_square_log(get_base1(one_over_lambda,1,"one_over_lambda",1),get_base1(prior_df,1,"prior_df",1)));
        } else if (as_bool(logical_eq(prior_dist,7))) {

            current_statement_begin__ = 1013;
            lp_accum__.add(normal_log(z_beta,0,1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct beta_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
            const int& prior_dist,
            const Eigen::Matrix<T2__, Eigen::Dynamic,1>& prior_scale,
            const Eigen::Matrix<T3__, Eigen::Dynamic,1>& prior_df,
            const T4__& global_prior_df,
            const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic,1> >& local,
            const std::vector<T6__>& global,
            const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& mix,
            const std::vector<T8__>& one_over_lambda,
            const T9__& slab_df,
            const std::vector<T10__>& caux, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return beta_lp(z_beta, prior_dist, prior_scale, prior_df, global_prior_df, local, global, mix, one_over_lambda, slab_df, caux, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
void
gamma_lp(const T0__& gamma,
             const int& dist,
             const T2__& mean,
             const T3__& scale,
             const T4__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1029;
        if (as_bool(logical_eq(dist,1))) {
            current_statement_begin__ = 1030;
            lp_accum__.add(normal_log(gamma,mean,scale));
        } else if (as_bool(logical_eq(dist,2))) {
            current_statement_begin__ = 1032;
            lp_accum__.add(student_t_log(gamma,df,mean,scale));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gamma_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const T0__& gamma,
             const int& dist,
             const T2__& mean,
             const T3__& scale,
             const T4__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return gamma_lp(gamma, dist, mean, scale, df, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
void
aux_lp(const T0__& aux_unscaled,
           const int& dist,
           const T2__& scale,
           const T3__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1047;
        if (as_bool((primitive_value(logical_gt(dist,0)) && primitive_value(logical_gt(scale,0))))) {

            current_statement_begin__ = 1048;
            if (as_bool(logical_eq(dist,1))) {
                current_statement_begin__ = 1049;
                lp_accum__.add(normal_log(aux_unscaled,0,1));
            } else if (as_bool(logical_eq(dist,2))) {
                current_statement_begin__ = 1051;
                lp_accum__.add(student_t_log(aux_unscaled,df,0,1));
            } else {
                current_statement_begin__ = 1053;
                lp_accum__.add(exponential_log(aux_unscaled,1));
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct aux_lp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const T0__& aux_unscaled,
           const int& dist,
           const T2__& scale,
           const T3__& df, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return aux_lp(aux_unscaled, dist, scale, df, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T1__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__>::type
mean_PPD_rng(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& mu,
                 const std::vector<T1__>& aux,
                 const int& family, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1069;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(mu));
        current_statement_begin__ = 1070;
        local_scalar_t__ mean_PPD;
        (void) mean_PPD;  // dummy to suppress unused var warning

        stan::math::initialize(mean_PPD, DUMMY_VAR__);
        stan::math::fill(mean_PPD,DUMMY_VAR__);
        stan::math::assign(mean_PPD,0);


        current_statement_begin__ = 1071;
        if (as_bool(logical_eq(family,1))) {

            current_statement_begin__ = 1072;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1073;
                stan::math::assign(mean_PPD, (mean_PPD + normal_rng(get_base1(mu,n,"mu",1),get_base1(aux,1,"aux",1), base_rng__)));
            }
        } else if (as_bool(logical_eq(family,2))) {

            current_statement_begin__ = 1076;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1077;
                stan::math::assign(mean_PPD, (mean_PPD + gamma_rng(get_base1(aux,1,"aux",1),(get_base1(aux,1,"aux",1) / get_base1(mu,n,"mu",1)), base_rng__)));
            }
        } else if (as_bool(logical_eq(family,3))) {

            current_statement_begin__ = 1080;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1081;
                stan::math::assign(mean_PPD, (mean_PPD + inv_gaussian_rng(get_base1(mu,n,"mu",1),get_base1(aux,1,"aux",1), base_rng__, pstream__)));
            }
        } else if (as_bool(logical_eq(family,4))) {

            current_statement_begin__ = 1084;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1085;
                stan::math::assign(mean_PPD, (mean_PPD + bernoulli_rng(get_base1(mu,n,"mu",1), base_rng__)));
            }
        } else if (as_bool(logical_eq(family,5))) {

            current_statement_begin__ = 1088;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Binomial with >1 trials not allowed.";
            throw std::domain_error(errmsg_stream__.str());
        } else if (as_bool((primitive_value(logical_eq(family,6)) || primitive_value(logical_eq(family,8))))) {
            {
            current_statement_begin__ = 1091;
            local_scalar_t__ poisson_max;
            (void) poisson_max;  // dummy to suppress unused var warning

            stan::math::initialize(poisson_max, DUMMY_VAR__);
            stan::math::fill(poisson_max,DUMMY_VAR__);
            stan::math::assign(poisson_max,pow(2.0,30.0));


            current_statement_begin__ = 1092;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 1093;
                if (as_bool(logical_lt(get_base1(mu,n,"mu",1),poisson_max))) {
                    current_statement_begin__ = 1094;
                    stan::math::assign(mean_PPD, (mean_PPD + poisson_rng(get_base1(mu,n,"mu",1), base_rng__)));
                } else {
                    current_statement_begin__ = 1096;
                    stan::math::assign(mean_PPD, (mean_PPD + normal_rng(get_base1(mu,n,"mu",1),stan::math::sqrt(get_base1(mu,n,"mu",1)), base_rng__)));
                }
            }
            }
        } else if (as_bool(logical_eq(family,7))) {
            {
            current_statement_begin__ = 1100;
            local_scalar_t__ poisson_max;
            (void) poisson_max;  // dummy to suppress unused var warning

            stan::math::initialize(poisson_max, DUMMY_VAR__);
            stan::math::fill(poisson_max,DUMMY_VAR__);
            stan::math::assign(poisson_max,pow(2.0,30.0));


            current_statement_begin__ = 1101;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 1102;
                local_scalar_t__ gamma_temp;
                (void) gamma_temp;  // dummy to suppress unused var warning

                stan::math::initialize(gamma_temp, DUMMY_VAR__);
                stan::math::fill(gamma_temp,DUMMY_VAR__);


                current_statement_begin__ = 1103;
                if (as_bool(is_inf(get_base1(aux,1,"aux",1)))) {
                    current_statement_begin__ = 1104;
                    stan::math::assign(gamma_temp, get_base1(mu,n,"mu",1));
                } else {
                    current_statement_begin__ = 1106;
                    stan::math::assign(gamma_temp, gamma_rng(get_base1(aux,1,"aux",1),(get_base1(aux,1,"aux",1) / get_base1(mu,n,"mu",1)), base_rng__));
                }
                current_statement_begin__ = 1107;
                if (as_bool(logical_lt(gamma_temp,poisson_max))) {
                    current_statement_begin__ = 1108;
                    stan::math::assign(mean_PPD, (mean_PPD + poisson_rng(gamma_temp, base_rng__)));
                } else {
                    current_statement_begin__ = 1110;
                    stan::math::assign(mean_PPD, (mean_PPD + normal_rng(gamma_temp,stan::math::sqrt(gamma_temp), base_rng__)));
                }
                }
            }
            }
        }
        current_statement_begin__ = 1113;
        return stan::math::promote_scalar<fun_return_scalar_t__>((mean_PPD / N));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct mean_PPD_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& mu,
                 const std::vector<T1__>& aux,
                 const int& family, RNG& base_rng__, std::ostream* pstream__) const {
        return mean_PPD_rng(mu, aux, family, base_rng__, pstream__);
    }
};

template <typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
pw_pois(const std::vector<int>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1127;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 1128;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 1129;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 1130;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1130;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            poisson_log_log(get_base1(y,n,"y",1),get_base1(eta,n,"eta",1)), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_lte(link,3))) {
            {
            current_statement_begin__ = 1132;
            validate_non_negative_index("phi", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phi(static_cast<Eigen::VectorXd::Index>(N));
            (void) phi;  // dummy to suppress unused var warning

            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi,DUMMY_VAR__);
            stan::math::assign(phi,linkinv_count(eta,link, pstream__));


            current_statement_begin__ = 1133;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 1133;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            poisson_log(get_base1(y,n,"y",1),get_base1(phi,n,"phi",1)), 
                            "assigning variable ll");
            }
            }
        } else {
            current_statement_begin__ = 1135;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 1136;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_pois_functor__ {
    template <typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const int& link, std::ostream* pstream__) const {
        return pw_pois(y, eta, link, pstream__);
    }
};

template <typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
pw_nb(const std::vector<int>& y,
          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
          const T2__& theta,
          const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1149;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 1150;
        validate_non_negative_index("rho", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rho(static_cast<Eigen::VectorXd::Index>(N));
        (void) rho;  // dummy to suppress unused var warning

        stan::math::initialize(rho, DUMMY_VAR__);
        stan::math::fill(rho,DUMMY_VAR__);
        stan::math::assign(rho,linkinv_count(eta,link, pstream__));
        current_statement_begin__ = 1151;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 1152;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 1152;
            stan::model::assign(ll, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        neg_binomial_2_log(get_base1(y,n,"y",1),get_base1(rho,n,"rho",1),theta), 
                        "assigning variable ll");
        }
        current_statement_begin__ = 1153;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_nb_functor__ {
    template <typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
          const T2__& theta,
          const int& link, std::ostream* pstream__) const {
        return pw_nb(y, eta, theta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_beta(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const T2__& dispersion,
            const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1168;
        validate_non_negative_index("ll", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);
        current_statement_begin__ = 1169;
        validate_non_negative_index("mu", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(y)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::assign(mu,linkinv_beta(eta,link, pstream__));


        current_statement_begin__ = 1170;
        for (int n = 1; n <= rows(y); ++n) {

            current_statement_begin__ = 1171;
            stan::model::assign(ll, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        beta_log(get_base1(y,n,"y",1),(get_base1(mu,n,"mu",1) * dispersion),((1 - get_base1(mu,n,"mu",1)) * dispersion)), 
                        "assigning variable ll");
        }
        current_statement_begin__ = 1173;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_beta_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
            const T2__& dispersion,
            const int& link, std::ostream* pstream__) const {
        return pw_beta(y, eta, dispersion, link, pstream__);
    }
};

template <typename T2__>
typename boost::math::tools::promote_args<T2__>::type
log_clogit_denom(const int& N_j,
                     const int& D_j,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_j, std::ostream* pstream__);

template <typename T2__>
typename boost::math::tools::promote_args<T2__>::type
log_clogit_denom(const int& N_j,
                     const int& D_j,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_j, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 1187;
        if (as_bool((primitive_value(logical_eq(D_j,1)) && primitive_value(logical_eq(N_j,rows(eta_j)))))) {
            current_statement_begin__ = 1187;
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_sum_exp(eta_j));
        }
        current_statement_begin__ = 1188;
        if (as_bool(logical_eq(D_j,0))) {
            current_statement_begin__ = 1188;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
        current_statement_begin__ = 1189;
        if (as_bool(logical_eq(N_j,D_j))) {

            current_statement_begin__ = 1190;
            if (as_bool(logical_eq(D_j,1))) {
                current_statement_begin__ = 1190;
                return stan::math::promote_scalar<fun_return_scalar_t__>(get_base1(eta_j,N_j,"eta_j",1));
            }
            current_statement_begin__ = 1191;
            return stan::math::promote_scalar<fun_return_scalar_t__>(sum(segment(eta_j,(N_j - 1),2)));
        } else {
            {
            current_statement_begin__ = 1194;
            int N_jm1(0);
            (void) N_jm1;  // dummy to suppress unused var warning

            stan::math::fill(N_jm1, std::numeric_limits<int>::min());
            stan::math::assign(N_jm1,(N_j - 1));


            current_statement_begin__ = 1195;
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_sum_exp(log_clogit_denom(N_jm1,D_j,eta_j, pstream__),(log_clogit_denom(N_jm1,(D_j - 1),eta_j, pstream__) + get_base1(eta_j,N_j,"eta_j",1))));
            }
        }
        current_statement_begin__ = 1198;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::not_a_number());
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_clogit_denom_functor__ {
    template <typename T2__>
        typename boost::math::tools::promote_args<T2__>::type
    operator()(const int& N_j,
                     const int& D_j,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta_j, std::ostream* pstream__) const {
        return log_clogit_denom(N_j, D_j, eta_j, pstream__);
    }
};

template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
ll_clogit_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
                 const std::vector<int>& successes,
                 const std::vector<int>& failures,
                 const std::vector<int>& observations, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 1212;
        int J(0);
        (void) J;  // dummy to suppress unused var warning

        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,num_elements(observations));
        current_statement_begin__ = 1213;
        int pos0(0);
        (void) pos0;  // dummy to suppress unused var warning

        stan::math::fill(pos0, std::numeric_limits<int>::min());
        stan::math::assign(pos0,1);
        current_statement_begin__ = 1214;
        int pos1(0);
        (void) pos1;  // dummy to suppress unused var warning

        stan::math::fill(pos1, std::numeric_limits<int>::min());
        stan::math::assign(pos1,1);
        current_statement_begin__ = 1215;
        validate_non_negative_index("summands", "J", J);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  summands(static_cast<Eigen::VectorXd::Index>(J));
        (void) summands;  // dummy to suppress unused var warning

        stan::math::initialize(summands, DUMMY_VAR__);
        stan::math::fill(summands,DUMMY_VAR__);


        current_statement_begin__ = 1216;
        for (int j = 1; j <= J; ++j) {
            {
            current_statement_begin__ = 1217;
            int D_g(0);
            (void) D_g;  // dummy to suppress unused var warning

            stan::math::fill(D_g, std::numeric_limits<int>::min());
            stan::math::assign(D_g,get_base1(successes,j,"successes",1));
            current_statement_begin__ = 1218;
            int N_g(0);
            (void) N_g;  // dummy to suppress unused var warning

            stan::math::fill(N_g, std::numeric_limits<int>::min());
            stan::math::assign(N_g,get_base1(observations,j,"observations",1));
            current_statement_begin__ = 1219;
            int F_g(0);
            (void) F_g;  // dummy to suppress unused var warning

            stan::math::fill(F_g, std::numeric_limits<int>::min());
            stan::math::assign(F_g,get_base1(failures,j,"failures",1));
            current_statement_begin__ = 1220;
            validate_non_negative_index("eta_g", "N_g", N_g);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta_g(static_cast<Eigen::VectorXd::Index>(N_g));
            (void) eta_g;  // dummy to suppress unused var warning

            stan::math::initialize(eta_g, DUMMY_VAR__);
            stan::math::fill(eta_g,DUMMY_VAR__);
            stan::math::assign(eta_g,append_row(segment(eta1,pos1,D_g),segment(eta0,pos0,F_g)));


            current_statement_begin__ = 1222;
            stan::model::assign(summands, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        log_clogit_denom(N_g,D_g,eta_g, pstream__), 
                        "assigning variable summands");
            current_statement_begin__ = 1223;
            stan::math::assign(pos0, (pos0 + F_g));
            current_statement_begin__ = 1224;
            stan::math::assign(pos1, (pos1 + D_g));
            }
        }
        current_statement_begin__ = 1226;
        lp_accum__.add((sum(eta1) - sum(summands)));
        current_statement_begin__ = 1227;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_clogit_lp_functor__ {
    template <typename T0__, typename T1__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T_lp__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta0,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta1,
                 const std::vector<int>& successes,
                 const std::vector<int>& failures,
                 const std::vector<int>& observations, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_clogit_lp(eta0, eta1, successes, failures, observations, lp__, lp_accum__, pstream__);
    }
};

#include <meta_header.hpp>
 class model_mvmer2 : public prob_grad {
private:
    int M;
    vector<int> has_aux;
    int has_weights;
    vector<int> resp_type;
    vector<int> intercept_type;
    vector<int> yNobs;
    vector<int> yNeta;
    vector<int> yK;
    int t;
    vector<int> p;
    vector<int> l;
    int q;
    int len_theta_L;
    int bN1;
    int bK1;
    vector<int> bK1_len;
    vector<vector<int> > bK1_idx;
    int bN2;
    int bK2;
    vector<int> bK2_len;
    vector<vector<int> > bK2_idx;
    vector<int> yInt1;
    vector<int> yInt2;
    vector<int> yInt3;
    vector_d yReal1;
    vector_d yReal2;
    vector_d yReal3;
    matrix_d yX1;
    matrix_d yX2;
    matrix_d yX3;
    vector_d yXbar1;
    vector_d yXbar2;
    vector_d yXbar3;
    vector<int> family;
    vector<int> link;
    vector<vector_d> y1_Z1;
    vector<vector_d> y2_Z1;
    vector<vector_d> y3_Z1;
    vector<int> y1_Z1_id;
    vector<int> y2_Z1_id;
    vector<int> y3_Z1_id;
    vector<vector_d> y1_Z2;
    vector<vector_d> y2_Z2;
    vector<vector_d> y3_Z2;
    vector<int> y1_Z2_id;
    vector<int> y2_Z2_id;
    vector<int> y3_Z2_id;
    vector<int> y_prior_dist;
    vector<int> y_prior_dist_for_intercept;
    vector<int> y_prior_dist_for_aux;
    int prior_dist_for_cov;
    int prior_PD;
    vector_d y_prior_mean1;
    vector_d y_prior_mean2;
    vector_d y_prior_mean3;
    vector_d y_prior_scale1;
    vector_d y_prior_scale2;
    vector_d y_prior_scale3;
    vector_d y_prior_df1;
    vector_d y_prior_df2;
    vector_d y_prior_df3;
    vector_d y_global_prior_df;
    vector_d y_global_prior_scale;
    vector_d y_slab_df;
    vector_d y_slab_scale;
    vector_d y_prior_mean_for_intercept;
    vector_d y_prior_scale_for_intercept;
    vector_d y_prior_df_for_intercept;
    vector_d y_prior_mean_for_aux;
    vector_d y_prior_scale_for_aux;
    vector_d y_prior_df_for_aux;
    int len_concentration;
    int len_regularization;
    vector_d b_prior_shape;
    vector_d b_prior_scale;
    vector<double> b_prior_concentration;
    vector<double> b_prior_regularization;
    vector_d b1_prior_scale;
    vector_d b2_prior_scale;
    vector_d b1_prior_df;
    vector_d b2_prior_df;
    double b1_prior_regularization;
    double b2_prior_regularization;
    int yHs1;
    int yHs2;
    int yHs3;
    int len_z_T;
    int len_var_group;
    int len_rho;
    int pos;
    vector<double> delta;
    vector<int> bCov1_idx;
    vector<int> bCov2_idx;
    double sum_log_y1;
    double sum_log_y2;
    double sum_log_y3;
    vector_d sqrt_y1;
    vector_d sqrt_y2;
    vector_d sqrt_y3;
    vector_d log_y1;
    vector_d log_y2;
    vector_d log_y3;
public:
    model_mvmer2(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_mvmer2(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_mvmer2_namespace::model_mvmer2";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 1237;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 1238;
            validate_non_negative_index("has_aux", "3", 3);
            context__.validate_dims("data initialization", "has_aux", "int", context__.to_vec(3));
            validate_non_negative_index("has_aux", "3", 3);
            has_aux = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("has_aux");
            pos__ = 0;
            size_t has_aux_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < has_aux_limit_0__; ++i_0__) {
                has_aux[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1239;
            context__.validate_dims("data initialization", "has_weights", "int", context__.to_vec());
            has_weights = int(0);
            vals_i__ = context__.vals_i("has_weights");
            pos__ = 0;
            has_weights = vals_i__[pos__++];
            current_statement_begin__ = 1240;
            validate_non_negative_index("resp_type", "3", 3);
            context__.validate_dims("data initialization", "resp_type", "int", context__.to_vec(3));
            validate_non_negative_index("resp_type", "3", 3);
            resp_type = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("resp_type");
            pos__ = 0;
            size_t resp_type_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < resp_type_limit_0__; ++i_0__) {
                resp_type[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1241;
            validate_non_negative_index("intercept_type", "3", 3);
            context__.validate_dims("data initialization", "intercept_type", "int", context__.to_vec(3));
            validate_non_negative_index("intercept_type", "3", 3);
            intercept_type = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("intercept_type");
            pos__ = 0;
            size_t intercept_type_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < intercept_type_limit_0__; ++i_0__) {
                intercept_type[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1242;
            validate_non_negative_index("yNobs", "3", 3);
            context__.validate_dims("data initialization", "yNobs", "int", context__.to_vec(3));
            validate_non_negative_index("yNobs", "3", 3);
            yNobs = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("yNobs");
            pos__ = 0;
            size_t yNobs_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < yNobs_limit_0__; ++i_0__) {
                yNobs[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1243;
            validate_non_negative_index("yNeta", "3", 3);
            context__.validate_dims("data initialization", "yNeta", "int", context__.to_vec(3));
            validate_non_negative_index("yNeta", "3", 3);
            yNeta = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("yNeta");
            pos__ = 0;
            size_t yNeta_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < yNeta_limit_0__; ++i_0__) {
                yNeta[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1244;
            validate_non_negative_index("yK", "3", 3);
            context__.validate_dims("data initialization", "yK", "int", context__.to_vec(3));
            validate_non_negative_index("yK", "3", 3);
            yK = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("yK");
            pos__ = 0;
            size_t yK_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < yK_limit_0__; ++i_0__) {
                yK[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1247;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 1248;
            validate_non_negative_index("p", "t", t);
            context__.validate_dims("data initialization", "p", "int", context__.to_vec(t));
            validate_non_negative_index("p", "t", t);
            p = std::vector<int>(t,int(0));
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            size_t p_limit_0__ = t;
            for (size_t i_0__ = 0; i_0__ < p_limit_0__; ++i_0__) {
                p[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1249;
            validate_non_negative_index("l", "t", t);
            context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
            validate_non_negative_index("l", "t", t);
            l = std::vector<int>(t,int(0));
            vals_i__ = context__.vals_i("l");
            pos__ = 0;
            size_t l_limit_0__ = t;
            for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
                l[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1250;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            current_statement_begin__ = 1251;
            context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
            len_theta_L = int(0);
            vals_i__ = context__.vals_i("len_theta_L");
            pos__ = 0;
            len_theta_L = vals_i__[pos__++];
            current_statement_begin__ = 1256;
            context__.validate_dims("data initialization", "bN1", "int", context__.to_vec());
            bN1 = int(0);
            vals_i__ = context__.vals_i("bN1");
            pos__ = 0;
            bN1 = vals_i__[pos__++];
            current_statement_begin__ = 1257;
            context__.validate_dims("data initialization", "bK1", "int", context__.to_vec());
            bK1 = int(0);
            vals_i__ = context__.vals_i("bK1");
            pos__ = 0;
            bK1 = vals_i__[pos__++];
            current_statement_begin__ = 1258;
            validate_non_negative_index("bK1_len", "3", 3);
            context__.validate_dims("data initialization", "bK1_len", "int", context__.to_vec(3));
            validate_non_negative_index("bK1_len", "3", 3);
            bK1_len = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("bK1_len");
            pos__ = 0;
            size_t bK1_len_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < bK1_len_limit_0__; ++i_0__) {
                bK1_len[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1259;
            validate_non_negative_index("bK1_idx", "3", 3);
            validate_non_negative_index("bK1_idx", "2", 2);
            context__.validate_dims("data initialization", "bK1_idx", "int", context__.to_vec(3,2));
            validate_non_negative_index("bK1_idx", "3", 3);
            validate_non_negative_index("bK1_idx", "2", 2);
            bK1_idx = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("bK1_idx");
            pos__ = 0;
            size_t bK1_idx_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < bK1_idx_limit_1__; ++i_1__) {
                size_t bK1_idx_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < bK1_idx_limit_0__; ++i_0__) {
                    bK1_idx[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1262;
            context__.validate_dims("data initialization", "bN2", "int", context__.to_vec());
            bN2 = int(0);
            vals_i__ = context__.vals_i("bN2");
            pos__ = 0;
            bN2 = vals_i__[pos__++];
            current_statement_begin__ = 1263;
            context__.validate_dims("data initialization", "bK2", "int", context__.to_vec());
            bK2 = int(0);
            vals_i__ = context__.vals_i("bK2");
            pos__ = 0;
            bK2 = vals_i__[pos__++];
            current_statement_begin__ = 1264;
            validate_non_negative_index("bK2_len", "3", 3);
            context__.validate_dims("data initialization", "bK2_len", "int", context__.to_vec(3));
            validate_non_negative_index("bK2_len", "3", 3);
            bK2_len = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("bK2_len");
            pos__ = 0;
            size_t bK2_len_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < bK2_len_limit_0__; ++i_0__) {
                bK2_len[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1265;
            validate_non_negative_index("bK2_idx", "3", 3);
            validate_non_negative_index("bK2_idx", "2", 2);
            context__.validate_dims("data initialization", "bK2_idx", "int", context__.to_vec(3,2));
            validate_non_negative_index("bK2_idx", "3", 3);
            validate_non_negative_index("bK2_idx", "2", 2);
            bK2_idx = std::vector<std::vector<int> >(3,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("bK2_idx");
            pos__ = 0;
            size_t bK2_idx_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < bK2_idx_limit_1__; ++i_1__) {
                size_t bK2_idx_limit_0__ = 3;
                for (size_t i_0__ = 0; i_0__ < bK2_idx_limit_0__; ++i_0__) {
                    bK2_idx[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 1272;
            validate_non_negative_index("yInt1", "(logical_eq(get_base1(resp_type,1,\"resp_type\",1),2) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yInt1", "int", context__.to_vec((logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            validate_non_negative_index("yInt1", "(logical_eq(get_base1(resp_type,1,\"resp_type\",1),2) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            yInt1 = std::vector<int>((logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("yInt1");
            pos__ = 0;
            size_t yInt1_limit_0__ = (logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < yInt1_limit_0__; ++i_0__) {
                yInt1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1273;
            validate_non_negative_index("yInt2", "(logical_eq(get_base1(resp_type,2,\"resp_type\",1),2) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yInt2", "int", context__.to_vec((logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            validate_non_negative_index("yInt2", "(logical_eq(get_base1(resp_type,2,\"resp_type\",1),2) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            yInt2 = std::vector<int>((logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("yInt2");
            pos__ = 0;
            size_t yInt2_limit_0__ = (logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < yInt2_limit_0__; ++i_0__) {
                yInt2[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1274;
            validate_non_negative_index("yInt3", "(logical_eq(get_base1(resp_type,3,\"resp_type\",1),2) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yInt3", "int", context__.to_vec((logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            validate_non_negative_index("yInt3", "(logical_eq(get_base1(resp_type,3,\"resp_type\",1),2) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            yInt3 = std::vector<int>((logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("yInt3");
            pos__ = 0;
            size_t yInt3_limit_0__ = (logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < yInt3_limit_0__; ++i_0__) {
                yInt3[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1275;
            validate_non_negative_index("yReal1", "(logical_eq(get_base1(resp_type,1,\"resp_type\",1),1) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yReal1", "vector_d", context__.to_vec((logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            validate_non_negative_index("yReal1", "(logical_eq(get_base1(resp_type,1,\"resp_type\",1),1) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            yReal1 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            vals_r__ = context__.vals_r("yReal1");
            pos__ = 0;
            size_t yReal1_i_vec_lim__ = (logical_eq(get_base1(resp_type,1,"resp_type",1),1) ? get_base1(yNobs,1,"yNobs",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < yReal1_i_vec_lim__; ++i_vec__) {
                yReal1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1276;
            validate_non_negative_index("yReal2", "(logical_eq(get_base1(resp_type,2,\"resp_type\",1),1) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yReal2", "vector_d", context__.to_vec((logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            validate_non_negative_index("yReal2", "(logical_eq(get_base1(resp_type,2,\"resp_type\",1),1) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            yReal2 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            vals_r__ = context__.vals_r("yReal2");
            pos__ = 0;
            size_t yReal2_i_vec_lim__ = (logical_eq(get_base1(resp_type,2,"resp_type",1),1) ? get_base1(yNobs,2,"yNobs",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < yReal2_i_vec_lim__; ++i_vec__) {
                yReal2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1277;
            validate_non_negative_index("yReal3", "(logical_eq(get_base1(resp_type,3,\"resp_type\",1),1) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            context__.validate_dims("data initialization", "yReal3", "vector_d", context__.to_vec((logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            validate_non_negative_index("yReal3", "(logical_eq(get_base1(resp_type,3,\"resp_type\",1),1) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", (logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            yReal3 = vector_d(static_cast<Eigen::VectorXd::Index>((logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            vals_r__ = context__.vals_r("yReal3");
            pos__ = 0;
            size_t yReal3_i_vec_lim__ = (logical_eq(get_base1(resp_type,3,"resp_type",1),1) ? get_base1(yNobs,3,"yNobs",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < yReal3_i_vec_lim__; ++i_vec__) {
                yReal3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1278;
            validate_non_negative_index("yX1", "get_base1(yNeta,1,\"yNeta\",1)", get_base1(yNeta,1,"yNeta",1));
            validate_non_negative_index("yX1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "yX1", "matrix_d", context__.to_vec(get_base1(yNeta,1,"yNeta",1),get_base1(yK,1,"yK",1)));
            validate_non_negative_index("yX1", "get_base1(yNeta,1,\"yNeta\",1)", get_base1(yNeta,1,"yNeta",1));
            validate_non_negative_index("yX1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            yX1 = matrix_d(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,1,"yNeta",1)),static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("yX1");
            pos__ = 0;
            size_t yX1_m_mat_lim__ = get_base1(yNeta,1,"yNeta",1);
            size_t yX1_n_mat_lim__ = get_base1(yK,1,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < yX1_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < yX1_m_mat_lim__; ++m_mat__) {
                    yX1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1279;
            validate_non_negative_index("yX2", "get_base1(yNeta,2,\"yNeta\",1)", get_base1(yNeta,2,"yNeta",1));
            validate_non_negative_index("yX2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "yX2", "matrix_d", context__.to_vec(get_base1(yNeta,2,"yNeta",1),get_base1(yK,2,"yK",1)));
            validate_non_negative_index("yX2", "get_base1(yNeta,2,\"yNeta\",1)", get_base1(yNeta,2,"yNeta",1));
            validate_non_negative_index("yX2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            yX2 = matrix_d(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,2,"yNeta",1)),static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("yX2");
            pos__ = 0;
            size_t yX2_m_mat_lim__ = get_base1(yNeta,2,"yNeta",1);
            size_t yX2_n_mat_lim__ = get_base1(yK,2,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < yX2_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < yX2_m_mat_lim__; ++m_mat__) {
                    yX2(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1280;
            validate_non_negative_index("yX3", "get_base1(yNeta,3,\"yNeta\",1)", get_base1(yNeta,3,"yNeta",1));
            validate_non_negative_index("yX3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "yX3", "matrix_d", context__.to_vec(get_base1(yNeta,3,"yNeta",1),get_base1(yK,3,"yK",1)));
            validate_non_negative_index("yX3", "get_base1(yNeta,3,\"yNeta\",1)", get_base1(yNeta,3,"yNeta",1));
            validate_non_negative_index("yX3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            yX3 = matrix_d(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,3,"yNeta",1)),static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("yX3");
            pos__ = 0;
            size_t yX3_m_mat_lim__ = get_base1(yNeta,3,"yNeta",1);
            size_t yX3_n_mat_lim__ = get_base1(yK,3,"yK",1);
            for (size_t n_mat__ = 0; n_mat__ < yX3_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < yX3_m_mat_lim__; ++m_mat__) {
                    yX3(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 1281;
            validate_non_negative_index("yXbar1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "yXbar1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
            validate_non_negative_index("yXbar1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            yXbar1 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("yXbar1");
            pos__ = 0;
            size_t yXbar1_i_vec_lim__ = get_base1(yK,1,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < yXbar1_i_vec_lim__; ++i_vec__) {
                yXbar1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1282;
            validate_non_negative_index("yXbar2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "yXbar2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
            validate_non_negative_index("yXbar2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            yXbar2 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("yXbar2");
            pos__ = 0;
            size_t yXbar2_i_vec_lim__ = get_base1(yK,2,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < yXbar2_i_vec_lim__; ++i_vec__) {
                yXbar2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1283;
            validate_non_negative_index("yXbar3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "yXbar3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
            validate_non_negative_index("yXbar3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            yXbar3 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("yXbar3");
            pos__ = 0;
            size_t yXbar3_i_vec_lim__ = get_base1(yK,3,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < yXbar3_i_vec_lim__; ++i_vec__) {
                yXbar3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1293;
            validate_non_negative_index("family", "M", M);
            context__.validate_dims("data initialization", "family", "int", context__.to_vec(M));
            validate_non_negative_index("family", "M", M);
            family = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            size_t family_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < family_limit_0__; ++i_0__) {
                family[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1294;
            validate_non_negative_index("link", "M", M);
            context__.validate_dims("data initialization", "link", "int", context__.to_vec(M));
            validate_non_negative_index("link", "M", M);
            link = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("link");
            pos__ = 0;
            size_t link_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < link_limit_0__; ++i_0__) {
                link[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1297;
            validate_non_negative_index("y1_Z1", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_Z1", "(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y1_Z1", "vector_d", context__.to_vec(get_base1(bK1_len,1,"bK1_len",1),(logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 )));
            validate_non_negative_index("y1_Z1", "get_base1(bK1_len,1,\"bK1_len\",1)", get_base1(bK1_len,1,"bK1_len",1));
            validate_non_negative_index("y1_Z1", "(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            y1_Z1 = std::vector<vector_d>(get_base1(bK1_len,1,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_Z1");
            pos__ = 0;
            size_t y1_Z1_i_vec_lim__ = (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_Z1_i_vec_lim__; ++i_vec__) {
                size_t y1_Z1_limit_0__ = get_base1(bK1_len,1,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_Z1_limit_0__; ++i_0__) {
                    y1_Z1[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1298;
            validate_non_negative_index("y2_Z1", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_Z1", "(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y2_Z1", "vector_d", context__.to_vec(get_base1(bK1_len,2,"bK1_len",1),(logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 )));
            validate_non_negative_index("y2_Z1", "get_base1(bK1_len,2,\"bK1_len\",1)", get_base1(bK1_len,2,"bK1_len",1));
            validate_non_negative_index("y2_Z1", "(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            y2_Z1 = std::vector<vector_d>(get_base1(bK1_len,2,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_Z1");
            pos__ = 0;
            size_t y2_Z1_i_vec_lim__ = (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_Z1_i_vec_lim__; ++i_vec__) {
                size_t y2_Z1_limit_0__ = get_base1(bK1_len,2,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_Z1_limit_0__; ++i_0__) {
                    y2_Z1[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1299;
            validate_non_negative_index("y3_Z1", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_Z1", "(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y3_Z1", "vector_d", context__.to_vec(get_base1(bK1_len,3,"bK1_len",1),(logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 )));
            validate_non_negative_index("y3_Z1", "get_base1(bK1_len,3,\"bK1_len\",1)", get_base1(bK1_len,3,"bK1_len",1));
            validate_non_negative_index("y3_Z1", "(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            y3_Z1 = std::vector<vector_d>(get_base1(bK1_len,3,"bK1_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_Z1");
            pos__ = 0;
            size_t y3_Z1_i_vec_lim__ = (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_Z1_i_vec_lim__; ++i_vec__) {
                size_t y3_Z1_limit_0__ = get_base1(bK1_len,3,"bK1_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_Z1_limit_0__; ++i_0__) {
                    y3_Z1[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1300;
            validate_non_negative_index("y1_Z1_id", "(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y1_Z1_id", "int", context__.to_vec((logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 )));
            validate_non_negative_index("y1_Z1_id", "(logical_gt(get_base1(bK1_len,1,\"bK1_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            y1_Z1_id = std::vector<int>((logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_Z1_id");
            pos__ = 0;
            size_t y1_Z1_id_limit_0__ = (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_Z1_id_limit_0__; ++i_0__) {
                y1_Z1_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1301;
            validate_non_negative_index("y2_Z1_id", "(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y2_Z1_id", "int", context__.to_vec((logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 )));
            validate_non_negative_index("y2_Z1_id", "(logical_gt(get_base1(bK1_len,2,\"bK1_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            y2_Z1_id = std::vector<int>((logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_Z1_id");
            pos__ = 0;
            size_t y2_Z1_id_limit_0__ = (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_Z1_id_limit_0__; ++i_0__) {
                y2_Z1_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1302;
            validate_non_negative_index("y3_Z1_id", "(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y3_Z1_id", "int", context__.to_vec((logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 )));
            validate_non_negative_index("y3_Z1_id", "(logical_gt(get_base1(bK1_len,3,\"bK1_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            y3_Z1_id = std::vector<int>((logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_Z1_id");
            pos__ = 0;
            size_t y3_Z1_id_limit_0__ = (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_Z1_id_limit_0__; ++i_0__) {
                y3_Z1_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1305;
            validate_non_negative_index("y1_Z2", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_Z2", "(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y1_Z2", "vector_d", context__.to_vec(get_base1(bK2_len,1,"bK2_len",1),(logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 )));
            validate_non_negative_index("y1_Z2", "get_base1(bK2_len,1,\"bK2_len\",1)", get_base1(bK2_len,1,"bK2_len",1));
            validate_non_negative_index("y1_Z2", "(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            y1_Z2 = std::vector<vector_d>(get_base1(bK2_len,1,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y1_Z2");
            pos__ = 0;
            size_t y1_Z2_i_vec_lim__ = (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y1_Z2_i_vec_lim__; ++i_vec__) {
                size_t y1_Z2_limit_0__ = get_base1(bK2_len,1,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y1_Z2_limit_0__; ++i_0__) {
                    y1_Z2[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1306;
            validate_non_negative_index("y2_Z2", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_Z2", "(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y2_Z2", "vector_d", context__.to_vec(get_base1(bK2_len,2,"bK2_len",1),(logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 )));
            validate_non_negative_index("y2_Z2", "get_base1(bK2_len,2,\"bK2_len\",1)", get_base1(bK2_len,2,"bK2_len",1));
            validate_non_negative_index("y2_Z2", "(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            y2_Z2 = std::vector<vector_d>(get_base1(bK2_len,2,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y2_Z2");
            pos__ = 0;
            size_t y2_Z2_i_vec_lim__ = (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y2_Z2_i_vec_lim__; ++i_vec__) {
                size_t y2_Z2_limit_0__ = get_base1(bK2_len,2,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y2_Z2_limit_0__; ++i_0__) {
                    y2_Z2[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1307;
            validate_non_negative_index("y3_Z2", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_Z2", "(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y3_Z2", "vector_d", context__.to_vec(get_base1(bK2_len,3,"bK2_len",1),(logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 )));
            validate_non_negative_index("y3_Z2", "get_base1(bK2_len,3,\"bK2_len\",1)", get_base1(bK2_len,3,"bK2_len",1));
            validate_non_negative_index("y3_Z2", "(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            y3_Z2 = std::vector<vector_d>(get_base1(bK2_len,3,"bK2_len",1),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ))));
            vals_r__ = context__.vals_r("y3_Z2");
            pos__ = 0;
            size_t y3_Z2_i_vec_lim__ = (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < y3_Z2_i_vec_lim__; ++i_vec__) {
                size_t y3_Z2_limit_0__ = get_base1(bK2_len,3,"bK2_len",1);
                for (size_t i_0__ = 0; i_0__ < y3_Z2_limit_0__; ++i_0__) {
                    y3_Z2[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 1308;
            validate_non_negative_index("y1_Z2_id", "(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y1_Z2_id", "int", context__.to_vec((logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 )));
            validate_non_negative_index("y1_Z2_id", "(logical_gt(get_base1(bK2_len,1,\"bK2_len\",1),0) ? get_base1(yNeta,1,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ));
            y1_Z2_id = std::vector<int>((logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y1_Z2_id");
            pos__ = 0;
            size_t y1_Z2_id_limit_0__ = (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y1_Z2_id_limit_0__; ++i_0__) {
                y1_Z2_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1309;
            validate_non_negative_index("y2_Z2_id", "(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y2_Z2_id", "int", context__.to_vec((logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 )));
            validate_non_negative_index("y2_Z2_id", "(logical_gt(get_base1(bK2_len,2,\"bK2_len\",1),0) ? get_base1(yNeta,2,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ));
            y2_Z2_id = std::vector<int>((logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y2_Z2_id");
            pos__ = 0;
            size_t y2_Z2_id_limit_0__ = (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y2_Z2_id_limit_0__; ++i_0__) {
                y2_Z2_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1310;
            validate_non_negative_index("y3_Z2_id", "(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            context__.validate_dims("data initialization", "y3_Z2_id", "int", context__.to_vec((logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 )));
            validate_non_negative_index("y3_Z2_id", "(logical_gt(get_base1(bK2_len,3,\"bK2_len\",1),0) ? get_base1(yNeta,3,\"yNeta\",1) : 0 )", (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ));
            y3_Z2_id = std::vector<int>((logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ),int(0));
            vals_i__ = context__.vals_i("y3_Z2_id");
            pos__ = 0;
            size_t y3_Z2_id_limit_0__ = (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 );
            for (size_t i_0__ = 0; i_0__ < y3_Z2_id_limit_0__; ++i_0__) {
                y3_Z2_id[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1314;
            validate_non_negative_index("y_prior_dist", "3", 3);
            context__.validate_dims("data initialization", "y_prior_dist", "int", context__.to_vec(3));
            validate_non_negative_index("y_prior_dist", "3", 3);
            y_prior_dist = std::vector<int>(3,int(0));
            vals_i__ = context__.vals_i("y_prior_dist");
            pos__ = 0;
            size_t y_prior_dist_limit_0__ = 3;
            for (size_t i_0__ = 0; i_0__ < y_prior_dist_limit_0__; ++i_0__) {
                y_prior_dist[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1315;
            validate_non_negative_index("y_prior_dist_for_intercept", "M", M);
            context__.validate_dims("data initialization", "y_prior_dist_for_intercept", "int", context__.to_vec(M));
            validate_non_negative_index("y_prior_dist_for_intercept", "M", M);
            y_prior_dist_for_intercept = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("y_prior_dist_for_intercept");
            pos__ = 0;
            size_t y_prior_dist_for_intercept_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < y_prior_dist_for_intercept_limit_0__; ++i_0__) {
                y_prior_dist_for_intercept[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1318;
            validate_non_negative_index("y_prior_dist_for_aux", "M", M);
            context__.validate_dims("data initialization", "y_prior_dist_for_aux", "int", context__.to_vec(M));
            validate_non_negative_index("y_prior_dist_for_aux", "M", M);
            y_prior_dist_for_aux = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("y_prior_dist_for_aux");
            pos__ = 0;
            size_t y_prior_dist_for_aux_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < y_prior_dist_for_aux_limit_0__; ++i_0__) {
                y_prior_dist_for_aux[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 1321;
            context__.validate_dims("data initialization", "prior_dist_for_cov", "int", context__.to_vec());
            prior_dist_for_cov = int(0);
            vals_i__ = context__.vals_i("prior_dist_for_cov");
            pos__ = 0;
            prior_dist_for_cov = vals_i__[pos__++];
            current_statement_begin__ = 1324;
            context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
            prior_PD = int(0);
            vals_i__ = context__.vals_i("prior_PD");
            pos__ = 0;
            prior_PD = vals_i__[pos__++];
            current_statement_begin__ = 1334;
            validate_non_negative_index("y_prior_mean1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y_prior_mean1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y_prior_mean1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y_prior_mean1 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_mean1");
            pos__ = 0;
            size_t y_prior_mean1_i_vec_lim__ = get_base1(yK,1,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean1_i_vec_lim__; ++i_vec__) {
                y_prior_mean1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1335;
            validate_non_negative_index("y_prior_mean2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y_prior_mean2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y_prior_mean2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y_prior_mean2 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_mean2");
            pos__ = 0;
            size_t y_prior_mean2_i_vec_lim__ = get_base1(yK,2,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean2_i_vec_lim__; ++i_vec__) {
                y_prior_mean2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1336;
            validate_non_negative_index("y_prior_mean3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y_prior_mean3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y_prior_mean3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y_prior_mean3 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_mean3");
            pos__ = 0;
            size_t y_prior_mean3_i_vec_lim__ = get_base1(yK,3,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean3_i_vec_lim__; ++i_vec__) {
                y_prior_mean3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1337;
            validate_non_negative_index("y_prior_scale1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y_prior_scale1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y_prior_scale1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y_prior_scale1 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_scale1");
            pos__ = 0;
            size_t y_prior_scale1_i_vec_lim__ = get_base1(yK,1,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale1_i_vec_lim__; ++i_vec__) {
                y_prior_scale1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1338;
            validate_non_negative_index("y_prior_scale2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y_prior_scale2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y_prior_scale2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y_prior_scale2 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_scale2");
            pos__ = 0;
            size_t y_prior_scale2_i_vec_lim__ = get_base1(yK,2,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale2_i_vec_lim__; ++i_vec__) {
                y_prior_scale2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1339;
            validate_non_negative_index("y_prior_scale3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y_prior_scale3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y_prior_scale3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y_prior_scale3 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_scale3");
            pos__ = 0;
            size_t y_prior_scale3_i_vec_lim__ = get_base1(yK,3,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale3_i_vec_lim__; ++i_vec__) {
                y_prior_scale3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1340;
            validate_non_negative_index("y_prior_df1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            context__.validate_dims("data initialization", "y_prior_df1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
            validate_non_negative_index("y_prior_df1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            y_prior_df1 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_df1");
            pos__ = 0;
            size_t y_prior_df1_i_vec_lim__ = get_base1(yK,1,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df1_i_vec_lim__; ++i_vec__) {
                y_prior_df1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1341;
            validate_non_negative_index("y_prior_df2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            context__.validate_dims("data initialization", "y_prior_df2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
            validate_non_negative_index("y_prior_df2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            y_prior_df2 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_df2");
            pos__ = 0;
            size_t y_prior_df2_i_vec_lim__ = get_base1(yK,2,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df2_i_vec_lim__; ++i_vec__) {
                y_prior_df2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1342;
            validate_non_negative_index("y_prior_df3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            context__.validate_dims("data initialization", "y_prior_df3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
            validate_non_negative_index("y_prior_df3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            y_prior_df3 = vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            vals_r__ = context__.vals_r("y_prior_df3");
            pos__ = 0;
            size_t y_prior_df3_i_vec_lim__ = get_base1(yK,3,"yK",1);
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df3_i_vec_lim__; ++i_vec__) {
                y_prior_df3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1343;
            validate_non_negative_index("y_global_prior_df", "M", M);
            context__.validate_dims("data initialization", "y_global_prior_df", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_global_prior_df", "M", M);
            y_global_prior_df = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_global_prior_df");
            pos__ = 0;
            size_t y_global_prior_df_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_global_prior_df_i_vec_lim__; ++i_vec__) {
                y_global_prior_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1344;
            validate_non_negative_index("y_global_prior_scale", "M", M);
            context__.validate_dims("data initialization", "y_global_prior_scale", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_global_prior_scale", "M", M);
            y_global_prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_global_prior_scale");
            pos__ = 0;
            size_t y_global_prior_scale_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_global_prior_scale_i_vec_lim__; ++i_vec__) {
                y_global_prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1345;
            validate_non_negative_index("y_slab_df", "M", M);
            context__.validate_dims("data initialization", "y_slab_df", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_slab_df", "M", M);
            y_slab_df = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_slab_df");
            pos__ = 0;
            size_t y_slab_df_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_slab_df_i_vec_lim__; ++i_vec__) {
                y_slab_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1346;
            validate_non_negative_index("y_slab_scale", "M", M);
            context__.validate_dims("data initialization", "y_slab_scale", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_slab_scale", "M", M);
            y_slab_scale = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_slab_scale");
            pos__ = 0;
            size_t y_slab_scale_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_slab_scale_i_vec_lim__; ++i_vec__) {
                y_slab_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1349;
            validate_non_negative_index("y_prior_mean_for_intercept", "M", M);
            context__.validate_dims("data initialization", "y_prior_mean_for_intercept", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_mean_for_intercept", "M", M);
            y_prior_mean_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_mean_for_intercept");
            pos__ = 0;
            size_t y_prior_mean_for_intercept_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean_for_intercept_i_vec_lim__; ++i_vec__) {
                y_prior_mean_for_intercept[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1350;
            validate_non_negative_index("y_prior_scale_for_intercept", "M", M);
            context__.validate_dims("data initialization", "y_prior_scale_for_intercept", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_scale_for_intercept", "M", M);
            y_prior_scale_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_scale_for_intercept");
            pos__ = 0;
            size_t y_prior_scale_for_intercept_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale_for_intercept_i_vec_lim__; ++i_vec__) {
                y_prior_scale_for_intercept[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1351;
            validate_non_negative_index("y_prior_df_for_intercept", "M", M);
            context__.validate_dims("data initialization", "y_prior_df_for_intercept", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_df_for_intercept", "M", M);
            y_prior_df_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_df_for_intercept");
            pos__ = 0;
            size_t y_prior_df_for_intercept_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df_for_intercept_i_vec_lim__; ++i_vec__) {
                y_prior_df_for_intercept[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1354;
            validate_non_negative_index("y_prior_mean_for_aux", "M", M);
            context__.validate_dims("data initialization", "y_prior_mean_for_aux", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_mean_for_aux", "M", M);
            y_prior_mean_for_aux = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_mean_for_aux");
            pos__ = 0;
            size_t y_prior_mean_for_aux_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_mean_for_aux_i_vec_lim__; ++i_vec__) {
                y_prior_mean_for_aux[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1355;
            validate_non_negative_index("y_prior_scale_for_aux", "M", M);
            context__.validate_dims("data initialization", "y_prior_scale_for_aux", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_scale_for_aux", "M", M);
            y_prior_scale_for_aux = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_scale_for_aux");
            pos__ = 0;
            size_t y_prior_scale_for_aux_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_scale_for_aux_i_vec_lim__; ++i_vec__) {
                y_prior_scale_for_aux[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1356;
            validate_non_negative_index("y_prior_df_for_aux", "M", M);
            context__.validate_dims("data initialization", "y_prior_df_for_aux", "vector_d", context__.to_vec(M));
            validate_non_negative_index("y_prior_df_for_aux", "M", M);
            y_prior_df_for_aux = vector_d(static_cast<Eigen::VectorXd::Index>(M));
            vals_r__ = context__.vals_r("y_prior_df_for_aux");
            pos__ = 0;
            size_t y_prior_df_for_aux_i_vec_lim__ = M;
            for (size_t i_vec__ = 0; i_vec__ < y_prior_df_for_aux_i_vec_lim__; ++i_vec__) {
                y_prior_df_for_aux[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1359;
            context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
            len_concentration = int(0);
            vals_i__ = context__.vals_i("len_concentration");
            pos__ = 0;
            len_concentration = vals_i__[pos__++];
            current_statement_begin__ = 1360;
            context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
            len_regularization = int(0);
            vals_i__ = context__.vals_i("len_regularization");
            pos__ = 0;
            len_regularization = vals_i__[pos__++];
            current_statement_begin__ = 1361;
            validate_non_negative_index("b_prior_shape", "t", t);
            context__.validate_dims("data initialization", "b_prior_shape", "vector_d", context__.to_vec(t));
            validate_non_negative_index("b_prior_shape", "t", t);
            b_prior_shape = vector_d(static_cast<Eigen::VectorXd::Index>(t));
            vals_r__ = context__.vals_r("b_prior_shape");
            pos__ = 0;
            size_t b_prior_shape_i_vec_lim__ = t;
            for (size_t i_vec__ = 0; i_vec__ < b_prior_shape_i_vec_lim__; ++i_vec__) {
                b_prior_shape[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1362;
            validate_non_negative_index("b_prior_scale", "t", t);
            context__.validate_dims("data initialization", "b_prior_scale", "vector_d", context__.to_vec(t));
            validate_non_negative_index("b_prior_scale", "t", t);
            b_prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(t));
            vals_r__ = context__.vals_r("b_prior_scale");
            pos__ = 0;
            size_t b_prior_scale_i_vec_lim__ = t;
            for (size_t i_vec__ = 0; i_vec__ < b_prior_scale_i_vec_lim__; ++i_vec__) {
                b_prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1363;
            validate_non_negative_index("b_prior_concentration", "len_concentration", len_concentration);
            context__.validate_dims("data initialization", "b_prior_concentration", "double", context__.to_vec(len_concentration));
            validate_non_negative_index("b_prior_concentration", "len_concentration", len_concentration);
            b_prior_concentration = std::vector<double>(len_concentration,double(0));
            vals_r__ = context__.vals_r("b_prior_concentration");
            pos__ = 0;
            size_t b_prior_concentration_limit_0__ = len_concentration;
            for (size_t i_0__ = 0; i_0__ < b_prior_concentration_limit_0__; ++i_0__) {
                b_prior_concentration[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1364;
            validate_non_negative_index("b_prior_regularization", "len_regularization", len_regularization);
            context__.validate_dims("data initialization", "b_prior_regularization", "double", context__.to_vec(len_regularization));
            validate_non_negative_index("b_prior_regularization", "len_regularization", len_regularization);
            b_prior_regularization = std::vector<double>(len_regularization,double(0));
            vals_r__ = context__.vals_r("b_prior_regularization");
            pos__ = 0;
            size_t b_prior_regularization_limit_0__ = len_regularization;
            for (size_t i_0__ = 0; i_0__ < b_prior_regularization_limit_0__; ++i_0__) {
                b_prior_regularization[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1367;
            validate_non_negative_index("b1_prior_scale", "bK1", bK1);
            context__.validate_dims("data initialization", "b1_prior_scale", "vector_d", context__.to_vec(bK1));
            validate_non_negative_index("b1_prior_scale", "bK1", bK1);
            b1_prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(bK1));
            vals_r__ = context__.vals_r("b1_prior_scale");
            pos__ = 0;
            size_t b1_prior_scale_i_vec_lim__ = bK1;
            for (size_t i_vec__ = 0; i_vec__ < b1_prior_scale_i_vec_lim__; ++i_vec__) {
                b1_prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1368;
            validate_non_negative_index("b2_prior_scale", "bK2", bK2);
            context__.validate_dims("data initialization", "b2_prior_scale", "vector_d", context__.to_vec(bK2));
            validate_non_negative_index("b2_prior_scale", "bK2", bK2);
            b2_prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(bK2));
            vals_r__ = context__.vals_r("b2_prior_scale");
            pos__ = 0;
            size_t b2_prior_scale_i_vec_lim__ = bK2;
            for (size_t i_vec__ = 0; i_vec__ < b2_prior_scale_i_vec_lim__; ++i_vec__) {
                b2_prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1369;
            validate_non_negative_index("b1_prior_df", "bK1", bK1);
            context__.validate_dims("data initialization", "b1_prior_df", "vector_d", context__.to_vec(bK1));
            validate_non_negative_index("b1_prior_df", "bK1", bK1);
            b1_prior_df = vector_d(static_cast<Eigen::VectorXd::Index>(bK1));
            vals_r__ = context__.vals_r("b1_prior_df");
            pos__ = 0;
            size_t b1_prior_df_i_vec_lim__ = bK1;
            for (size_t i_vec__ = 0; i_vec__ < b1_prior_df_i_vec_lim__; ++i_vec__) {
                b1_prior_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1370;
            validate_non_negative_index("b2_prior_df", "bK2", bK2);
            context__.validate_dims("data initialization", "b2_prior_df", "vector_d", context__.to_vec(bK2));
            validate_non_negative_index("b2_prior_df", "bK2", bK2);
            b2_prior_df = vector_d(static_cast<Eigen::VectorXd::Index>(bK2));
            vals_r__ = context__.vals_r("b2_prior_df");
            pos__ = 0;
            size_t b2_prior_df_i_vec_lim__ = bK2;
            for (size_t i_vec__ = 0; i_vec__ < b2_prior_df_i_vec_lim__; ++i_vec__) {
                b2_prior_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 1371;
            context__.validate_dims("data initialization", "b1_prior_regularization", "double", context__.to_vec());
            b1_prior_regularization = double(0);
            vals_r__ = context__.vals_r("b1_prior_regularization");
            pos__ = 0;
            b1_prior_regularization = vals_r__[pos__++];
            current_statement_begin__ = 1372;
            context__.validate_dims("data initialization", "b2_prior_regularization", "double", context__.to_vec());
            b2_prior_regularization = double(0);
            vals_r__ = context__.vals_r("b2_prior_regularization");
            pos__ = 0;
            b2_prior_regularization = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 1237;
            check_greater_or_equal(function__,"M",M,1);
            check_less_or_equal(function__,"M",M,3);
            current_statement_begin__ = 1238;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"has_aux[k0__]",has_aux[k0__],0);
                check_less_or_equal(function__,"has_aux[k0__]",has_aux[k0__],1);
            }
            current_statement_begin__ = 1239;
            check_greater_or_equal(function__,"has_weights",has_weights,0);
            check_less_or_equal(function__,"has_weights",has_weights,1);
            current_statement_begin__ = 1240;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"resp_type[k0__]",resp_type[k0__],0);
                check_less_or_equal(function__,"resp_type[k0__]",resp_type[k0__],2);
            }
            current_statement_begin__ = 1241;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"intercept_type[k0__]",intercept_type[k0__],0);
                check_less_or_equal(function__,"intercept_type[k0__]",intercept_type[k0__],3);
            }
            current_statement_begin__ = 1242;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"yNobs[k0__]",yNobs[k0__],0);
            }
            current_statement_begin__ = 1243;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"yNeta[k0__]",yNeta[k0__],0);
            }
            current_statement_begin__ = 1244;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"yK[k0__]",yK[k0__],0);
            }
            current_statement_begin__ = 1247;
            check_greater_or_equal(function__,"t",t,0);
            current_statement_begin__ = 1248;
            for (int k0__ = 0; k0__ < t; ++k0__) {
                check_greater_or_equal(function__,"p[k0__]",p[k0__],1);
            }
            current_statement_begin__ = 1249;
            for (int k0__ = 0; k0__ < t; ++k0__) {
                check_greater_or_equal(function__,"l[k0__]",l[k0__],1);
            }
            current_statement_begin__ = 1250;
            check_greater_or_equal(function__,"q",q,0);
            current_statement_begin__ = 1251;
            check_greater_or_equal(function__,"len_theta_L",len_theta_L,0);
            current_statement_begin__ = 1256;
            check_greater_or_equal(function__,"bN1",bN1,0);
            current_statement_begin__ = 1257;
            check_greater_or_equal(function__,"bK1",bK1,0);
            current_statement_begin__ = 1258;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"bK1_len[k0__]",bK1_len[k0__],0);
            }
            current_statement_begin__ = 1259;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"bK1_idx[k0__][k1__]",bK1_idx[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 1262;
            check_greater_or_equal(function__,"bN2",bN2,0);
            current_statement_begin__ = 1263;
            check_greater_or_equal(function__,"bK2",bK2,0);
            current_statement_begin__ = 1264;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"bK2_len[k0__]",bK2_len[k0__],0);
            }
            current_statement_begin__ = 1265;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"bK2_idx[k0__][k1__]",bK2_idx[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 1272;
            for (int k0__ = 0; k0__ < (logical_eq(get_base1(resp_type,1,"resp_type",1),2) ? get_base1(yNobs,1,"yNobs",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"yInt1[k0__]",yInt1[k0__],0);
            }
            current_statement_begin__ = 1273;
            for (int k0__ = 0; k0__ < (logical_eq(get_base1(resp_type,2,"resp_type",1),2) ? get_base1(yNobs,2,"yNobs",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"yInt2[k0__]",yInt2[k0__],0);
            }
            current_statement_begin__ = 1274;
            for (int k0__ = 0; k0__ < (logical_eq(get_base1(resp_type,3,"resp_type",1),2) ? get_base1(yNobs,3,"yNobs",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"yInt3[k0__]",yInt3[k0__],0);
            }
            current_statement_begin__ = 1275;
            current_statement_begin__ = 1276;
            current_statement_begin__ = 1277;
            current_statement_begin__ = 1278;
            current_statement_begin__ = 1279;
            current_statement_begin__ = 1280;
            current_statement_begin__ = 1281;
            current_statement_begin__ = 1282;
            current_statement_begin__ = 1283;
            current_statement_begin__ = 1293;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"family[k0__]",family[k0__],0);
            }
            current_statement_begin__ = 1294;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"link[k0__]",link[k0__],0);
            }
            current_statement_begin__ = 1297;
            current_statement_begin__ = 1298;
            current_statement_begin__ = 1299;
            current_statement_begin__ = 1300;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK1_len,1,"bK1_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_Z1_id[k0__]",y1_Z1_id[k0__],0);
            }
            current_statement_begin__ = 1301;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK1_len,2,"bK1_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_Z1_id[k0__]",y2_Z1_id[k0__],0);
            }
            current_statement_begin__ = 1302;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK1_len,3,"bK1_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_Z1_id[k0__]",y3_Z1_id[k0__],0);
            }
            current_statement_begin__ = 1305;
            current_statement_begin__ = 1306;
            current_statement_begin__ = 1307;
            current_statement_begin__ = 1308;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK2_len,1,"bK2_len",1),0) ? get_base1(yNeta,1,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y1_Z2_id[k0__]",y1_Z2_id[k0__],0);
            }
            current_statement_begin__ = 1309;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK2_len,2,"bK2_len",1),0) ? get_base1(yNeta,2,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y2_Z2_id[k0__]",y2_Z2_id[k0__],0);
            }
            current_statement_begin__ = 1310;
            for (int k0__ = 0; k0__ < (logical_gt(get_base1(bK2_len,3,"bK2_len",1),0) ? get_base1(yNeta,3,"yNeta",1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"y3_Z2_id[k0__]",y3_Z2_id[k0__],0);
            }
            current_statement_begin__ = 1314;
            for (int k0__ = 0; k0__ < 3; ++k0__) {
                check_greater_or_equal(function__,"y_prior_dist[k0__]",y_prior_dist[k0__],0);
                check_less_or_equal(function__,"y_prior_dist[k0__]",y_prior_dist[k0__],7);
            }
            current_statement_begin__ = 1315;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"y_prior_dist_for_intercept[k0__]",y_prior_dist_for_intercept[k0__],0);
                check_less_or_equal(function__,"y_prior_dist_for_intercept[k0__]",y_prior_dist_for_intercept[k0__],2);
            }
            current_statement_begin__ = 1318;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"y_prior_dist_for_aux[k0__]",y_prior_dist_for_aux[k0__],0);
                check_less_or_equal(function__,"y_prior_dist_for_aux[k0__]",y_prior_dist_for_aux[k0__],3);
            }
            current_statement_begin__ = 1321;
            check_greater_or_equal(function__,"prior_dist_for_cov",prior_dist_for_cov,1);
            check_less_or_equal(function__,"prior_dist_for_cov",prior_dist_for_cov,2);
            current_statement_begin__ = 1324;
            check_greater_or_equal(function__,"prior_PD",prior_PD,0);
            check_less_or_equal(function__,"prior_PD",prior_PD,1);
            current_statement_begin__ = 1334;
            current_statement_begin__ = 1335;
            current_statement_begin__ = 1336;
            current_statement_begin__ = 1337;
            check_greater_or_equal(function__,"y_prior_scale1",y_prior_scale1,0);
            current_statement_begin__ = 1338;
            check_greater_or_equal(function__,"y_prior_scale2",y_prior_scale2,0);
            current_statement_begin__ = 1339;
            check_greater_or_equal(function__,"y_prior_scale3",y_prior_scale3,0);
            current_statement_begin__ = 1340;
            check_greater_or_equal(function__,"y_prior_df1",y_prior_df1,0);
            current_statement_begin__ = 1341;
            check_greater_or_equal(function__,"y_prior_df2",y_prior_df2,0);
            current_statement_begin__ = 1342;
            check_greater_or_equal(function__,"y_prior_df3",y_prior_df3,0);
            current_statement_begin__ = 1343;
            check_greater_or_equal(function__,"y_global_prior_df",y_global_prior_df,0);
            current_statement_begin__ = 1344;
            check_greater_or_equal(function__,"y_global_prior_scale",y_global_prior_scale,0);
            current_statement_begin__ = 1345;
            check_greater_or_equal(function__,"y_slab_df",y_slab_df,0);
            current_statement_begin__ = 1346;
            check_greater_or_equal(function__,"y_slab_scale",y_slab_scale,0);
            current_statement_begin__ = 1349;
            current_statement_begin__ = 1350;
            check_greater_or_equal(function__,"y_prior_scale_for_intercept",y_prior_scale_for_intercept,0);
            current_statement_begin__ = 1351;
            check_greater_or_equal(function__,"y_prior_df_for_intercept",y_prior_df_for_intercept,0);
            current_statement_begin__ = 1354;
            check_greater_or_equal(function__,"y_prior_mean_for_aux",y_prior_mean_for_aux,0);
            current_statement_begin__ = 1355;
            check_greater_or_equal(function__,"y_prior_scale_for_aux",y_prior_scale_for_aux,0);
            current_statement_begin__ = 1356;
            check_greater_or_equal(function__,"y_prior_df_for_aux",y_prior_df_for_aux,0);
            current_statement_begin__ = 1359;
            check_greater_or_equal(function__,"len_concentration",len_concentration,0);
            current_statement_begin__ = 1360;
            check_greater_or_equal(function__,"len_regularization",len_regularization,0);
            current_statement_begin__ = 1361;
            check_greater_or_equal(function__,"b_prior_shape",b_prior_shape,0);
            current_statement_begin__ = 1362;
            check_greater_or_equal(function__,"b_prior_scale",b_prior_scale,0);
            current_statement_begin__ = 1363;
            for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
                check_greater_or_equal(function__,"b_prior_concentration[k0__]",b_prior_concentration[k0__],0);
            }
            current_statement_begin__ = 1364;
            for (int k0__ = 0; k0__ < len_regularization; ++k0__) {
                check_greater_or_equal(function__,"b_prior_regularization[k0__]",b_prior_regularization[k0__],0);
            }
            current_statement_begin__ = 1367;
            check_greater_or_equal(function__,"b1_prior_scale",b1_prior_scale,0);
            current_statement_begin__ = 1368;
            check_greater_or_equal(function__,"b2_prior_scale",b2_prior_scale,0);
            current_statement_begin__ = 1369;
            check_greater_or_equal(function__,"b1_prior_df",b1_prior_df,0);
            current_statement_begin__ = 1370;
            check_greater_or_equal(function__,"b2_prior_df",b2_prior_df,0);
            current_statement_begin__ = 1371;
            check_greater_or_equal(function__,"b1_prior_regularization",b1_prior_regularization,0);
            current_statement_begin__ = 1372;
            check_greater_or_equal(function__,"b2_prior_regularization",b2_prior_regularization,0);
            // initialize data variables
            current_statement_begin__ = 1379;
            yHs1 = int(0);
            stan::math::fill(yHs1, std::numeric_limits<int>::min());
            stan::math::assign(yHs1,get_nvars_for_hs((logical_gt(M,0) ? get_base1(y_prior_dist,1,"y_prior_dist",1) : 0 ), pstream__));
            current_statement_begin__ = 1380;
            yHs2 = int(0);
            stan::math::fill(yHs2, std::numeric_limits<int>::min());
            stan::math::assign(yHs2,get_nvars_for_hs((logical_gt(M,1) ? get_base1(y_prior_dist,2,"y_prior_dist",1) : 0 ), pstream__));
            current_statement_begin__ = 1381;
            yHs3 = int(0);
            stan::math::fill(yHs3, std::numeric_limits<int>::min());
            stan::math::assign(yHs3,get_nvars_for_hs((logical_gt(M,2) ? get_base1(y_prior_dist,3,"y_prior_dist",1) : 0 ), pstream__));
            current_statement_begin__ = 1384;
            len_z_T = int(0);
            stan::math::fill(len_z_T, std::numeric_limits<int>::min());
            stan::math::assign(len_z_T,0);
            current_statement_begin__ = 1385;
            len_var_group = int(0);
            stan::math::fill(len_var_group, std::numeric_limits<int>::min());
            stan::math::assign(len_var_group,(sum(p) * logical_gt(t,0)));
            current_statement_begin__ = 1386;
            len_rho = int(0);
            stan::math::fill(len_rho, std::numeric_limits<int>::min());
            stan::math::assign(len_rho,(sum(p) - t));
            current_statement_begin__ = 1387;
            pos = int(0);
            stan::math::fill(pos, std::numeric_limits<int>::min());
            stan::math::assign(pos,1);
            current_statement_begin__ = 1388;
            validate_non_negative_index("delta", "len_concentration", len_concentration);
            delta = std::vector<double>(len_concentration,double(0));
            stan::math::fill(delta,DUMMY_VAR__);
            current_statement_begin__ = 1391;
            validate_non_negative_index("bCov1_idx", "(logical_eq(prior_dist_for_cov,2) ? (bK1 + choose(bK1,2)) : 0 )", (logical_eq(prior_dist_for_cov,2) ? (bK1 + choose(bK1,2)) : 0 ));
            bCov1_idx = std::vector<int>((logical_eq(prior_dist_for_cov,2) ? (bK1 + choose(bK1,2)) : 0 ),int(0));
            stan::math::fill(bCov1_idx, std::numeric_limits<int>::min());
            current_statement_begin__ = 1392;
            validate_non_negative_index("bCov2_idx", "(logical_eq(prior_dist_for_cov,2) ? (bK2 + choose(bK2,2)) : 0 )", (logical_eq(prior_dist_for_cov,2) ? (bK2 + choose(bK2,2)) : 0 ));
            bCov2_idx = std::vector<int>((logical_eq(prior_dist_for_cov,2) ? (bK2 + choose(bK2,2)) : 0 ),int(0));
            stan::math::fill(bCov2_idx, std::numeric_limits<int>::min());
            current_statement_begin__ = 1395;
            sum_log_y1 = double(0);
            stan::math::fill(sum_log_y1,DUMMY_VAR__);
            stan::math::assign(sum_log_y1,((primitive_value(logical_gt(M,0)) && primitive_value((primitive_value(logical_eq(get_base1(family,1,"family",1),2)) || primitive_value(logical_eq(get_base1(family,1,"family",1),3))))) ? sum(stan::math::log(yReal1)) : stan::math::not_a_number() ));
            current_statement_begin__ = 1397;
            sum_log_y2 = double(0);
            stan::math::fill(sum_log_y2,DUMMY_VAR__);
            stan::math::assign(sum_log_y2,((primitive_value(logical_gt(M,1)) && primitive_value((primitive_value(logical_eq(get_base1(family,2,"family",1),2)) || primitive_value(logical_eq(get_base1(family,2,"family",1),3))))) ? sum(stan::math::log(yReal2)) : stan::math::not_a_number() ));
            current_statement_begin__ = 1399;
            sum_log_y3 = double(0);
            stan::math::fill(sum_log_y3,DUMMY_VAR__);
            stan::math::assign(sum_log_y3,((primitive_value(logical_gt(M,2)) && primitive_value((primitive_value(logical_eq(get_base1(family,3,"family",1),2)) || primitive_value(logical_eq(get_base1(family,3,"family",1),3))))) ? sum(stan::math::log(yReal3)) : stan::math::not_a_number() ));
            current_statement_begin__ = 1401;
            validate_non_negative_index("sqrt_y1", "((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,\"family\",1),3))) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            sqrt_y1 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            stan::math::fill(sqrt_y1,DUMMY_VAR__);
            current_statement_begin__ = 1402;
            validate_non_negative_index("sqrt_y2", "((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,\"family\",1),3))) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            sqrt_y2 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            stan::math::fill(sqrt_y2,DUMMY_VAR__);
            current_statement_begin__ = 1403;
            validate_non_negative_index("sqrt_y3", "((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,\"family\",1),3))) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            sqrt_y3 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            stan::math::fill(sqrt_y3,DUMMY_VAR__);
            current_statement_begin__ = 1404;
            validate_non_negative_index("log_y1", "((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,\"family\",1),3))) ? get_base1(yNobs,1,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))) ? get_base1(yNobs,1,"yNobs",1) : 0 ));
            log_y1 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))) ? get_base1(yNobs,1,"yNobs",1) : 0 )));
            stan::math::fill(log_y1,DUMMY_VAR__);
            current_statement_begin__ = 1405;
            validate_non_negative_index("log_y2", "((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,\"family\",1),3))) ? get_base1(yNobs,2,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))) ? get_base1(yNobs,2,"yNobs",1) : 0 ));
            log_y2 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))) ? get_base1(yNobs,2,"yNobs",1) : 0 )));
            stan::math::fill(log_y2,DUMMY_VAR__);
            current_statement_begin__ = 1406;
            validate_non_negative_index("log_y3", "((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,\"family\",1),3))) ? get_base1(yNobs,3,\"yNobs\",1) : 0 )", ((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))) ? get_base1(yNobs,3,"yNobs",1) : 0 ));
            log_y3 = vector_d(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))) ? get_base1(yNobs,3,"yNobs",1) : 0 )));
            stan::math::fill(log_y3,DUMMY_VAR__);

            current_statement_begin__ = 1407;
            if (as_bool((primitive_value(logical_gt(M,0)) && primitive_value(logical_eq(get_base1(family,1,"family",1),3))))) {

                current_statement_begin__ = 1408;
                stan::math::assign(sqrt_y1, stan::math::sqrt(yReal1));
                current_statement_begin__ = 1409;
                stan::math::assign(log_y1, stan::math::log(yReal1));
            }
            current_statement_begin__ = 1411;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(family,2,"family",1),3))))) {

                current_statement_begin__ = 1412;
                stan::math::assign(sqrt_y2, stan::math::sqrt(yReal2));
                current_statement_begin__ = 1413;
                stan::math::assign(log_y2, stan::math::log(yReal2));
            }
            current_statement_begin__ = 1415;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(family,3,"family",1),3))))) {

                current_statement_begin__ = 1416;
                stan::math::assign(sqrt_y3, stan::math::sqrt(yReal3));
                current_statement_begin__ = 1417;
                stan::math::assign(log_y3, stan::math::log(yReal3));
            }
            current_statement_begin__ = 1421;
            if (as_bool(logical_eq(prior_dist_for_cov,1))) {

                current_statement_begin__ = 1422;
                for (int i = 1; i <= t; ++i) {

                    current_statement_begin__ = 1423;
                    if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {

                        current_statement_begin__ = 1424;
                        for (int j = 1; j <= get_base1(p,i,"p",1); ++j) {

                            current_statement_begin__ = 1425;
                            stan::model::assign(delta, 
                                        stan::model::cons_list(stan::model::index_uni(pos), stan::model::nil_index_list()), 
                                        get_base1(b_prior_concentration,j,"b_prior_concentration",1), 
                                        "assigning variable delta");
                            current_statement_begin__ = 1426;
                            stan::math::assign(pos, (pos + 1));
                        }
                    }
                    current_statement_begin__ = 1429;
                    for (int j = 3; j <= get_base1(p,i,"p",1); ++j) {
                        current_statement_begin__ = 1429;
                        stan::math::assign(len_z_T, (len_z_T + (get_base1(p,i,"p",1) - 1)));
                    }
                }
            }
            current_statement_begin__ = 1434;
            if (as_bool(logical_eq(prior_dist_for_cov,2))) {

                current_statement_begin__ = 1435;
                if (as_bool(logical_gt(bK1,0))) {
                    current_statement_begin__ = 1436;
                    stan::math::assign(bCov1_idx, lower_tri_indices(bK1, pstream__));
                }
                current_statement_begin__ = 1437;
                if (as_bool(logical_gt(bK2,0))) {
                    current_statement_begin__ = 1438;
                    stan::math::assign(bCov2_idx, lower_tri_indices(bK2, pstream__));
                }
            }

            // validate transformed data
            current_statement_begin__ = 1379;
            check_greater_or_equal(function__,"yHs1",yHs1,0);
            current_statement_begin__ = 1380;
            check_greater_or_equal(function__,"yHs2",yHs2,0);
            current_statement_begin__ = 1381;
            check_greater_or_equal(function__,"yHs3",yHs3,0);
            current_statement_begin__ = 1384;
            check_greater_or_equal(function__,"len_z_T",len_z_T,0);
            current_statement_begin__ = 1385;
            check_greater_or_equal(function__,"len_var_group",len_var_group,0);
            current_statement_begin__ = 1386;
            check_greater_or_equal(function__,"len_rho",len_rho,0);
            current_statement_begin__ = 1387;
            check_greater_or_equal(function__,"pos",pos,1);
            current_statement_begin__ = 1388;
            for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
                check_greater_or_equal(function__,"delta[k0__]",delta[k0__],0);
            }
            current_statement_begin__ = 1391;
            current_statement_begin__ = 1392;
            current_statement_begin__ = 1395;
            current_statement_begin__ = 1397;
            current_statement_begin__ = 1399;
            current_statement_begin__ = 1401;
            current_statement_begin__ = 1402;
            current_statement_begin__ = 1403;
            current_statement_begin__ = 1404;
            current_statement_begin__ = 1405;
            current_statement_begin__ = 1406;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 1448;
            validate_non_negative_index("yGamma1", "logical_gt(get_base1(intercept_type,1,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
            num_params_r__ += logical_gt(get_base1(intercept_type,1,"intercept_type",1),0);
            current_statement_begin__ = 1450;
            validate_non_negative_index("yGamma2", "logical_gt(get_base1(intercept_type,2,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
            num_params_r__ += logical_gt(get_base1(intercept_type,2,"intercept_type",1),0);
            current_statement_begin__ = 1452;
            validate_non_negative_index("yGamma3", "logical_gt(get_base1(intercept_type,3,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
            num_params_r__ += logical_gt(get_base1(intercept_type,3,"intercept_type",1),0);
            current_statement_begin__ = 1456;
            validate_non_negative_index("z_yBeta1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            num_params_r__ += get_base1(yK,1,"yK",1);
            current_statement_begin__ = 1457;
            validate_non_negative_index("z_yBeta2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            num_params_r__ += get_base1(yK,2,"yK",1);
            current_statement_begin__ = 1458;
            validate_non_negative_index("z_yBeta3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            num_params_r__ += get_base1(yK,3,"yK",1);
            current_statement_begin__ = 1461;
            validate_non_negative_index("z_b", "(logical_eq(prior_dist_for_cov,1) ? q : 0 )", (logical_eq(prior_dist_for_cov,1) ? q : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? q : 0 );
            current_statement_begin__ = 1462;
            validate_non_negative_index("z_T", "(logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 );
            current_statement_begin__ = 1463;
            validate_non_negative_index("rho", "(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 );
            current_statement_begin__ = 1464;
            validate_non_negative_index("zeta", "(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 );
            current_statement_begin__ = 1465;
            validate_non_negative_index("tau", "(logical_eq(prior_dist_for_cov,1) ? t : 0 )", (logical_eq(prior_dist_for_cov,1) ? t : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,1) ? t : 0 );
            current_statement_begin__ = 1469;
            validate_non_negative_index("bSd1", "(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 )", (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 );
            current_statement_begin__ = 1471;
        validate_non_negative_index("z_bMat1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ));
            validate_non_negative_index("z_bMat1", "(logical_gt(bK1,0) ? bN1 : 0 )", (logical_gt(bK1,0) ? bN1 : 0 ));
            num_params_r__ += ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ) * (logical_gt(bK1,0) ? bN1 : 0 );
            current_statement_begin__ = 1473;
            validate_non_negative_index("bCholesky1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
            num_params_r__ += ((((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ) * (((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ) - 1)) / 2);
            current_statement_begin__ = 1477;
            validate_non_negative_index("bSd2", "(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 )", (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));
            num_params_r__ += (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 );
            current_statement_begin__ = 1479;
        validate_non_negative_index("z_bMat2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ));
            validate_non_negative_index("z_bMat2", "(logical_gt(bK2,0) ? bN2 : 0 )", (logical_gt(bK2,0) ? bN2 : 0 ));
            num_params_r__ += ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ) * (logical_gt(bK2,0) ? bN2 : 0 );
            current_statement_begin__ = 1481;
            validate_non_negative_index("bCholesky2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
            num_params_r__ += ((((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ) * (((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ) - 1)) / 2);
            current_statement_begin__ = 1484;
            validate_non_negative_index("yAux1_unscaled", "get_base1(has_aux,1,\"has_aux\",1)", get_base1(has_aux,1,"has_aux",1));
            num_params_r__ += get_base1(has_aux,1,"has_aux",1);
            current_statement_begin__ = 1485;
            validate_non_negative_index("yAux2_unscaled", "get_base1(has_aux,2,\"has_aux\",1)", get_base1(has_aux,2,"has_aux",1));
            num_params_r__ += get_base1(has_aux,2,"has_aux",1);
            current_statement_begin__ = 1486;
            validate_non_negative_index("yAux3_unscaled", "get_base1(has_aux,3,\"has_aux\",1)", get_base1(has_aux,3,"has_aux",1));
            num_params_r__ += get_base1(has_aux,3,"has_aux",1);
            current_statement_begin__ = 1489;
            validate_non_negative_index("yGlobal1", "yHs1", yHs1);
            num_params_r__ += yHs1;
            current_statement_begin__ = 1490;
            validate_non_negative_index("yGlobal2", "yHs2", yHs2);
            num_params_r__ += yHs2;
            current_statement_begin__ = 1491;
            validate_non_negative_index("yGlobal3", "yHs3", yHs3);
            num_params_r__ += yHs3;
            current_statement_begin__ = 1492;
            validate_non_negative_index("yLocal1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            validate_non_negative_index("yLocal1", "yHs1", yHs1);
            num_params_r__ += get_base1(yK,1,"yK",1) * yHs1;
            current_statement_begin__ = 1493;
            validate_non_negative_index("yLocal2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            validate_non_negative_index("yLocal2", "yHs2", yHs2);
            num_params_r__ += get_base1(yK,2,"yK",1) * yHs2;
            current_statement_begin__ = 1494;
            validate_non_negative_index("yLocal3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            validate_non_negative_index("yLocal3", "yHs3", yHs3);
            num_params_r__ += get_base1(yK,3,"yK",1) * yHs3;
            current_statement_begin__ = 1495;
            validate_non_negative_index("y_caux1", "logical_gt(yHs1,0)", logical_gt(yHs1,0));
            num_params_r__ += logical_gt(yHs1,0);
            current_statement_begin__ = 1496;
            validate_non_negative_index("y_caux2", "logical_gt(yHs2,0)", logical_gt(yHs2,0));
            num_params_r__ += logical_gt(yHs2,0);
            current_statement_begin__ = 1497;
            validate_non_negative_index("y_caux3", "logical_gt(yHs3,0)", logical_gt(yHs3,0));
            num_params_r__ += logical_gt(yHs3,0);
            current_statement_begin__ = 1498;
            validate_non_negative_index("yOol1", "logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6));
            num_params_r__ += logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6);
            current_statement_begin__ = 1499;
            validate_non_negative_index("yOol2", "logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6));
            num_params_r__ += logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6);
            current_statement_begin__ = 1500;
            validate_non_negative_index("yOol3", "logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6));
            num_params_r__ += logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6);
            current_statement_begin__ = 1501;
            validate_non_negative_index("yMix1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            validate_non_negative_index("yMix1", "(primitive_value(logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))));
            num_params_r__ += get_base1(yK,1,"yK",1) * (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6)));
            current_statement_begin__ = 1502;
            validate_non_negative_index("yMix2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            validate_non_negative_index("yMix2", "(primitive_value(logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))));
            num_params_r__ += get_base1(yK,2,"yK",1) * (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6)));
            current_statement_begin__ = 1503;
            validate_non_negative_index("yMix3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            validate_non_negative_index("yMix3", "(primitive_value(logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))));
            num_params_r__ += get_base1(yK,3,"yK",1) * (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_mvmer2() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("yGamma1")))
            throw std::runtime_error("variable yGamma1 missing");
        vals_r__ = context__.vals_r("yGamma1");
        pos__ = 0U;
        validate_non_negative_index("yGamma1", "logical_gt(get_base1(intercept_type,1,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
        context__.validate_dims("initialization", "yGamma1", "double", context__.to_vec(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0)));
        std::vector<double> yGamma1(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++i0__)
            yGamma1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(lb(get_base1(intercept_type,1,"intercept_type",1), pstream__),ub(get_base1(intercept_type,1,"intercept_type",1), pstream__),yGamma1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGamma1: ") + e.what());
        }

        if (!(context__.contains_r("yGamma2")))
            throw std::runtime_error("variable yGamma2 missing");
        vals_r__ = context__.vals_r("yGamma2");
        pos__ = 0U;
        validate_non_negative_index("yGamma2", "logical_gt(get_base1(intercept_type,2,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
        context__.validate_dims("initialization", "yGamma2", "double", context__.to_vec(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0)));
        std::vector<double> yGamma2(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++i0__)
            yGamma2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(lb(get_base1(intercept_type,2,"intercept_type",1), pstream__),ub(get_base1(intercept_type,2,"intercept_type",1), pstream__),yGamma2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGamma2: ") + e.what());
        }

        if (!(context__.contains_r("yGamma3")))
            throw std::runtime_error("variable yGamma3 missing");
        vals_r__ = context__.vals_r("yGamma3");
        pos__ = 0U;
        validate_non_negative_index("yGamma3", "logical_gt(get_base1(intercept_type,3,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
        context__.validate_dims("initialization", "yGamma3", "double", context__.to_vec(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0)));
        std::vector<double> yGamma3(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++i0__)
            yGamma3[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(lb(get_base1(intercept_type,3,"intercept_type",1), pstream__),ub(get_base1(intercept_type,3,"intercept_type",1), pstream__),yGamma3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGamma3: ") + e.what());
        }

        if (!(context__.contains_r("z_yBeta1")))
            throw std::runtime_error("variable z_yBeta1 missing");
        vals_r__ = context__.vals_r("z_yBeta1");
        pos__ = 0U;
        validate_non_negative_index("z_yBeta1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
        context__.validate_dims("initialization", "z_yBeta1", "vector_d", context__.to_vec(get_base1(yK,1,"yK",1)));
        vector_d z_yBeta1(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
        for (int j1__ = 0U; j1__ < get_base1(yK,1,"yK",1); ++j1__)
            z_yBeta1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_yBeta1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_yBeta1: ") + e.what());
        }

        if (!(context__.contains_r("z_yBeta2")))
            throw std::runtime_error("variable z_yBeta2 missing");
        vals_r__ = context__.vals_r("z_yBeta2");
        pos__ = 0U;
        validate_non_negative_index("z_yBeta2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
        context__.validate_dims("initialization", "z_yBeta2", "vector_d", context__.to_vec(get_base1(yK,2,"yK",1)));
        vector_d z_yBeta2(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
        for (int j1__ = 0U; j1__ < get_base1(yK,2,"yK",1); ++j1__)
            z_yBeta2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_yBeta2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_yBeta2: ") + e.what());
        }

        if (!(context__.contains_r("z_yBeta3")))
            throw std::runtime_error("variable z_yBeta3 missing");
        vals_r__ = context__.vals_r("z_yBeta3");
        pos__ = 0U;
        validate_non_negative_index("z_yBeta3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
        context__.validate_dims("initialization", "z_yBeta3", "vector_d", context__.to_vec(get_base1(yK,3,"yK",1)));
        vector_d z_yBeta3(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
        for (int j1__ = 0U; j1__ < get_base1(yK,3,"yK",1); ++j1__)
            z_yBeta3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_yBeta3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_yBeta3: ") + e.what());
        }

        if (!(context__.contains_r("z_b")))
            throw std::runtime_error("variable z_b missing");
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        validate_non_negative_index("z_b", "(logical_eq(prior_dist_for_cov,1) ? q : 0 )", (logical_eq(prior_dist_for_cov,1) ? q : 0 ));
        context__.validate_dims("initialization", "z_b", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? q : 0 )));
        vector_d z_b(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? q : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? q : 0 ); ++j1__)
            z_b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_b: ") + e.what());
        }

        if (!(context__.contains_r("z_T")))
            throw std::runtime_error("variable z_T missing");
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        validate_non_negative_index("z_T", "(logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));
        context__.validate_dims("initialization", "z_T", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 )));
        vector_d z_T(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ); ++j1__)
            z_T(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_T: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));
        context__.validate_dims("initialization", "rho", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? len_rho : 0 )));
        vector_d rho(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? len_rho : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ); ++j1__)
            rho(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        validate_non_negative_index("zeta", "(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 )", (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));
        context__.validate_dims("initialization", "zeta", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 )));
        vector_d zeta(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ); ++j1__)
            zeta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "(logical_eq(prior_dist_for_cov,1) ? t : 0 )", (logical_eq(prior_dist_for_cov,1) ? t : 0 ));
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,1) ? t : 0 )));
        vector_d tau(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,1) ? t : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,1) ? t : 0 ); ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("bSd1")))
            throw std::runtime_error("variable bSd1 missing");
        vals_r__ = context__.vals_r("bSd1");
        pos__ = 0U;
        validate_non_negative_index("bSd1", "(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 )", (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));
        context__.validate_dims("initialization", "bSd1", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,2) ? bK1 : 0 )));
        vector_d bSd1(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,2) ? bK1 : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ); ++j1__)
            bSd1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,bSd1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bSd1: ") + e.what());
        }

        if (!(context__.contains_r("z_bMat1")))
            throw std::runtime_error("variable z_bMat1 missing");
        vals_r__ = context__.vals_r("z_bMat1");
        pos__ = 0U;
        validate_non_negative_index("z_bMat1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ));
        validate_non_negative_index("z_bMat1", "(logical_gt(bK1,0) ? bN1 : 0 )", (logical_gt(bK1,0) ? bN1 : 0 ));
        context__.validate_dims("initialization", "z_bMat1", "matrix_d", context__.to_vec(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ),(logical_gt(bK1,0) ? bN1 : 0 )));
        matrix_d z_bMat1(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 )),static_cast<Eigen::VectorXd::Index>((logical_gt(bK1,0) ? bN1 : 0 )));
        for (int j2__ = 0U; j2__ < (logical_gt(bK1,0) ? bN1 : 0 ); ++j2__)
            for (int j1__ = 0U; j1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ); ++j1__)
                z_bMat1(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(z_bMat1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_bMat1: ") + e.what());
        }

        if (!(context__.contains_r("bCholesky1")))
            throw std::runtime_error("variable bCholesky1 missing");
        vals_r__ = context__.vals_r("bCholesky1");
        pos__ = 0U;
        validate_non_negative_index("bCholesky1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        validate_non_negative_index("bCholesky1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        context__.validate_dims("initialization", "bCholesky1", "matrix_d", context__.to_vec(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ),((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )));
        matrix_d bCholesky1(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )),static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 )));
        for (int j2__ = 0U; j2__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++j2__)
            for (int j1__ = 0U; j1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++j1__)
                bCholesky1(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(bCholesky1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bCholesky1: ") + e.what());
        }

        if (!(context__.contains_r("bSd2")))
            throw std::runtime_error("variable bSd2 missing");
        vals_r__ = context__.vals_r("bSd2");
        pos__ = 0U;
        validate_non_negative_index("bSd2", "(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 )", (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));
        context__.validate_dims("initialization", "bSd2", "vector_d", context__.to_vec((logical_eq(prior_dist_for_cov,2) ? bK2 : 0 )));
        vector_d bSd2(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_cov,2) ? bK2 : 0 )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ); ++j1__)
            bSd2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,bSd2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bSd2: ") + e.what());
        }

        if (!(context__.contains_r("z_bMat2")))
            throw std::runtime_error("variable z_bMat2 missing");
        vals_r__ = context__.vals_r("z_bMat2");
        pos__ = 0U;
        validate_non_negative_index("z_bMat2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ));
        validate_non_negative_index("z_bMat2", "(logical_gt(bK2,0) ? bN2 : 0 )", (logical_gt(bK2,0) ? bN2 : 0 ));
        context__.validate_dims("initialization", "z_bMat2", "matrix_d", context__.to_vec(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ),(logical_gt(bK2,0) ? bN2 : 0 )));
        matrix_d z_bMat2(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 )),static_cast<Eigen::VectorXd::Index>((logical_gt(bK2,0) ? bN2 : 0 )));
        for (int j2__ = 0U; j2__ < (logical_gt(bK2,0) ? bN2 : 0 ); ++j2__)
            for (int j1__ = 0U; j1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ); ++j1__)
                z_bMat2(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(z_bMat2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_bMat2: ") + e.what());
        }

        if (!(context__.contains_r("bCholesky2")))
            throw std::runtime_error("variable bCholesky2 missing");
        vals_r__ = context__.vals_r("bCholesky2");
        pos__ = 0U;
        validate_non_negative_index("bCholesky2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        validate_non_negative_index("bCholesky2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        context__.validate_dims("initialization", "bCholesky2", "matrix_d", context__.to_vec(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ),((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )));
        matrix_d bCholesky2(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )),static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 )));
        for (int j2__ = 0U; j2__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++j2__)
            for (int j1__ = 0U; j1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++j1__)
                bCholesky2(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(bCholesky2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bCholesky2: ") + e.what());
        }

        if (!(context__.contains_r("yAux1_unscaled")))
            throw std::runtime_error("variable yAux1_unscaled missing");
        vals_r__ = context__.vals_r("yAux1_unscaled");
        pos__ = 0U;
        validate_non_negative_index("yAux1_unscaled", "get_base1(has_aux,1,\"has_aux\",1)", get_base1(has_aux,1,"has_aux",1));
        context__.validate_dims("initialization", "yAux1_unscaled", "double", context__.to_vec(get_base1(has_aux,1,"has_aux",1)));
        std::vector<double> yAux1_unscaled(get_base1(has_aux,1,"has_aux",1),double(0));
        for (int i0__ = 0U; i0__ < get_base1(has_aux,1,"has_aux",1); ++i0__)
            yAux1_unscaled[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < get_base1(has_aux,1,"has_aux",1); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yAux1_unscaled[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yAux1_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("yAux2_unscaled")))
            throw std::runtime_error("variable yAux2_unscaled missing");
        vals_r__ = context__.vals_r("yAux2_unscaled");
        pos__ = 0U;
        validate_non_negative_index("yAux2_unscaled", "get_base1(has_aux,2,\"has_aux\",1)", get_base1(has_aux,2,"has_aux",1));
        context__.validate_dims("initialization", "yAux2_unscaled", "double", context__.to_vec(get_base1(has_aux,2,"has_aux",1)));
        std::vector<double> yAux2_unscaled(get_base1(has_aux,2,"has_aux",1),double(0));
        for (int i0__ = 0U; i0__ < get_base1(has_aux,2,"has_aux",1); ++i0__)
            yAux2_unscaled[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < get_base1(has_aux,2,"has_aux",1); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yAux2_unscaled[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yAux2_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("yAux3_unscaled")))
            throw std::runtime_error("variable yAux3_unscaled missing");
        vals_r__ = context__.vals_r("yAux3_unscaled");
        pos__ = 0U;
        validate_non_negative_index("yAux3_unscaled", "get_base1(has_aux,3,\"has_aux\",1)", get_base1(has_aux,3,"has_aux",1));
        context__.validate_dims("initialization", "yAux3_unscaled", "double", context__.to_vec(get_base1(has_aux,3,"has_aux",1)));
        std::vector<double> yAux3_unscaled(get_base1(has_aux,3,"has_aux",1),double(0));
        for (int i0__ = 0U; i0__ < get_base1(has_aux,3,"has_aux",1); ++i0__)
            yAux3_unscaled[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < get_base1(has_aux,3,"has_aux",1); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yAux3_unscaled[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yAux3_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("yGlobal1")))
            throw std::runtime_error("variable yGlobal1 missing");
        vals_r__ = context__.vals_r("yGlobal1");
        pos__ = 0U;
        validate_non_negative_index("yGlobal1", "yHs1", yHs1);
        context__.validate_dims("initialization", "yGlobal1", "double", context__.to_vec(yHs1));
        std::vector<double> yGlobal1(yHs1,double(0));
        for (int i0__ = 0U; i0__ < yHs1; ++i0__)
            yGlobal1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs1; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yGlobal1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGlobal1: ") + e.what());
        }

        if (!(context__.contains_r("yGlobal2")))
            throw std::runtime_error("variable yGlobal2 missing");
        vals_r__ = context__.vals_r("yGlobal2");
        pos__ = 0U;
        validate_non_negative_index("yGlobal2", "yHs2", yHs2);
        context__.validate_dims("initialization", "yGlobal2", "double", context__.to_vec(yHs2));
        std::vector<double> yGlobal2(yHs2,double(0));
        for (int i0__ = 0U; i0__ < yHs2; ++i0__)
            yGlobal2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs2; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yGlobal2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGlobal2: ") + e.what());
        }

        if (!(context__.contains_r("yGlobal3")))
            throw std::runtime_error("variable yGlobal3 missing");
        vals_r__ = context__.vals_r("yGlobal3");
        pos__ = 0U;
        validate_non_negative_index("yGlobal3", "yHs3", yHs3);
        context__.validate_dims("initialization", "yGlobal3", "double", context__.to_vec(yHs3));
        std::vector<double> yGlobal3(yHs3,double(0));
        for (int i0__ = 0U; i0__ < yHs3; ++i0__)
            yGlobal3[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs3; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yGlobal3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yGlobal3: ") + e.what());
        }

        if (!(context__.contains_r("yLocal1")))
            throw std::runtime_error("variable yLocal1 missing");
        vals_r__ = context__.vals_r("yLocal1");
        pos__ = 0U;
        validate_non_negative_index("yLocal1", "yHs1", yHs1);
        validate_non_negative_index("yLocal1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
        context__.validate_dims("initialization", "yLocal1", "vector_d", context__.to_vec(yHs1,get_base1(yK,1,"yK",1)));
        std::vector<vector_d> yLocal1(yHs1,vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,1,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < yHs1; ++i0__)
                yLocal1[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs1; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yLocal1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yLocal1: ") + e.what());
        }

        if (!(context__.contains_r("yLocal2")))
            throw std::runtime_error("variable yLocal2 missing");
        vals_r__ = context__.vals_r("yLocal2");
        pos__ = 0U;
        validate_non_negative_index("yLocal2", "yHs2", yHs2);
        validate_non_negative_index("yLocal2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
        context__.validate_dims("initialization", "yLocal2", "vector_d", context__.to_vec(yHs2,get_base1(yK,2,"yK",1)));
        std::vector<vector_d> yLocal2(yHs2,vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,2,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < yHs2; ++i0__)
                yLocal2[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs2; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yLocal2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yLocal2: ") + e.what());
        }

        if (!(context__.contains_r("yLocal3")))
            throw std::runtime_error("variable yLocal3 missing");
        vals_r__ = context__.vals_r("yLocal3");
        pos__ = 0U;
        validate_non_negative_index("yLocal3", "yHs3", yHs3);
        validate_non_negative_index("yLocal3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
        context__.validate_dims("initialization", "yLocal3", "vector_d", context__.to_vec(yHs3,get_base1(yK,3,"yK",1)));
        std::vector<vector_d> yLocal3(yHs3,vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,3,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < yHs3; ++i0__)
                yLocal3[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < yHs3; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yLocal3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yLocal3: ") + e.what());
        }

        if (!(context__.contains_r("y_caux1")))
            throw std::runtime_error("variable y_caux1 missing");
        vals_r__ = context__.vals_r("y_caux1");
        pos__ = 0U;
        validate_non_negative_index("y_caux1", "logical_gt(yHs1,0)", logical_gt(yHs1,0));
        context__.validate_dims("initialization", "y_caux1", "double", context__.to_vec(logical_gt(yHs1,0)));
        std::vector<double> y_caux1(logical_gt(yHs1,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(yHs1,0); ++i0__)
            y_caux1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(yHs1,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y_caux1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_caux1: ") + e.what());
        }

        if (!(context__.contains_r("y_caux2")))
            throw std::runtime_error("variable y_caux2 missing");
        vals_r__ = context__.vals_r("y_caux2");
        pos__ = 0U;
        validate_non_negative_index("y_caux2", "logical_gt(yHs2,0)", logical_gt(yHs2,0));
        context__.validate_dims("initialization", "y_caux2", "double", context__.to_vec(logical_gt(yHs2,0)));
        std::vector<double> y_caux2(logical_gt(yHs2,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(yHs2,0); ++i0__)
            y_caux2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(yHs2,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y_caux2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_caux2: ") + e.what());
        }

        if (!(context__.contains_r("y_caux3")))
            throw std::runtime_error("variable y_caux3 missing");
        vals_r__ = context__.vals_r("y_caux3");
        pos__ = 0U;
        validate_non_negative_index("y_caux3", "logical_gt(yHs3,0)", logical_gt(yHs3,0));
        context__.validate_dims("initialization", "y_caux3", "double", context__.to_vec(logical_gt(yHs3,0)));
        std::vector<double> y_caux3(logical_gt(yHs3,0),double(0));
        for (int i0__ = 0U; i0__ < logical_gt(yHs3,0); ++i0__)
            y_caux3[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_gt(yHs3,0); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y_caux3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_caux3: ") + e.what());
        }

        if (!(context__.contains_r("yOol1")))
            throw std::runtime_error("variable yOol1 missing");
        vals_r__ = context__.vals_r("yOol1");
        pos__ = 0U;
        validate_non_negative_index("yOol1", "logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6));
        context__.validate_dims("initialization", "yOol1", "double", context__.to_vec(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6)));
        std::vector<double> yOol1(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++i0__)
            yOol1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yOol1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yOol1: ") + e.what());
        }

        if (!(context__.contains_r("yOol2")))
            throw std::runtime_error("variable yOol2 missing");
        vals_r__ = context__.vals_r("yOol2");
        pos__ = 0U;
        validate_non_negative_index("yOol2", "logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6));
        context__.validate_dims("initialization", "yOol2", "double", context__.to_vec(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6)));
        std::vector<double> yOol2(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++i0__)
            yOol2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yOol2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yOol2: ") + e.what());
        }

        if (!(context__.contains_r("yOol3")))
            throw std::runtime_error("variable yOol3 missing");
        vals_r__ = context__.vals_r("yOol3");
        pos__ = 0U;
        validate_non_negative_index("yOol3", "logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),6)", logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6));
        context__.validate_dims("initialization", "yOol3", "double", context__.to_vec(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6)));
        std::vector<double> yOol3(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++i0__)
            yOol3[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,yOol3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yOol3: ") + e.what());
        }

        if (!(context__.contains_r("yMix1")))
            throw std::runtime_error("variable yMix1 missing");
        vals_r__ = context__.vals_r("yMix1");
        pos__ = 0U;
        validate_non_negative_index("yMix1", "(primitive_value(logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))));
        validate_non_negative_index("yMix1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
        context__.validate_dims("initialization", "yMix1", "vector_d", context__.to_vec((primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))),get_base1(yK,1,"yK",1)));
        std::vector<vector_d> yMix1((primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))),vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,1,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++i0__)
                yMix1[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yMix1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yMix1: ") + e.what());
        }

        if (!(context__.contains_r("yMix2")))
            throw std::runtime_error("variable yMix2 missing");
        vals_r__ = context__.vals_r("yMix2");
        pos__ = 0U;
        validate_non_negative_index("yMix2", "(primitive_value(logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))));
        validate_non_negative_index("yMix2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
        context__.validate_dims("initialization", "yMix2", "vector_d", context__.to_vec((primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))),get_base1(yK,2,"yK",1)));
        std::vector<vector_d> yMix2((primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))),vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,2,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++i0__)
                yMix2[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yMix2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yMix2: ") + e.what());
        }

        if (!(context__.contains_r("yMix3")))
            throw std::runtime_error("variable yMix3 missing");
        vals_r__ = context__.vals_r("yMix3");
        pos__ = 0U;
        validate_non_negative_index("yMix3", "(primitive_value(logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,\"y_prior_dist\",1),6)))", (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))));
        validate_non_negative_index("yMix3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
        context__.validate_dims("initialization", "yMix3", "vector_d", context__.to_vec((primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))),get_base1(yK,3,"yK",1)));
        std::vector<vector_d> yMix3((primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))),vector_d(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1))));
        for (int j1__ = 0U; j1__ < get_base1(yK,3,"yK",1); ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++i0__)
                yMix3[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,yMix3[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yMix3: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> yGamma1;
            size_t dim_yGamma1_0__ = logical_gt(get_base1(intercept_type,1,"intercept_type",1),0);
            yGamma1.reserve(dim_yGamma1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGamma1_0__; ++k_0__) {
                if (jacobian__)
                    yGamma1.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,1,"intercept_type",1), pstream__),ub(get_base1(intercept_type,1,"intercept_type",1), pstream__),lp__));
                else
                    yGamma1.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,1,"intercept_type",1), pstream__),ub(get_base1(intercept_type,1,"intercept_type",1), pstream__)));
            }

            vector<local_scalar_t__> yGamma2;
            size_t dim_yGamma2_0__ = logical_gt(get_base1(intercept_type,2,"intercept_type",1),0);
            yGamma2.reserve(dim_yGamma2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGamma2_0__; ++k_0__) {
                if (jacobian__)
                    yGamma2.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,2,"intercept_type",1), pstream__),ub(get_base1(intercept_type,2,"intercept_type",1), pstream__),lp__));
                else
                    yGamma2.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,2,"intercept_type",1), pstream__),ub(get_base1(intercept_type,2,"intercept_type",1), pstream__)));
            }

            vector<local_scalar_t__> yGamma3;
            size_t dim_yGamma3_0__ = logical_gt(get_base1(intercept_type,3,"intercept_type",1),0);
            yGamma3.reserve(dim_yGamma3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGamma3_0__; ++k_0__) {
                if (jacobian__)
                    yGamma3.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,3,"intercept_type",1), pstream__),ub(get_base1(intercept_type,3,"intercept_type",1), pstream__),lp__));
                else
                    yGamma3.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,3,"intercept_type",1), pstream__),ub(get_base1(intercept_type,3,"intercept_type",1), pstream__)));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_yBeta1;
            (void) z_yBeta1;  // dummy to suppress unused var warning
            if (jacobian__)
                z_yBeta1 = in__.vector_constrain(get_base1(yK,1,"yK",1),lp__);
            else
                z_yBeta1 = in__.vector_constrain(get_base1(yK,1,"yK",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_yBeta2;
            (void) z_yBeta2;  // dummy to suppress unused var warning
            if (jacobian__)
                z_yBeta2 = in__.vector_constrain(get_base1(yK,2,"yK",1),lp__);
            else
                z_yBeta2 = in__.vector_constrain(get_base1(yK,2,"yK",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_yBeta3;
            (void) z_yBeta3;  // dummy to suppress unused var warning
            if (jacobian__)
                z_yBeta3 = in__.vector_constrain(get_base1(yK,3,"yK",1),lp__);
            else
                z_yBeta3 = in__.vector_constrain(get_base1(yK,3,"yK",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_b;
            (void) z_b;  // dummy to suppress unused var warning
            if (jacobian__)
                z_b = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? q : 0 ),lp__);
            else
                z_b = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? q : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_T;
            (void) z_T;  // dummy to suppress unused var warning
            if (jacobian__)
                z_T = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ),lp__);
            else
                z_T = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.vector_lub_constrain(0,1,(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ),lp__);
            else
                rho = in__.vector_lub_constrain(0,1,(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ),lp__);
            else
                zeta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? t : 0 ),lp__);
            else
                tau = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? t : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bSd1;
            (void) bSd1;  // dummy to suppress unused var warning
            if (jacobian__)
                bSd1 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ),lp__);
            else
                bSd1 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z_bMat1;
            (void) z_bMat1;  // dummy to suppress unused var warning
            if (jacobian__)
                z_bMat1 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ),(logical_gt(bK1,0) ? bN1 : 0 ),lp__);
            else
                z_bMat1 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ),(logical_gt(bK1,0) ? bN1 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bCholesky1;
            (void) bCholesky1;  // dummy to suppress unused var warning
            if (jacobian__)
                bCholesky1 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ),lp__);
            else
                bCholesky1 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bSd2;
            (void) bSd2;  // dummy to suppress unused var warning
            if (jacobian__)
                bSd2 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ),lp__);
            else
                bSd2 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z_bMat2;
            (void) z_bMat2;  // dummy to suppress unused var warning
            if (jacobian__)
                z_bMat2 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ),(logical_gt(bK2,0) ? bN2 : 0 ),lp__);
            else
                z_bMat2 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ),(logical_gt(bK2,0) ? bN2 : 0 ));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bCholesky2;
            (void) bCholesky2;  // dummy to suppress unused var warning
            if (jacobian__)
                bCholesky2 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ),lp__);
            else
                bCholesky2 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));

            vector<local_scalar_t__> yAux1_unscaled;
            size_t dim_yAux1_unscaled_0__ = get_base1(has_aux,1,"has_aux",1);
            yAux1_unscaled.reserve(dim_yAux1_unscaled_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yAux1_unscaled_0__; ++k_0__) {
                if (jacobian__)
                    yAux1_unscaled.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yAux1_unscaled.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yAux2_unscaled;
            size_t dim_yAux2_unscaled_0__ = get_base1(has_aux,2,"has_aux",1);
            yAux2_unscaled.reserve(dim_yAux2_unscaled_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yAux2_unscaled_0__; ++k_0__) {
                if (jacobian__)
                    yAux2_unscaled.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yAux2_unscaled.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yAux3_unscaled;
            size_t dim_yAux3_unscaled_0__ = get_base1(has_aux,3,"has_aux",1);
            yAux3_unscaled.reserve(dim_yAux3_unscaled_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yAux3_unscaled_0__; ++k_0__) {
                if (jacobian__)
                    yAux3_unscaled.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yAux3_unscaled.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yGlobal1;
            size_t dim_yGlobal1_0__ = yHs1;
            yGlobal1.reserve(dim_yGlobal1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGlobal1_0__; ++k_0__) {
                if (jacobian__)
                    yGlobal1.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yGlobal1.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yGlobal2;
            size_t dim_yGlobal2_0__ = yHs2;
            yGlobal2.reserve(dim_yGlobal2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGlobal2_0__; ++k_0__) {
                if (jacobian__)
                    yGlobal2.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yGlobal2.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yGlobal3;
            size_t dim_yGlobal3_0__ = yHs3;
            yGlobal3.reserve(dim_yGlobal3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yGlobal3_0__; ++k_0__) {
                if (jacobian__)
                    yGlobal3.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yGlobal3.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yLocal1;
            size_t dim_yLocal1_0__ = yHs1;
            yLocal1.reserve(dim_yLocal1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yLocal1_0__; ++k_0__) {
                if (jacobian__)
                    yLocal1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1),lp__));
                else
                    yLocal1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1)));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yLocal2;
            size_t dim_yLocal2_0__ = yHs2;
            yLocal2.reserve(dim_yLocal2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yLocal2_0__; ++k_0__) {
                if (jacobian__)
                    yLocal2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1),lp__));
                else
                    yLocal2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1)));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yLocal3;
            size_t dim_yLocal3_0__ = yHs3;
            yLocal3.reserve(dim_yLocal3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yLocal3_0__; ++k_0__) {
                if (jacobian__)
                    yLocal3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1),lp__));
                else
                    yLocal3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1)));
            }

            vector<local_scalar_t__> y_caux1;
            size_t dim_y_caux1_0__ = logical_gt(yHs1,0);
            y_caux1.reserve(dim_y_caux1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_y_caux1_0__; ++k_0__) {
                if (jacobian__)
                    y_caux1.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    y_caux1.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> y_caux2;
            size_t dim_y_caux2_0__ = logical_gt(yHs2,0);
            y_caux2.reserve(dim_y_caux2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_y_caux2_0__; ++k_0__) {
                if (jacobian__)
                    y_caux2.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    y_caux2.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> y_caux3;
            size_t dim_y_caux3_0__ = logical_gt(yHs3,0);
            y_caux3.reserve(dim_y_caux3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_y_caux3_0__; ++k_0__) {
                if (jacobian__)
                    y_caux3.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    y_caux3.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yOol1;
            size_t dim_yOol1_0__ = logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6);
            yOol1.reserve(dim_yOol1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yOol1_0__; ++k_0__) {
                if (jacobian__)
                    yOol1.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yOol1.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yOol2;
            size_t dim_yOol2_0__ = logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6);
            yOol2.reserve(dim_yOol2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yOol2_0__; ++k_0__) {
                if (jacobian__)
                    yOol2.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yOol2.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> yOol3;
            size_t dim_yOol3_0__ = logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6);
            yOol3.reserve(dim_yOol3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yOol3_0__; ++k_0__) {
                if (jacobian__)
                    yOol3.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    yOol3.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yMix1;
            size_t dim_yMix1_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6)));
            yMix1.reserve(dim_yMix1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yMix1_0__; ++k_0__) {
                if (jacobian__)
                    yMix1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1),lp__));
                else
                    yMix1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1)));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yMix2;
            size_t dim_yMix2_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6)));
            yMix2.reserve(dim_yMix2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yMix2_0__; ++k_0__) {
                if (jacobian__)
                    yMix2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1),lp__));
                else
                    yMix2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1)));
            }

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > yMix3;
            size_t dim_yMix3_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6)));
            yMix3.reserve(dim_yMix3_0__);
            for (size_t k_0__ = 0; k_0__ < dim_yMix3_0__; ++k_0__) {
                if (jacobian__)
                    yMix3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1),lp__));
                else
                    yMix3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1)));
            }


            // transformed parameters
            current_statement_begin__ = 1509;
            validate_non_negative_index("yBeta1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta1(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            (void) yBeta1;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta1, DUMMY_VAR__);
            stan::math::fill(yBeta1,DUMMY_VAR__);
            current_statement_begin__ = 1510;
            validate_non_negative_index("yBeta2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta2(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            (void) yBeta2;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta2, DUMMY_VAR__);
            stan::math::fill(yBeta2,DUMMY_VAR__);
            current_statement_begin__ = 1511;
            validate_non_negative_index("yBeta3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta3(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            (void) yBeta3;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta3, DUMMY_VAR__);
            stan::math::fill(yBeta3,DUMMY_VAR__);
            current_statement_begin__ = 1512;
            validate_non_negative_index("yAux1", "get_base1(has_aux,1,\"has_aux\",1)", get_base1(has_aux,1,"has_aux",1));
            vector<local_scalar_t__> yAux1(get_base1(has_aux,1,"has_aux",1));
            stan::math::initialize(yAux1, DUMMY_VAR__);
            stan::math::fill(yAux1,DUMMY_VAR__);
            current_statement_begin__ = 1513;
            validate_non_negative_index("yAux2", "get_base1(has_aux,2,\"has_aux\",1)", get_base1(has_aux,2,"has_aux",1));
            vector<local_scalar_t__> yAux2(get_base1(has_aux,2,"has_aux",1));
            stan::math::initialize(yAux2, DUMMY_VAR__);
            stan::math::fill(yAux2,DUMMY_VAR__);
            current_statement_begin__ = 1514;
            validate_non_negative_index("yAux3", "get_base1(has_aux,3,\"has_aux\",1)", get_base1(has_aux,3,"has_aux",1));
            vector<local_scalar_t__> yAux3(get_base1(has_aux,3,"has_aux",1));
            stan::math::initialize(yAux3, DUMMY_VAR__);
            stan::math::fill(yAux3,DUMMY_VAR__);
            current_statement_begin__ = 1515;
            validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
            (void) theta_L;  // dummy to suppress unused var warning

            stan::math::initialize(theta_L, DUMMY_VAR__);
            stan::math::fill(theta_L,DUMMY_VAR__);
            current_statement_begin__ = 1516;
            local_scalar_t__ yAuxMaximum;
            (void) yAuxMaximum;  // dummy to suppress unused var warning

            stan::math::initialize(yAuxMaximum, DUMMY_VAR__);
            stan::math::fill(yAuxMaximum,DUMMY_VAR__);
            stan::math::assign(yAuxMaximum,1.0);
            current_statement_begin__ = 1519;
            validate_non_negative_index("bMat1", "(logical_gt(bK1,0) ? bN1 : 0 )", (logical_gt(bK1,0) ? bN1 : 0 ));
            validate_non_negative_index("bMat1", "bK1", bK1);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bMat1(static_cast<Eigen::VectorXd::Index>((logical_gt(bK1,0) ? bN1 : 0 )),static_cast<Eigen::VectorXd::Index>(bK1));
            (void) bMat1;  // dummy to suppress unused var warning

            stan::math::initialize(bMat1, DUMMY_VAR__);
            stan::math::fill(bMat1,DUMMY_VAR__);
            current_statement_begin__ = 1520;
            validate_non_negative_index("bMat2", "(logical_gt(bK2,0) ? bN2 : 0 )", (logical_gt(bK2,0) ? bN2 : 0 ));
            validate_non_negative_index("bMat2", "bK2", bK2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bMat2(static_cast<Eigen::VectorXd::Index>((logical_gt(bK2,0) ? bN2 : 0 )),static_cast<Eigen::VectorXd::Index>(bK2));
            (void) bMat2;  // dummy to suppress unused var warning

            stan::math::initialize(bMat2, DUMMY_VAR__);
            stan::math::fill(bMat2,DUMMY_VAR__);


            current_statement_begin__ = 1523;
            if (as_bool(logical_eq(get_base1(has_aux,1,"has_aux",1),1))) {

                current_statement_begin__ = 1524;
                stan::model::assign(yAux1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            make_aux(get_base1(yAux1_unscaled,1,"yAux1_unscaled",1),get_base1(y_prior_dist_for_aux,1,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,1,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,1,"y_prior_scale_for_aux",1), pstream__), 
                            "assigning variable yAux1");
                current_statement_begin__ = 1526;
                if (as_bool(logical_gt(get_base1(yAux1,1,"yAux1",1),yAuxMaximum))) {
                    current_statement_begin__ = 1527;
                    stan::math::assign(yAuxMaximum, get_base1(yAux1,1,"yAux1",1));
                }
            }
            current_statement_begin__ = 1530;
            if (as_bool(logical_gt(get_base1(yK,1,"yK",1),0))) {
                current_statement_begin__ = 1531;
                stan::math::assign(yBeta1, make_beta(z_yBeta1,get_base1(y_prior_dist,1,"y_prior_dist",1),y_prior_mean1,y_prior_scale1,y_prior_df1,get_base1(y_global_prior_scale,1,"y_global_prior_scale",1),yGlobal1,yLocal1,yOol1,yMix1,yAux1,get_base1(family,1,"family",1),get_base1(y_slab_scale,1,"y_slab_scale",1),y_caux1, pstream__));
            }
            current_statement_begin__ = 1535;
            if (as_bool(logical_gt(M,1))) {

                current_statement_begin__ = 1536;
                if (as_bool(logical_eq(get_base1(has_aux,2,"has_aux",1),1))) {

                    current_statement_begin__ = 1537;
                    stan::model::assign(yAux2, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                make_aux(get_base1(yAux2_unscaled,1,"yAux2_unscaled",1),get_base1(y_prior_dist_for_aux,2,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,2,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,2,"y_prior_scale_for_aux",1), pstream__), 
                                "assigning variable yAux2");
                    current_statement_begin__ = 1539;
                    if (as_bool(logical_gt(get_base1(yAux2,1,"yAux2",1),yAuxMaximum))) {
                        current_statement_begin__ = 1540;
                        stan::math::assign(yAuxMaximum, get_base1(yAux2,1,"yAux2",1));
                    }
                }
                current_statement_begin__ = 1542;
                if (as_bool(logical_gt(get_base1(yK,2,"yK",1),0))) {
                    current_statement_begin__ = 1543;
                    stan::math::assign(yBeta2, make_beta(z_yBeta2,get_base1(y_prior_dist,2,"y_prior_dist",1),y_prior_mean2,y_prior_scale2,y_prior_df2,get_base1(y_global_prior_scale,2,"y_global_prior_scale",1),yGlobal2,yLocal2,yOol2,yMix2,yAux2,get_base1(family,2,"family",1),get_base1(y_slab_scale,2,"y_slab_scale",1),y_caux2, pstream__));
                }
            }
            current_statement_begin__ = 1548;
            if (as_bool(logical_gt(M,2))) {

                current_statement_begin__ = 1549;
                if (as_bool(logical_eq(get_base1(has_aux,3,"has_aux",1),1))) {

                    current_statement_begin__ = 1550;
                    stan::model::assign(yAux3, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                make_aux(get_base1(yAux3_unscaled,1,"yAux3_unscaled",1),get_base1(y_prior_dist_for_aux,3,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,3,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,3,"y_prior_scale_for_aux",1), pstream__), 
                                "assigning variable yAux3");
                    current_statement_begin__ = 1552;
                    if (as_bool(logical_gt(get_base1(yAux3,1,"yAux3",1),yAuxMaximum))) {
                        current_statement_begin__ = 1553;
                        stan::math::assign(yAuxMaximum, get_base1(yAux3,1,"yAux3",1));
                    }
                }
                current_statement_begin__ = 1555;
                if (as_bool(logical_gt(get_base1(yK,3,"yK",1),0))) {
                    current_statement_begin__ = 1556;
                    stan::math::assign(yBeta3, make_beta(z_yBeta3,get_base1(y_prior_dist,3,"y_prior_dist",1),y_prior_mean3,y_prior_scale3,y_prior_df3,get_base1(y_global_prior_scale,3,"y_global_prior_scale",1),yGlobal3,yLocal3,yOol3,yMix3,yAux3,get_base1(family,3,"family",1),get_base1(y_slab_scale,3,"y_slab_scale",1),y_caux3, pstream__));
                }
            }
            current_statement_begin__ = 1563;
            if (as_bool(logical_eq(prior_dist_for_cov,1))) {
                {
                current_statement_begin__ = 1564;
                int mark(0);
                (void) mark;  // dummy to suppress unused var warning

                stan::math::fill(mark, std::numeric_limits<int>::min());
                stan::math::assign(mark,1);


                current_statement_begin__ = 1566;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,yAuxMaximum,tau,b_prior_scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 1569;
                if (as_bool(logical_gt(bK1,0))) {
                    current_statement_begin__ = 1570;
                    stan::math::assign(bMat1, make_b_matrix(z_b,theta_L,p,l,1, pstream__));
                }
                current_statement_begin__ = 1572;
                if (as_bool(logical_gt(bK2,0))) {
                    current_statement_begin__ = 1573;
                    stan::math::assign(bMat2, make_b_matrix(z_b,theta_L,p,l,2, pstream__));
                }
                }
            } else if (as_bool(logical_eq(prior_dist_for_cov,2))) {

                current_statement_begin__ = 1579;
                if (as_bool(logical_eq(bK1,1))) {
                    current_statement_begin__ = 1580;
                    stan::math::assign(bMat1, transpose(multiply(get_base1(bSd1,1,"bSd1",1),z_bMat1)));
                } else if (as_bool(logical_gt(bK1,1))) {
                    current_statement_begin__ = 1582;
                    stan::math::assign(bMat1, transpose(multiply(diag_pre_multiply(bSd1,bCholesky1),z_bMat1)));
                }
                current_statement_begin__ = 1584;
                if (as_bool(logical_eq(bK2,1))) {
                    current_statement_begin__ = 1585;
                    stan::math::assign(bMat2, transpose(multiply(get_base1(bSd2,1,"bSd2",1),z_bMat2)));
                } else if (as_bool(logical_gt(bK2,1))) {
                    current_statement_begin__ = 1587;
                    stan::math::assign(bMat2, transpose(multiply(diag_pre_multiply(bSd2,bCholesky2),z_bMat2)));
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < get_base1(yK,1,"yK",1); ++i0__) {
                if (stan::math::is_uninitialized(yBeta1(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yBeta1" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(yK,2,"yK",1); ++i0__) {
                if (stan::math::is_uninitialized(yBeta2(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yBeta2" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(yK,3,"yK",1); ++i0__) {
                if (stan::math::is_uninitialized(yBeta3(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yBeta3" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(has_aux,1,"has_aux",1); ++i0__) {
                if (stan::math::is_uninitialized(yAux1[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yAux1" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(has_aux,2,"has_aux",1); ++i0__) {
                if (stan::math::is_uninitialized(yAux2[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yAux2" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < get_base1(has_aux,3,"has_aux",1); ++i0__) {
                if (stan::math::is_uninitialized(yAux3[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: yAux3" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < len_theta_L; ++i0__) {
                if (stan::math::is_uninitialized(theta_L(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_L" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            if (stan::math::is_uninitialized(yAuxMaximum)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: yAuxMaximum";
                throw std::runtime_error(msg__.str());
            }
            for (int i0__ = 0; i0__ < (logical_gt(bK1,0) ? bN1 : 0 ); ++i0__) {
                for (int i1__ = 0; i1__ < bK1; ++i1__) {
                    if (stan::math::is_uninitialized(bMat1(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: bMat1" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < (logical_gt(bK2,0) ? bN2 : 0 ); ++i0__) {
                for (int i1__ = 0; i1__ < bK2; ++i1__) {
                    if (stan::math::is_uninitialized(bMat2(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: bMat2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 1509;
            current_statement_begin__ = 1510;
            current_statement_begin__ = 1511;
            current_statement_begin__ = 1512;
            current_statement_begin__ = 1513;
            current_statement_begin__ = 1514;
            current_statement_begin__ = 1515;
            current_statement_begin__ = 1516;
            current_statement_begin__ = 1519;
            current_statement_begin__ = 1520;

            // model body
            {
            current_statement_begin__ = 1594;
            validate_non_negative_index("yEta1", "get_base1(yNeta,1,\"yNeta\",1)", get_base1(yNeta,1,"yNeta",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta1(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,1,"yNeta",1)));
            (void) yEta1;  // dummy to suppress unused var warning

            stan::math::initialize(yEta1, DUMMY_VAR__);
            stan::math::fill(yEta1,DUMMY_VAR__);
            current_statement_begin__ = 1595;
            validate_non_negative_index("yEta2", "get_base1(yNeta,2,\"yNeta\",1)", get_base1(yNeta,2,"yNeta",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta2(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,2,"yNeta",1)));
            (void) yEta2;  // dummy to suppress unused var warning

            stan::math::initialize(yEta2, DUMMY_VAR__);
            stan::math::fill(yEta2,DUMMY_VAR__);
            current_statement_begin__ = 1596;
            validate_non_negative_index("yEta3", "get_base1(yNeta,3,\"yNeta\",1)", get_base1(yNeta,3,"yNeta",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta3(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,3,"yNeta",1)));
            (void) yEta3;  // dummy to suppress unused var warning

            stan::math::initialize(yEta3, DUMMY_VAR__);
            stan::math::fill(yEta3,DUMMY_VAR__);


            current_statement_begin__ = 1599;
            if (as_bool(logical_gt(M,0))) {
                {
                current_statement_begin__ = 1600;
                int bMat1_colshift(0);
                (void) bMat1_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat1_colshift,0);
                current_statement_begin__ = 1601;
                int bMat2_colshift(0);
                (void) bMat2_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat2_colshift,0);


                current_statement_begin__ = 1602;
                stan::math::assign(yEta1, evaluate_eta(yX1,y1_Z1,y1_Z2,y1_Z1_id,y1_Z2_id,yGamma1,yBeta1,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,1,"intercept_type",1), pstream__));
                }
            }
            current_statement_begin__ = 1607;
            if (as_bool(logical_gt(M,1))) {
                {
                current_statement_begin__ = 1608;
                int bMat1_colshift(0);
                (void) bMat1_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat1_colshift,get_base1(bK1_len,1,"bK1_len",1));
                current_statement_begin__ = 1609;
                int bMat2_colshift(0);
                (void) bMat2_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat2_colshift,get_base1(bK2_len,1,"bK2_len",1));


                current_statement_begin__ = 1610;
                stan::math::assign(yEta2, evaluate_eta(yX2,y2_Z1,y2_Z2,y2_Z1_id,y2_Z2_id,yGamma2,yBeta2,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,2,"intercept_type",1), pstream__));
                }
            }
            current_statement_begin__ = 1615;
            if (as_bool(logical_gt(M,2))) {
                {
                current_statement_begin__ = 1616;
                int bMat1_colshift(0);
                (void) bMat1_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat1_colshift,sum(stan::model::rvalue(bK1_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK1_len")));
                current_statement_begin__ = 1617;
                int bMat2_colshift(0);
                (void) bMat2_colshift;  // dummy to suppress unused var warning

                stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
                stan::math::assign(bMat2_colshift,sum(stan::model::rvalue(bK2_len, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "bK2_len")));


                current_statement_begin__ = 1618;
                stan::math::assign(yEta3, evaluate_eta(yX3,y3_Z1,y3_Z2,y3_Z1_id,y3_Z2_id,yGamma3,yBeta3,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,3,"intercept_type",1), pstream__));
                }
            }
            current_statement_begin__ = 1623;
            if (as_bool(logical_eq(prior_PD,0))) {

                current_statement_begin__ = 1624;
                glm_lp(yReal1,yInt1,yEta1,yAux1,get_base1(family,1,"family",1),get_base1(link,1,"link",1),sum_log_y1,sqrt_y1,log_y1, lp__, lp_accum__, pstream__);
                current_statement_begin__ = 1625;
                if (as_bool(logical_gt(M,1))) {
                    current_statement_begin__ = 1626;
                    glm_lp(yReal2,yInt2,yEta2,yAux2,get_base1(family,2,"family",1),get_base1(link,2,"link",1),sum_log_y2,sqrt_y2,log_y2, lp__, lp_accum__, pstream__);
                }
                current_statement_begin__ = 1627;
                if (as_bool(logical_gt(M,2))) {
                    current_statement_begin__ = 1628;
                    glm_lp(yReal3,yInt3,yEta3,yAux3,get_base1(family,3,"family",1),get_base1(link,3,"link",1),sum_log_y3,sqrt_y3,log_y3, lp__, lp_accum__, pstream__);
                }
            }
            current_statement_begin__ = 1635;
            if (as_bool(logical_eq(get_base1(has_aux,1,"has_aux",1),1))) {
                current_statement_begin__ = 1636;
                aux_lp(get_base1(yAux1_unscaled,1,"yAux1_unscaled",1),get_base1(y_prior_dist_for_aux,1,"y_prior_dist_for_aux",1),get_base1(y_prior_scale_for_aux,1,"y_prior_scale_for_aux",1),get_base1(y_prior_df_for_aux,1,"y_prior_df_for_aux",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1638;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_eq(get_base1(has_aux,2,"has_aux",1),1))))) {
                current_statement_begin__ = 1639;
                aux_lp(get_base1(yAux2_unscaled,1,"yAux2_unscaled",1),get_base1(y_prior_dist_for_aux,2,"y_prior_dist_for_aux",1),get_base1(y_prior_scale_for_aux,2,"y_prior_scale_for_aux",1),get_base1(y_prior_df_for_aux,2,"y_prior_df_for_aux",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1641;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_eq(get_base1(has_aux,3,"has_aux",1),1))))) {
                current_statement_begin__ = 1642;
                aux_lp(get_base1(yAux3_unscaled,1,"yAux3_unscaled",1),get_base1(y_prior_dist_for_aux,3,"y_prior_dist_for_aux",1),get_base1(y_prior_scale_for_aux,3,"y_prior_scale_for_aux",1),get_base1(y_prior_df_for_aux,3,"y_prior_df_for_aux",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1646;
            if (as_bool(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0))) {
                current_statement_begin__ = 1647;
                gamma_lp(get_base1(yGamma1,1,"yGamma1",1),get_base1(y_prior_dist_for_intercept,1,"y_prior_dist_for_intercept",1),get_base1(y_prior_mean_for_intercept,1,"y_prior_mean_for_intercept",1),get_base1(y_prior_scale_for_intercept,1,"y_prior_scale_for_intercept",1),get_base1(y_prior_df_for_intercept,1,"y_prior_df_for_intercept",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1649;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0))))) {
                current_statement_begin__ = 1650;
                gamma_lp(get_base1(yGamma2,1,"yGamma2",1),get_base1(y_prior_dist_for_intercept,2,"y_prior_dist_for_intercept",1),get_base1(y_prior_mean_for_intercept,2,"y_prior_mean_for_intercept",1),get_base1(y_prior_scale_for_intercept,2,"y_prior_scale_for_intercept",1),get_base1(y_prior_df_for_intercept,2,"y_prior_df_for_intercept",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1652;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0))))) {
                current_statement_begin__ = 1653;
                gamma_lp(get_base1(yGamma3,1,"yGamma3",1),get_base1(y_prior_dist_for_intercept,3,"y_prior_dist_for_intercept",1),get_base1(y_prior_mean_for_intercept,3,"y_prior_mean_for_intercept",1),get_base1(y_prior_scale_for_intercept,3,"y_prior_scale_for_intercept",1),get_base1(y_prior_df_for_intercept,3,"y_prior_df_for_intercept",1), lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1657;
            if (as_bool(logical_gt(get_base1(yK,1,"yK",1),0))) {
                current_statement_begin__ = 1658;
                beta_lp(z_yBeta1,get_base1(y_prior_dist,1,"y_prior_dist",1),y_prior_scale1,y_prior_df1,get_base1(y_global_prior_df,1,"y_global_prior_df",1),yLocal1,yGlobal1,yMix1,yOol1,get_base1(y_slab_df,1,"y_slab_df",1),y_caux1, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1661;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_gt(get_base1(yK,2,"yK",1),0))))) {
                current_statement_begin__ = 1662;
                beta_lp(z_yBeta2,get_base1(y_prior_dist,2,"y_prior_dist",1),y_prior_scale2,y_prior_df2,get_base1(y_global_prior_df,2,"y_global_prior_df",1),yLocal2,yGlobal2,yMix2,yOol2,get_base1(y_slab_df,2,"y_slab_df",1),y_caux2, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1665;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_gt(get_base1(yK,3,"yK",1),0))))) {
                current_statement_begin__ = 1666;
                beta_lp(z_yBeta3,get_base1(y_prior_dist,3,"y_prior_dist",1),y_prior_scale3,y_prior_df3,get_base1(y_global_prior_df,3,"y_global_prior_df",1),yLocal3,yGlobal3,yMix3,yOol3,get_base1(y_slab_df,3,"y_slab_df",1),y_caux3, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 1671;
            if (as_bool(logical_eq(prior_dist_for_cov,1))) {
                {
                current_statement_begin__ = 1672;
                local_scalar_t__ dummy;
                (void) dummy;  // dummy to suppress unused var warning

                stan::math::initialize(dummy, DUMMY_VAR__);
                stan::math::fill(dummy,DUMMY_VAR__);
                stan::math::assign(dummy,decov_lp(z_b,z_T,rho,zeta,tau,b_prior_regularization,delta,b_prior_shape,t,p, lp__, lp_accum__, pstream__));


                }
            } else if (as_bool(logical_eq(prior_dist_for_cov,2))) {

                current_statement_begin__ = 1676;
                if (as_bool(logical_gt(bK1,0))) {

                    current_statement_begin__ = 1678;
                    lp_accum__.add(student_t_log(bSd1,b1_prior_df,0,b1_prior_scale));
                    current_statement_begin__ = 1680;
                    lp_accum__.add(normal_log(to_vector(z_bMat1),0,1));
                    current_statement_begin__ = 1682;
                    if (as_bool(logical_gt(bK1,1))) {
                        current_statement_begin__ = 1683;
                        lp_accum__.add(lkj_corr_cholesky_log(bCholesky1,b1_prior_regularization));
                    }
                }
                current_statement_begin__ = 1685;
                if (as_bool(logical_gt(bK2,0))) {

                    current_statement_begin__ = 1687;
                    lp_accum__.add(student_t_log(bSd2,b2_prior_df,0,b2_prior_scale));
                    current_statement_begin__ = 1689;
                    lp_accum__.add(normal_log(to_vector(z_bMat2),0,1));
                    current_statement_begin__ = 1691;
                    if (as_bool(logical_gt(bK2,1))) {
                        current_statement_begin__ = 1692;
                        lp_accum__.add(lkj_corr_cholesky_log(bCholesky2,b2_prior_regularization));
                    }
                }
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("yGamma1");
        names__.push_back("yGamma2");
        names__.push_back("yGamma3");
        names__.push_back("z_yBeta1");
        names__.push_back("z_yBeta2");
        names__.push_back("z_yBeta3");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau");
        names__.push_back("bSd1");
        names__.push_back("z_bMat1");
        names__.push_back("bCholesky1");
        names__.push_back("bSd2");
        names__.push_back("z_bMat2");
        names__.push_back("bCholesky2");
        names__.push_back("yAux1_unscaled");
        names__.push_back("yAux2_unscaled");
        names__.push_back("yAux3_unscaled");
        names__.push_back("yGlobal1");
        names__.push_back("yGlobal2");
        names__.push_back("yGlobal3");
        names__.push_back("yLocal1");
        names__.push_back("yLocal2");
        names__.push_back("yLocal3");
        names__.push_back("y_caux1");
        names__.push_back("y_caux2");
        names__.push_back("y_caux3");
        names__.push_back("yOol1");
        names__.push_back("yOol2");
        names__.push_back("yOol3");
        names__.push_back("yMix1");
        names__.push_back("yMix2");
        names__.push_back("yMix3");
        names__.push_back("yBeta1");
        names__.push_back("yBeta2");
        names__.push_back("yBeta3");
        names__.push_back("yAux1");
        names__.push_back("yAux2");
        names__.push_back("yAux3");
        names__.push_back("theta_L");
        names__.push_back("yAuxMaximum");
        names__.push_back("bMat1");
        names__.push_back("bMat2");
        names__.push_back("mean_PPD");
        names__.push_back("yAlpha1");
        names__.push_back("yAlpha2");
        names__.push_back("yAlpha3");
        names__.push_back("bCov1");
        names__.push_back("bCov2");
        names__.push_back("b1");
        names__.push_back("b2");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,1,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,2,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,3,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? q : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,1) ? t : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ));
        dims__.push_back((logical_gt(bK1,0) ? bN1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ));
        dims__.push_back((logical_gt(bK2,0) ? bN2 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,1,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,2,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,3,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs1);
        dims__.push_back(get_base1(yK,1,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs2);
        dims__.push_back(get_base1(yK,2,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(yHs3);
        dims__.push_back(get_base1(yK,3,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(yHs1,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(yHs2,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(yHs3,0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))));
        dims__.push_back(get_base1(yK,1,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))));
        dims__.push_back(get_base1(yK,2,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))));
        dims__.push_back(get_base1(yK,3,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,1,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,2,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(yK,3,"yK",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,1,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,2,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(has_aux,3,"has_aux",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(bK1,0) ? bN1 : 0 ));
        dims__.push_back(bK1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(bK2,0) ? bN2 : 0 ));
        dims__.push_back(bK2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((bN1 * bK1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((bN2 * bK2));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_mvmer2_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> yGamma1;
        size_t dim_yGamma1_0__ = logical_gt(get_base1(intercept_type,1,"intercept_type",1),0);
        for (size_t k_0__ = 0; k_0__ < dim_yGamma1_0__; ++k_0__) {
            yGamma1.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,1,"intercept_type",1), pstream__),ub(get_base1(intercept_type,1,"intercept_type",1), pstream__)));
        }
        vector<double> yGamma2;
        size_t dim_yGamma2_0__ = logical_gt(get_base1(intercept_type,2,"intercept_type",1),0);
        for (size_t k_0__ = 0; k_0__ < dim_yGamma2_0__; ++k_0__) {
            yGamma2.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,2,"intercept_type",1), pstream__),ub(get_base1(intercept_type,2,"intercept_type",1), pstream__)));
        }
        vector<double> yGamma3;
        size_t dim_yGamma3_0__ = logical_gt(get_base1(intercept_type,3,"intercept_type",1),0);
        for (size_t k_0__ = 0; k_0__ < dim_yGamma3_0__; ++k_0__) {
            yGamma3.push_back(in__.scalar_lub_constrain(lb(get_base1(intercept_type,3,"intercept_type",1), pstream__),ub(get_base1(intercept_type,3,"intercept_type",1), pstream__)));
        }
        vector_d z_yBeta1 = in__.vector_constrain(get_base1(yK,1,"yK",1));
        vector_d z_yBeta2 = in__.vector_constrain(get_base1(yK,2,"yK",1));
        vector_d z_yBeta3 = in__.vector_constrain(get_base1(yK,3,"yK",1));
        vector_d z_b = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? q : 0 ));
        vector_d z_T = in__.vector_constrain((logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ));
        vector_d rho = in__.vector_lub_constrain(0,1,(logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ));
        vector_d zeta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ));
        vector_d tau = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,1) ? t : 0 ));
        vector_d bSd1 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ));
        matrix_d z_bMat1 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ),(logical_gt(bK1,0) ? bN1 : 0 ));
        matrix_d bCholesky1 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ));
        vector_d bSd2 = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ));
        matrix_d z_bMat2 = in__.matrix_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ),(logical_gt(bK2,0) ? bN2 : 0 ));
        matrix_d bCholesky2 = in__.cholesky_corr_constrain(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ));
        vector<double> yAux1_unscaled;
        size_t dim_yAux1_unscaled_0__ = get_base1(has_aux,1,"has_aux",1);
        for (size_t k_0__ = 0; k_0__ < dim_yAux1_unscaled_0__; ++k_0__) {
            yAux1_unscaled.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yAux2_unscaled;
        size_t dim_yAux2_unscaled_0__ = get_base1(has_aux,2,"has_aux",1);
        for (size_t k_0__ = 0; k_0__ < dim_yAux2_unscaled_0__; ++k_0__) {
            yAux2_unscaled.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yAux3_unscaled;
        size_t dim_yAux3_unscaled_0__ = get_base1(has_aux,3,"has_aux",1);
        for (size_t k_0__ = 0; k_0__ < dim_yAux3_unscaled_0__; ++k_0__) {
            yAux3_unscaled.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yGlobal1;
        size_t dim_yGlobal1_0__ = yHs1;
        for (size_t k_0__ = 0; k_0__ < dim_yGlobal1_0__; ++k_0__) {
            yGlobal1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yGlobal2;
        size_t dim_yGlobal2_0__ = yHs2;
        for (size_t k_0__ = 0; k_0__ < dim_yGlobal2_0__; ++k_0__) {
            yGlobal2.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yGlobal3;
        size_t dim_yGlobal3_0__ = yHs3;
        for (size_t k_0__ = 0; k_0__ < dim_yGlobal3_0__; ++k_0__) {
            yGlobal3.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> yLocal1;
        size_t dim_yLocal1_0__ = yHs1;
        for (size_t k_0__ = 0; k_0__ < dim_yLocal1_0__; ++k_0__) {
            yLocal1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1)));
        }
        vector<vector_d> yLocal2;
        size_t dim_yLocal2_0__ = yHs2;
        for (size_t k_0__ = 0; k_0__ < dim_yLocal2_0__; ++k_0__) {
            yLocal2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1)));
        }
        vector<vector_d> yLocal3;
        size_t dim_yLocal3_0__ = yHs3;
        for (size_t k_0__ = 0; k_0__ < dim_yLocal3_0__; ++k_0__) {
            yLocal3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1)));
        }
        vector<double> y_caux1;
        size_t dim_y_caux1_0__ = logical_gt(yHs1,0);
        for (size_t k_0__ = 0; k_0__ < dim_y_caux1_0__; ++k_0__) {
            y_caux1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> y_caux2;
        size_t dim_y_caux2_0__ = logical_gt(yHs2,0);
        for (size_t k_0__ = 0; k_0__ < dim_y_caux2_0__; ++k_0__) {
            y_caux2.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> y_caux3;
        size_t dim_y_caux3_0__ = logical_gt(yHs3,0);
        for (size_t k_0__ = 0; k_0__ < dim_y_caux3_0__; ++k_0__) {
            y_caux3.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yOol1;
        size_t dim_yOol1_0__ = logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6);
        for (size_t k_0__ = 0; k_0__ < dim_yOol1_0__; ++k_0__) {
            yOol1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yOol2;
        size_t dim_yOol2_0__ = logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6);
        for (size_t k_0__ = 0; k_0__ < dim_yOol2_0__; ++k_0__) {
            yOol2.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yOol3;
        size_t dim_yOol3_0__ = logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6);
        for (size_t k_0__ = 0; k_0__ < dim_yOol3_0__; ++k_0__) {
            yOol3.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> yMix1;
        size_t dim_yMix1_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6)));
        for (size_t k_0__ = 0; k_0__ < dim_yMix1_0__; ++k_0__) {
            yMix1.push_back(in__.vector_lb_constrain(0,get_base1(yK,1,"yK",1)));
        }
        vector<vector_d> yMix2;
        size_t dim_yMix2_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6)));
        for (size_t k_0__ = 0; k_0__ < dim_yMix2_0__; ++k_0__) {
            yMix2.push_back(in__.vector_lb_constrain(0,get_base1(yK,2,"yK",1)));
        }
        vector<vector_d> yMix3;
        size_t dim_yMix3_0__ = (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6)));
        for (size_t k_0__ = 0; k_0__ < dim_yMix3_0__; ++k_0__) {
            yMix3.push_back(in__.vector_lb_constrain(0,get_base1(yK,3,"yK",1)));
        }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yGamma1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yGamma2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yGamma3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,1,"yK",1); ++k_0__) {
            vars__.push_back(z_yBeta1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,2,"yK",1); ++k_0__) {
            vars__.push_back(z_yBeta2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,3,"yK",1); ++k_0__) {
            vars__.push_back(z_yBeta3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? q : 0 ); ++k_0__) {
            vars__.push_back(z_b[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ); ++k_0__) {
            vars__.push_back(z_T[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ); ++k_0__) {
            vars__.push_back(rho[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ); ++k_0__) {
            vars__.push_back(zeta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,1) ? t : 0 ); ++k_0__) {
            vars__.push_back(tau[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ); ++k_0__) {
            vars__.push_back(bSd1[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(bK1,0) ? bN1 : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ); ++k_0__) {
                vars__.push_back(z_bMat1(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++k_0__) {
                vars__.push_back(bCholesky1(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ); ++k_0__) {
            vars__.push_back(bSd2[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (logical_gt(bK2,0) ? bN2 : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ); ++k_0__) {
                vars__.push_back(z_bMat2(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++k_0__) {
                vars__.push_back(bCholesky2(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,1,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux1_unscaled[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,2,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux2_unscaled[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,3,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux3_unscaled[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < yHs1; ++k_0__) {
            vars__.push_back(yGlobal1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < yHs2; ++k_0__) {
            vars__.push_back(yGlobal2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < yHs3; ++k_0__) {
            vars__.push_back(yGlobal3[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,1,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < yHs1; ++k_0__) {
                vars__.push_back(yLocal1[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,2,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < yHs2; ++k_0__) {
                vars__.push_back(yLocal2[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,3,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < yHs3; ++k_0__) {
                vars__.push_back(yLocal3[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_gt(yHs1,0); ++k_0__) {
            vars__.push_back(y_caux1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(yHs2,0); ++k_0__) {
            vars__.push_back(y_caux2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(yHs3,0); ++k_0__) {
            vars__.push_back(y_caux3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++k_0__) {
            vars__.push_back(yOol1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++k_0__) {
            vars__.push_back(yOol2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++k_0__) {
            vars__.push_back(yOol3[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,1,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++k_0__) {
                vars__.push_back(yMix1[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,2,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++k_0__) {
                vars__.push_back(yMix2[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < get_base1(yK,3,"yK",1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++k_0__) {
                vars__.push_back(yMix3[k_0__][k_1__]);
                }
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 1509;
            validate_non_negative_index("yBeta1", "get_base1(yK,1,\"yK\",1)", get_base1(yK,1,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta1(static_cast<Eigen::VectorXd::Index>(get_base1(yK,1,"yK",1)));
            (void) yBeta1;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta1, DUMMY_VAR__);
            stan::math::fill(yBeta1,DUMMY_VAR__);
            current_statement_begin__ = 1510;
            validate_non_negative_index("yBeta2", "get_base1(yK,2,\"yK\",1)", get_base1(yK,2,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta2(static_cast<Eigen::VectorXd::Index>(get_base1(yK,2,"yK",1)));
            (void) yBeta2;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta2, DUMMY_VAR__);
            stan::math::fill(yBeta2,DUMMY_VAR__);
            current_statement_begin__ = 1511;
            validate_non_negative_index("yBeta3", "get_base1(yK,3,\"yK\",1)", get_base1(yK,3,"yK",1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yBeta3(static_cast<Eigen::VectorXd::Index>(get_base1(yK,3,"yK",1)));
            (void) yBeta3;  // dummy to suppress unused var warning

            stan::math::initialize(yBeta3, DUMMY_VAR__);
            stan::math::fill(yBeta3,DUMMY_VAR__);
            current_statement_begin__ = 1512;
            validate_non_negative_index("yAux1", "get_base1(has_aux,1,\"has_aux\",1)", get_base1(has_aux,1,"has_aux",1));
            vector<local_scalar_t__> yAux1(get_base1(has_aux,1,"has_aux",1));
            stan::math::initialize(yAux1, DUMMY_VAR__);
            stan::math::fill(yAux1,DUMMY_VAR__);
            current_statement_begin__ = 1513;
            validate_non_negative_index("yAux2", "get_base1(has_aux,2,\"has_aux\",1)", get_base1(has_aux,2,"has_aux",1));
            vector<local_scalar_t__> yAux2(get_base1(has_aux,2,"has_aux",1));
            stan::math::initialize(yAux2, DUMMY_VAR__);
            stan::math::fill(yAux2,DUMMY_VAR__);
            current_statement_begin__ = 1514;
            validate_non_negative_index("yAux3", "get_base1(has_aux,3,\"has_aux\",1)", get_base1(has_aux,3,"has_aux",1));
            vector<local_scalar_t__> yAux3(get_base1(has_aux,3,"has_aux",1));
            stan::math::initialize(yAux3, DUMMY_VAR__);
            stan::math::fill(yAux3,DUMMY_VAR__);
            current_statement_begin__ = 1515;
            validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
            (void) theta_L;  // dummy to suppress unused var warning

            stan::math::initialize(theta_L, DUMMY_VAR__);
            stan::math::fill(theta_L,DUMMY_VAR__);
            current_statement_begin__ = 1516;
            local_scalar_t__ yAuxMaximum;
            (void) yAuxMaximum;  // dummy to suppress unused var warning

            stan::math::initialize(yAuxMaximum, DUMMY_VAR__);
            stan::math::fill(yAuxMaximum,DUMMY_VAR__);
            stan::math::assign(yAuxMaximum,1.0);
            current_statement_begin__ = 1519;
            validate_non_negative_index("bMat1", "(logical_gt(bK1,0) ? bN1 : 0 )", (logical_gt(bK1,0) ? bN1 : 0 ));
            validate_non_negative_index("bMat1", "bK1", bK1);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bMat1(static_cast<Eigen::VectorXd::Index>((logical_gt(bK1,0) ? bN1 : 0 )),static_cast<Eigen::VectorXd::Index>(bK1));
            (void) bMat1;  // dummy to suppress unused var warning

            stan::math::initialize(bMat1, DUMMY_VAR__);
            stan::math::fill(bMat1,DUMMY_VAR__);
            current_statement_begin__ = 1520;
            validate_non_negative_index("bMat2", "(logical_gt(bK2,0) ? bN2 : 0 )", (logical_gt(bK2,0) ? bN2 : 0 ));
            validate_non_negative_index("bMat2", "bK2", bK2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bMat2(static_cast<Eigen::VectorXd::Index>((logical_gt(bK2,0) ? bN2 : 0 )),static_cast<Eigen::VectorXd::Index>(bK2));
            (void) bMat2;  // dummy to suppress unused var warning

            stan::math::initialize(bMat2, DUMMY_VAR__);
            stan::math::fill(bMat2,DUMMY_VAR__);


            current_statement_begin__ = 1523;
            if (as_bool(logical_eq(get_base1(has_aux,1,"has_aux",1),1))) {

                current_statement_begin__ = 1524;
                stan::model::assign(yAux1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            make_aux(get_base1(yAux1_unscaled,1,"yAux1_unscaled",1),get_base1(y_prior_dist_for_aux,1,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,1,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,1,"y_prior_scale_for_aux",1), pstream__), 
                            "assigning variable yAux1");
                current_statement_begin__ = 1526;
                if (as_bool(logical_gt(get_base1(yAux1,1,"yAux1",1),yAuxMaximum))) {
                    current_statement_begin__ = 1527;
                    stan::math::assign(yAuxMaximum, get_base1(yAux1,1,"yAux1",1));
                }
            }
            current_statement_begin__ = 1530;
            if (as_bool(logical_gt(get_base1(yK,1,"yK",1),0))) {
                current_statement_begin__ = 1531;
                stan::math::assign(yBeta1, make_beta(z_yBeta1,get_base1(y_prior_dist,1,"y_prior_dist",1),y_prior_mean1,y_prior_scale1,y_prior_df1,get_base1(y_global_prior_scale,1,"y_global_prior_scale",1),yGlobal1,yLocal1,yOol1,yMix1,yAux1,get_base1(family,1,"family",1),get_base1(y_slab_scale,1,"y_slab_scale",1),y_caux1, pstream__));
            }
            current_statement_begin__ = 1535;
            if (as_bool(logical_gt(M,1))) {

                current_statement_begin__ = 1536;
                if (as_bool(logical_eq(get_base1(has_aux,2,"has_aux",1),1))) {

                    current_statement_begin__ = 1537;
                    stan::model::assign(yAux2, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                make_aux(get_base1(yAux2_unscaled,1,"yAux2_unscaled",1),get_base1(y_prior_dist_for_aux,2,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,2,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,2,"y_prior_scale_for_aux",1), pstream__), 
                                "assigning variable yAux2");
                    current_statement_begin__ = 1539;
                    if (as_bool(logical_gt(get_base1(yAux2,1,"yAux2",1),yAuxMaximum))) {
                        current_statement_begin__ = 1540;
                        stan::math::assign(yAuxMaximum, get_base1(yAux2,1,"yAux2",1));
                    }
                }
                current_statement_begin__ = 1542;
                if (as_bool(logical_gt(get_base1(yK,2,"yK",1),0))) {
                    current_statement_begin__ = 1543;
                    stan::math::assign(yBeta2, make_beta(z_yBeta2,get_base1(y_prior_dist,2,"y_prior_dist",1),y_prior_mean2,y_prior_scale2,y_prior_df2,get_base1(y_global_prior_scale,2,"y_global_prior_scale",1),yGlobal2,yLocal2,yOol2,yMix2,yAux2,get_base1(family,2,"family",1),get_base1(y_slab_scale,2,"y_slab_scale",1),y_caux2, pstream__));
                }
            }
            current_statement_begin__ = 1548;
            if (as_bool(logical_gt(M,2))) {

                current_statement_begin__ = 1549;
                if (as_bool(logical_eq(get_base1(has_aux,3,"has_aux",1),1))) {

                    current_statement_begin__ = 1550;
                    stan::model::assign(yAux3, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                make_aux(get_base1(yAux3_unscaled,1,"yAux3_unscaled",1),get_base1(y_prior_dist_for_aux,3,"y_prior_dist_for_aux",1),get_base1(y_prior_mean_for_aux,3,"y_prior_mean_for_aux",1),get_base1(y_prior_scale_for_aux,3,"y_prior_scale_for_aux",1), pstream__), 
                                "assigning variable yAux3");
                    current_statement_begin__ = 1552;
                    if (as_bool(logical_gt(get_base1(yAux3,1,"yAux3",1),yAuxMaximum))) {
                        current_statement_begin__ = 1553;
                        stan::math::assign(yAuxMaximum, get_base1(yAux3,1,"yAux3",1));
                    }
                }
                current_statement_begin__ = 1555;
                if (as_bool(logical_gt(get_base1(yK,3,"yK",1),0))) {
                    current_statement_begin__ = 1556;
                    stan::math::assign(yBeta3, make_beta(z_yBeta3,get_base1(y_prior_dist,3,"y_prior_dist",1),y_prior_mean3,y_prior_scale3,y_prior_df3,get_base1(y_global_prior_scale,3,"y_global_prior_scale",1),yGlobal3,yLocal3,yOol3,yMix3,yAux3,get_base1(family,3,"family",1),get_base1(y_slab_scale,3,"y_slab_scale",1),y_caux3, pstream__));
                }
            }
            current_statement_begin__ = 1563;
            if (as_bool(logical_eq(prior_dist_for_cov,1))) {
                {
                current_statement_begin__ = 1564;
                int mark(0);
                (void) mark;  // dummy to suppress unused var warning

                stan::math::fill(mark, std::numeric_limits<int>::min());
                stan::math::assign(mark,1);


                current_statement_begin__ = 1566;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,yAuxMaximum,tau,b_prior_scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 1569;
                if (as_bool(logical_gt(bK1,0))) {
                    current_statement_begin__ = 1570;
                    stan::math::assign(bMat1, make_b_matrix(z_b,theta_L,p,l,1, pstream__));
                }
                current_statement_begin__ = 1572;
                if (as_bool(logical_gt(bK2,0))) {
                    current_statement_begin__ = 1573;
                    stan::math::assign(bMat2, make_b_matrix(z_b,theta_L,p,l,2, pstream__));
                }
                }
            } else if (as_bool(logical_eq(prior_dist_for_cov,2))) {

                current_statement_begin__ = 1579;
                if (as_bool(logical_eq(bK1,1))) {
                    current_statement_begin__ = 1580;
                    stan::math::assign(bMat1, transpose(multiply(get_base1(bSd1,1,"bSd1",1),z_bMat1)));
                } else if (as_bool(logical_gt(bK1,1))) {
                    current_statement_begin__ = 1582;
                    stan::math::assign(bMat1, transpose(multiply(diag_pre_multiply(bSd1,bCholesky1),z_bMat1)));
                }
                current_statement_begin__ = 1584;
                if (as_bool(logical_eq(bK2,1))) {
                    current_statement_begin__ = 1585;
                    stan::math::assign(bMat2, transpose(multiply(get_base1(bSd2,1,"bSd2",1),z_bMat2)));
                } else if (as_bool(logical_gt(bK2,1))) {
                    current_statement_begin__ = 1587;
                    stan::math::assign(bMat2, transpose(multiply(diag_pre_multiply(bSd2,bCholesky2),z_bMat2)));
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 1509;
            current_statement_begin__ = 1510;
            current_statement_begin__ = 1511;
            current_statement_begin__ = 1512;
            current_statement_begin__ = 1513;
            current_statement_begin__ = 1514;
            current_statement_begin__ = 1515;
            current_statement_begin__ = 1516;
            current_statement_begin__ = 1519;
            current_statement_begin__ = 1520;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < get_base1(yK,1,"yK",1); ++k_0__) {
            vars__.push_back(yBeta1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,2,"yK",1); ++k_0__) {
            vars__.push_back(yBeta2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(yK,3,"yK",1); ++k_0__) {
            vars__.push_back(yBeta3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,1,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,2,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(has_aux,3,"has_aux",1); ++k_0__) {
            vars__.push_back(yAux3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_theta_L; ++k_0__) {
            vars__.push_back(theta_L[k_0__]);
            }
        vars__.push_back(yAuxMaximum);
            for (int k_1__ = 0; k_1__ < bK1; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (logical_gt(bK1,0) ? bN1 : 0 ); ++k_0__) {
                vars__.push_back(bMat1(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < bK2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (logical_gt(bK2,0) ? bN2 : 0 ); ++k_0__) {
                vars__.push_back(bMat2(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 1699;
            validate_non_negative_index("mean_PPD", "M", M);
            vector<local_scalar_t__> mean_PPD(M);
            stan::math::initialize(mean_PPD, DUMMY_VAR__);
            stan::math::fill(mean_PPD,DUMMY_VAR__);
            current_statement_begin__ = 1700;
            validate_non_negative_index("yAlpha1", "logical_gt(get_base1(intercept_type,1,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
            vector<local_scalar_t__> yAlpha1(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0));
            stan::math::initialize(yAlpha1, DUMMY_VAR__);
            stan::math::fill(yAlpha1,DUMMY_VAR__);
            current_statement_begin__ = 1701;
            validate_non_negative_index("yAlpha2", "logical_gt(get_base1(intercept_type,2,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
            vector<local_scalar_t__> yAlpha2(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0));
            stan::math::initialize(yAlpha2, DUMMY_VAR__);
            stan::math::fill(yAlpha2,DUMMY_VAR__);
            current_statement_begin__ = 1702;
            validate_non_negative_index("yAlpha3", "logical_gt(get_base1(intercept_type,3,\"intercept_type\",1),0)", logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
            vector<local_scalar_t__> yAlpha3(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0));
            stan::math::initialize(yAlpha3, DUMMY_VAR__);
            stan::math::fill(yAlpha3,DUMMY_VAR__);
            current_statement_begin__ = 1703;
            validate_non_negative_index("bCov1", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bCov1(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 )));
            (void) bCov1;  // dummy to suppress unused var warning

            stan::math::initialize(bCov1, DUMMY_VAR__);
            stan::math::fill(bCov1,DUMMY_VAR__);
            current_statement_begin__ = 1704;
            validate_non_negative_index("bCov2", "((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 )", ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bCov2(static_cast<Eigen::VectorXd::Index>(((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 )));
            (void) bCov2;  // dummy to suppress unused var warning

            stan::math::initialize(bCov2, DUMMY_VAR__);
            stan::math::fill(bCov2,DUMMY_VAR__);
            current_statement_begin__ = 1705;
            validate_non_negative_index("b1", "(bN1 * bK1)", (bN1 * bK1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b1(static_cast<Eigen::VectorXd::Index>((bN1 * bK1)));
            (void) b1;  // dummy to suppress unused var warning

            stan::math::initialize(b1, DUMMY_VAR__);
            stan::math::fill(b1,DUMMY_VAR__);
            stan::math::assign(b1,to_vector(transpose(bMat1)));
            current_statement_begin__ = 1706;
            validate_non_negative_index("b2", "(bN2 * bK2)", (bN2 * bK2));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b2(static_cast<Eigen::VectorXd::Index>((bN2 * bK2)));
            (void) b2;  // dummy to suppress unused var warning

            stan::math::initialize(b2, DUMMY_VAR__);
            stan::math::fill(b2,DUMMY_VAR__);
            stan::math::assign(b2,to_vector(transpose(bMat2)));


            {
            current_statement_begin__ = 1710;
            int bMat1_colshift(0);
            (void) bMat1_colshift;  // dummy to suppress unused var warning

            stan::math::fill(bMat1_colshift, std::numeric_limits<int>::min());
            stan::math::assign(bMat1_colshift,0);
            current_statement_begin__ = 1711;
            int bMat2_colshift(0);
            (void) bMat2_colshift;  // dummy to suppress unused var warning

            stan::math::fill(bMat2_colshift, std::numeric_limits<int>::min());
            stan::math::assign(bMat2_colshift,0);


            current_statement_begin__ = 1714;
            if (as_bool(logical_gt(M,0))) {
                {
                current_statement_begin__ = 1715;
                validate_non_negative_index("yEta1", "get_base1(yNeta,1,\"yNeta\",1)", get_base1(yNeta,1,"yNeta",1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta1(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,1,"yNeta",1)));
                (void) yEta1;  // dummy to suppress unused var warning

                stan::math::initialize(yEta1, DUMMY_VAR__);
                stan::math::fill(yEta1,DUMMY_VAR__);
                stan::math::assign(yEta1,evaluate_mu(evaluate_eta(yX1,y1_Z1,y1_Z2,y1_Z1_id,y1_Z2_id,yGamma1,yBeta1,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,1,"intercept_type",1), pstream__),get_base1(family,1,"family",1),get_base1(link,1,"link",1), pstream__));


                current_statement_begin__ = 1719;
                stan::model::assign(mean_PPD, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            mean_PPD_rng(yEta1,yAux1,get_base1(family,1,"family",1), base_rng__, pstream__), 
                            "assigning variable mean_PPD");
                }
            }
            current_statement_begin__ = 1723;
            if (as_bool(logical_gt(M,1))) {
                {
                current_statement_begin__ = 1724;
                validate_non_negative_index("yEta2", "get_base1(yNeta,2,\"yNeta\",1)", get_base1(yNeta,2,"yNeta",1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta2(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,2,"yNeta",1)));
                (void) yEta2;  // dummy to suppress unused var warning

                stan::math::initialize(yEta2, DUMMY_VAR__);
                stan::math::fill(yEta2,DUMMY_VAR__);


                current_statement_begin__ = 1725;
                stan::math::assign(bMat1_colshift, (bMat1_colshift + get_base1(bK1_len,1,"bK1_len",1)));
                current_statement_begin__ = 1726;
                stan::math::assign(bMat2_colshift, (bMat2_colshift + get_base1(bK2_len,1,"bK2_len",1)));
                current_statement_begin__ = 1727;
                stan::math::assign(yEta2, evaluate_mu(evaluate_eta(yX2,y2_Z1,y2_Z2,y2_Z1_id,y2_Z2_id,yGamma2,yBeta2,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,2,"intercept_type",1), pstream__),get_base1(family,2,"family",1),get_base1(link,2,"link",1), pstream__));
                current_statement_begin__ = 1730;
                stan::model::assign(mean_PPD, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            mean_PPD_rng(yEta2,yAux2,get_base1(family,2,"family",1), base_rng__, pstream__), 
                            "assigning variable mean_PPD");
                }
            }
            current_statement_begin__ = 1734;
            if (as_bool(logical_gt(M,2))) {
                {
                current_statement_begin__ = 1735;
                validate_non_negative_index("yEta3", "get_base1(yNeta,3,\"yNeta\",1)", get_base1(yNeta,3,"yNeta",1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  yEta3(static_cast<Eigen::VectorXd::Index>(get_base1(yNeta,3,"yNeta",1)));
                (void) yEta3;  // dummy to suppress unused var warning

                stan::math::initialize(yEta3, DUMMY_VAR__);
                stan::math::fill(yEta3,DUMMY_VAR__);


                current_statement_begin__ = 1736;
                stan::math::assign(bMat1_colshift, (bMat1_colshift + get_base1(bK1_len,2,"bK1_len",1)));
                current_statement_begin__ = 1737;
                stan::math::assign(bMat2_colshift, (bMat2_colshift + get_base1(bK2_len,2,"bK2_len",1)));
                current_statement_begin__ = 1738;
                stan::math::assign(yEta3, evaluate_mu(evaluate_eta(yX3,y3_Z1,y3_Z2,y3_Z1_id,y3_Z2_id,yGamma3,yBeta3,bMat1,bMat2,bMat1_colshift,bMat2_colshift,get_base1(intercept_type,3,"intercept_type",1), pstream__),get_base1(family,3,"family",1),get_base1(link,3,"link",1), pstream__));
                current_statement_begin__ = 1741;
                stan::model::assign(mean_PPD, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                            mean_PPD_rng(yEta3,yAux3,get_base1(family,3,"family",1), base_rng__, pstream__), 
                            "assigning variable mean_PPD");
                }
            }
            }
            current_statement_begin__ = 1746;
            if (as_bool(logical_gt(get_base1(intercept_type,1,"intercept_type",1),0))) {
                current_statement_begin__ = 1747;
                stan::model::assign(yAlpha1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(yGamma1,1,"yGamma1",1) - dot_product(yXbar1,yBeta1)), 
                            "assigning variable yAlpha1");
            }
            current_statement_begin__ = 1748;
            if (as_bool((primitive_value(logical_gt(M,1)) && primitive_value(logical_gt(get_base1(intercept_type,2,"intercept_type",1),0))))) {
                current_statement_begin__ = 1749;
                stan::model::assign(yAlpha2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(yGamma2,1,"yGamma2",1) - dot_product(yXbar2,yBeta2)), 
                            "assigning variable yAlpha2");
            }
            current_statement_begin__ = 1750;
            if (as_bool((primitive_value(logical_gt(M,2)) && primitive_value(logical_gt(get_base1(intercept_type,3,"intercept_type",1),0))))) {
                current_statement_begin__ = 1751;
                stan::model::assign(yAlpha3, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(yGamma3,1,"yGamma3",1) - dot_product(yXbar3,yBeta3)), 
                            "assigning variable yAlpha3");
            }
            current_statement_begin__ = 1756;
            if (as_bool((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_eq(bK1,1))))) {

                current_statement_begin__ = 1757;
                stan::model::assign(bCov1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(bSd1,1,"bSd1",1) * get_base1(bSd1,1,"bSd1",1)), 
                            "assigning variable bCov1");
            } else if (as_bool((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))))) {

                current_statement_begin__ = 1760;
                stan::math::assign(bCov1, stan::model::rvalue(to_vector(quad_form_diag(multiply_lower_tri_self_transpose(bCholesky1),bSd1)), stan::model::cons_list(stan::model::index_multi(bCov1_idx), stan::model::nil_index_list()), "to_vector(quad_form_diag(multiply_lower_tri_self_transpose(bCholesky1),bSd1))"));
            }
            current_statement_begin__ = 1765;
            if (as_bool((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_eq(bK2,1))))) {

                current_statement_begin__ = 1766;
                stan::model::assign(bCov2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (get_base1(bSd2,1,"bSd2",1) * get_base1(bSd2,1,"bSd2",1)), 
                            "assigning variable bCov2");
            } else if (as_bool((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))))) {

                current_statement_begin__ = 1769;
                stan::math::assign(bCov2, stan::model::rvalue(to_vector(quad_form_diag(multiply_lower_tri_self_transpose(bCholesky2),bSd2)), stan::model::cons_list(stan::model::index_multi(bCov2_idx), stan::model::nil_index_list()), "to_vector(quad_form_diag(multiply_lower_tri_self_transpose(bCholesky2),bSd2))"));
            }

            // validate generated quantities
            current_statement_begin__ = 1699;
            current_statement_begin__ = 1700;
            current_statement_begin__ = 1701;
            current_statement_begin__ = 1702;
            current_statement_begin__ = 1703;
            current_statement_begin__ = 1704;
            current_statement_begin__ = 1705;
            current_statement_begin__ = 1706;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(mean_PPD[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yAlpha1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yAlpha2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            vars__.push_back(yAlpha3[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ); ++k_0__) {
            vars__.push_back(bCov1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ); ++k_0__) {
            vars__.push_back(bCov2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (bN1 * bK1); ++k_0__) {
            vars__.push_back(b1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (bN2 * bK2); ++k_0__) {
            vars__.push_back(b2[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_mvmer2";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,1,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,2,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,3,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? q : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? t : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bSd1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(bK1,0) ? bN1 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_bMat1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "bCholesky1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bSd2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(bK2,0) ? bN2 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_bMat2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "bCholesky2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,1,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux1_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,2,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux2_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,3,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux3_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,1,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs1; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,2,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,3,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs1,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs2,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs3,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,1,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,2,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,3,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= get_base1(yK,1,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta1" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,2,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta2" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,3,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta3" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,1,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux1" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,2,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux2" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,3,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux3" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_L" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAuxMaximum";
            param_names__.push_back(param_name_stream__.str());
            for (int k_1__ = 1; k_1__ <= bK1; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (logical_gt(bK1,0) ? bN1 : 0 ); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bMat1" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= bK2; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (logical_gt(bK2,0) ? bN2 : 0 ); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bMat2" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_PPD" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCov1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCov2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (bN1 * bK1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (bN2 * bK2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGamma3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,1,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,2,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(yK,3,"yK",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_yBeta3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? q : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_z_T : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_rho : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? len_concentration : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,1) ? t : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,2) ? bK1 : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bSd1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(bK1,0) ? bN1 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? bK1 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_bMat1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ) * (((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,1))) ? bK1 : 0 ) - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCholesky1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_cov,2) ? bK2 : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bSd2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(bK2,0) ? bN2 : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? bK2 : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_bMat2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ) * (((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,1))) ? bK2 : 0 ) - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCholesky2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,1,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux1_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,2,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux2_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(has_aux,3,"has_aux",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAux3_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= yHs3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yGlobal3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,1,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs1; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,2,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,3,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= yHs3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yLocal3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs1,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs2,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(yHs3,0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_caux3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yOol3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,1,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,1,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,2,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,2,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= get_base1(yK,3,"yK",1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),5)) || primitive_value(logical_eq(get_base1(y_prior_dist,3,"y_prior_dist",1),6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yMix3" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= get_base1(yK,1,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta1" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,2,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta2" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(yK,3,"yK",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yBeta3" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,1,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux1" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,2,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux2" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= get_base1(has_aux,3,"has_aux",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "yAux3" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_L" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAuxMaximum";
            param_names__.push_back(param_name_stream__.str());
            for (int k_1__ = 1; k_1__ <= bK1; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (logical_gt(bK1,0) ? bN1 : 0 ); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bMat1" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= bK2; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (logical_gt(bK2,0) ? bN2 : 0 ); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "bMat2" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mean_PPD" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,1,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,2,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_gt(get_base1(intercept_type,3,"intercept_type",1),0); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yAlpha3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK1,0))) ? size(bCov1_idx) : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCov1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((primitive_value(logical_eq(prior_dist_for_cov,2)) && primitive_value(logical_gt(bK2,0))) ? size(bCov2_idx) : 0 ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bCov2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (bN1 * bK1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (bN2 * bK2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_mvmer2_namespace::model_mvmer2 stan_model;


#endif
